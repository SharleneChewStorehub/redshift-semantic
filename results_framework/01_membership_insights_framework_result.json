{
  "file_name": "01_membership_insights.sql",
  "timestamp": "/Users/sharlenechew/redshift-semantic",
  "business_question": "For the merchant 'starwise', compare the value of loyalty members vs. non-members for June 2025. I need a breakdown of their total sales, transaction counts, Average Order Value (AOV), and Lifetime Value (LTV).",
  "golden_sql": "with l as (\n  select\n    b.name,\n    dateadd(hour,8,b.\"membershipsetting.firstgoliveat\") as firstgoliveat\n  from storehub_mongo.businesses b\n  where CHARINDEX('internal', b.planid) = 0 \n    and CHARINDEX('@storehub.com', b.email) = 0\n    and \"membershipsetting.firstgoliveat\" is not null\n    and b.name = 'starwise'\n),\n\nm as (\nSELECT distinct\n    b.name,\n    c.customerid,\n    c._id as customer_id,\n    c.membershipjointime\nfrom storehub_mongo.businesses b\nleft join storehub_mongo.customers c  \n    on c.business = b.name\nwhere CHARINDEX('internal', b.planid) = 0 \n    and CHARINDEX('@storehub.com', b.email) = 0\n    and c.membershipjointime is not null \n    and b.name = 'starwise'\n),\n\nct as (\nselect \n    l.name,\n    count(distinct m.customerid) as totalMembers,\n    --sum(case when m.membershipjointime >= dateadd(hour,-8,cast(getdate()-1 as date)) and m.membershipjointime < dateadd(hour,-8,cast(getdate() as date)) then 1 else 0 end) as newMembersYesterday,\n    --sum(case when m.membershipjointime >= dateadd(hour,-8,cast(getdate()-2 as date)) and m.membershipjointime < dateadd(hour,-8,cast(getdate()-1 as date)) then 1 else 0 end) as newMembersPrevDay,\n    --sum(case when m.membershipjointime >= dateadd(hour,-8,cast(getdate()-30 as date)) and m.membershipjointime < dateadd(hour,-8,cast(getdate() as date)) then 1 else 0 end) as newMembersLast30Days,\n    --sum(case when m.membershipjointime >= dateadd(hour,-8,cast(getdate()-60 as date)) and m.membershipjointime < dateadd(hour,-8,cast(getdate()-31 as date)) then 1 else 0 end) as newMembersPrev30Days\n    sum(case when m.membershipjointime >= dateadd(hour,-8,'2025-06-01') and m.membershipjointime < dateadd(hour,-8,'2025-07-01') then 1 else 0 end) as newMembersDefinedPeriod\nfrom l\nleft join m\n    on m.name = l.name\ngroup by 1\n),\n\ntrx as (\nselect distinct \n    tr.business,\n    b.\"membershipsetting.firstgoliveat\" as firstGoLiveAt,\n    tr.customerid,\n    m.membershipjointime,\n    tr.createdtime,\n    tr.channel,\n    tr.shippingtype,\n    tr.total,\n    case when tr.createdtime > b.\"membershipsetting.firstgoliveat\" then 1 else 0 end as businessMemberTxn,\n    case when tr.createdtime > m.membershipjointime then 1 else 0 end as customerMemberTxn\n\nfrom storehub_mongo.transactionrecords tr\n\n--left join storehub_mongo.rewardsettings r\n--    on r.merchantname = tr.business\n\nleft join storehub_mongo.businesses b\n    on b.name = tr.business\n    \nleft join m\n    on tr.business = m.name\n    and tr.customerid = m.customerid\n\nwhere (tr.channel is null or tr.channel in (2,3))\n    and tr.transactiontype = 'Sale'\n    and tr.iscancelled is not TRUE\n    and tr.status not in ('cancelled','created', 'failed', 'paymentCancelled', 'pendingPayment', 'pendingVerification')\n    and tr.createdtime >= dateadd(hour,-8,cast(getdate()-180 as date))\n    and tr.business = 'starwise'\n    \norder by 3 ASC, 5 ASC \n)\n/*,\n\nrr as (\nselect \n    pc.business,\n    sum(case when pc.restclaimcount = 0 then 1 else 0 end) as total_rewards_redeemed\nfrom storehub_mongo.promotioncustomers pc\nwhere pc.rewardsource IN ('welcomeNewMembershipReward', 'pointsReward', 'birthdayReward', 'tierUpgradeReward')\n    [[and pc.business = {{bo_account_name}}]]\ngroup by 1\n)\n*/\n\n\nselect \n    tmp.name as business,\n    tmp.totalMembers,\n    tmp.activeMembers,\n    --tmp.newMembersYesterday,\n    --tmp.newMembersPrevDay,\n    --tmp.newMembersLast30Days,\n    --tmp.newMembersPrev30Days,\n    tmp.newMembersDefinedPeriod,\n    cast(tmp.memberTransactions as float) / nullif(cast(tmp.totalTransactions as float),0) as percentMemberTransactions,\n    tmp.memberTransactions,\n    cast(tmp.memberSales as float) / nullif(cast(tmp.totalSales as float),0) as percentMemberSales,\n    tmp.memberSales,\n    tmp.memberCustomers,\n    tmp.membersAverageLifeTimeValue,\n    tmp.nonMembersAverageLifeTimeValue,\n    tmp.memberAOV,\n    tmp.nonMemberAOV,\n    tmp.membersAverageTransactions,\n    tmp.nonMembersAverageTransactions,\n    tmp.totalRewardsRedeemed\nfrom (\n    select \n        ct.name,\n        ct.totalMembers,\n        count(distinct case when trx.createdtime >= dateadd(hour,-8,cast(getdate()-30 as date)) and trx.membershipjointime is not null then trx.customerid end) as activeMembers, \n        --ct.newMembersYesterday,\n        --ct.newMembersPrevDay,\n        --ct.newMembersLast30Days,\n        --ct.newMembersPrev30Days,\n        ct.newMembersDefinedPeriod,\n        sum(case when trx.customerMemberTxn = 1 then 1 else 0 end) as memberTransactions,\n        sum(case when trx.businessMemberTxn = 1 then 1 else 0 end) as totalTransactions,\n        sum(case when trx.customerMemberTxn = 1 then trx.total else 0 end) as memberSales,\n        sum(case when trx.businessMemberTxn = 1 then trx.total else 0 end) as totalSales,\n        count(distinct case when trx.customerMemberTxn = 1 then trx.customerid end) as memberCustomers,\n        sum(case when trx.businessMemberTxn = 1 and trx.customerMemberTxn = 0 then 1 else 0 end) as nonMemberTransactions,\n        sum(case when trx.businessMemberTxn = 1 and trx.customerMemberTxn = 0 then trx.total else 0 end) as nonMemberSales,\n        sum(case when trx.businessMemberTxn = 1 and trx.customerMemberTxn = 0 and trx.customerid = '' then 1 else 0 end) as nonMemberNoCustomerIdTransactions,\n        count(distinct case when trx.businessMemberTxn = 1 and trx.customerMemberTxn = 0 and trx.customerid <> '' then trx.customerid end) as nonMemberCustomers,\n        cast(memberSales as float) / nullif(cast(memberCustomers as float),0) membersAverageLifeTimeValue,\n        cast(nonMemberSales as float) / nullif(cast(nonMemberNoCustomerIdTransactions + nonMemberCustomers as float), 0) as nonMembersAverageLifeTimeValue,\n        cast(memberSales as float) / nullif(cast(memberTransactions as float), 0) as memberAOV,\n        cast(nonMemberSales as float) / nullif(cast(nonMemberTransactions as float), 0) as nonMemberAOV,\n        cast(memberTransactions as float) / nullif(cast(memberCustomers as float), 0) as membersAverageTransactions,\n        cast(nonMemberTransactions as float) / nullif(cast(nonMemberNoCustomerIdTransactions + nonMemberCustomers as float), 0) as nonMembersAverageTransactions,\n        rr2.totalRewardsRedeemed2 as totalRewardsRedeemed\n    \n    from ct\n        \n    left join trx\n        on trx.business = ct.name\n    \n    --left join rr\n    --    on rr.business = ct.name\n    \n    left join (\n        select \n            r.business,\n            sum(r.totalrewardsredeemed) as totalRewardsRedeemed2\n        from \"transformations\".\"report_members_rewards\" r\n        group by 1\n        ) rr2\n    on rr2.business = ct.name\n    \n    group by 1,2,4,rr2.totalRewardsRedeemed2--,5,6\n    ) tmp",
  "ai_generated_sql": "WITH customer_ltv AS (\n  SELECT\n    customer_id,\n    SUM(net_sales) AS ltv\n  FROM\n    transactionrecords\n  WHERE\n    business = 'starwise'\n    AND (\n      isdeleted != TRUE\n      OR isdeleted IS NULL\n    )\n    AND type IN ('Sale', 'Return')\n  GROUP BY\n    customer_id\n), june_customer_stats AS (\n  SELECT\n    customer_id,\n    SUM(net_sales) AS june_sales,\n    COUNT(id) AS june_transactions\n  FROM\n    transactionrecords\n  WHERE\n    business = 'starwise'\n    AND (\n      isdeleted != TRUE\n      OR isdeleted IS NULL\n    )\n    AND type IN ('Sale', 'Return')\n    AND createdtime >= '2025-06-01 00:00:00'\n    AND createdtime < '2025-07-01 00:00:00'\n  GROUP BY\n    customer_id\n)\nSELECT\n  CASE\n    WHEN c.loyalty_id IS NOT NULL THEN 'Loyalty Member'\n    ELSE 'Non-Member'\n  END AS customer_type,\n  SUM(jcs.june_sales) AS total_sales,\n  SUM(jcs.june_transactions) AS transaction_count,\n  SUM(jcs.june_sales) / SUM(jcs.june_transactions) AS aov,\n  AVG(cl.ltv) AS average_ltv\nFROM\n  june_customer_stats AS jcs\n  JOIN customers AS c ON jcs.customer_id = c.id\n  JOIN customer_ltv AS cl ON jcs.customer_id = cl.customer_id\nWHERE\n  c.business = 'starwise'\n  AND (\n    c.isdeleted != TRUE\n    OR c.isdeleted IS NULL\n  )\nGROUP BY\n  customer_type\nORDER BY\n  customer_type;",
  "framework_context_length": 2383,
  "framework_files_loaded": [
    "semantic_context",
    "data_catalog",
    "business_rules",
    "query_patterns",
    "value_mappings",
    "query_cookbook"
  ],
  "api_result": {
    "success": true,
    "status_code": 202,
    "data": {
      "database_id": 2,
      "started_at": "2025-07-30T16:31:01.302149Z",
      "via": [
        {
          "status": "failed",
          "class": "class clojure.lang.ExceptionInfo",
          "error": "Error executing query: ERROR: relation \"transactionrecords\" does not exist",
          "stacktrace": [
            "--> driver.sql_jdbc.execute$execute_reducible_query$fn__79031$fn__79032.invoke(execute.clj:701)",
            "driver.sql_jdbc.execute$execute_reducible_query$fn__79031.invoke(execute.clj:698)",
            "driver.redshift$fn__119979$fn__119981.invoke(redshift.clj:138)",
            "driver.sql_jdbc.execute$do_with_resolved_connection.invokeStatic(execute.clj:334)",
            "driver.sql_jdbc.execute$do_with_resolved_connection.invoke(execute.clj:317)",
            "driver.redshift$fn__119979.invokeStatic(redshift.clj:123)",
            "driver.redshift$fn__119979.invoke(redshift.clj:121)",
            "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:692)",
            "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
            "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:689)",
            "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
            "driver.sql_jdbc$fn__106344.invokeStatic(sql_jdbc.clj:78)",
            "driver.sql_jdbc$fn__106344.invoke(sql_jdbc.clj:76)",
            "query_processor.context$executef.invokeStatic(context.clj:60)",
            "query_processor.context$executef.invoke(context.clj:49)",
            "query_processor.context.default$default_runf.invokeStatic(default.clj:44)",
            "query_processor.context.default$default_runf.invoke(default.clj:42)",
            "query_processor.context$runf.invokeStatic(context.clj:46)",
            "query_processor.context$runf.invoke(context.clj:40)",
            "query_processor.reducible$identity_qp.invokeStatic(reducible.clj:39)",
            "query_processor.reducible$identity_qp.invoke(reducible.clj:36)",
            "query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___71961.invoke(cache.clj:229)",
            "query_processor.middleware.permissions$check_query_permissions$fn__66347.invoke(permissions.clj:140)",
            "query_processor.middleware.enterprise$check_download_permissions_middleware$fn__71782.invoke(enterprise.clj:51)",
            "query_processor.middleware.enterprise$maybe_apply_column_level_perms_check_middleware$fn__71792.invoke(enterprise.clj:64)",
            "query_processor.middleware.mbql_to_native$mbql__GT_native$fn__71224.invoke(mbql_to_native.clj:24)",
            "query_processor$fn__73106$combined_post_process__73111$combined_post_process_STAR___73112.invoke(query_processor.clj:262)",
            "query_processor$fn__73106$combined_pre_process__73107$combined_pre_process_STAR___73108.invoke(query_processor.clj:259)",
            "query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__66444.invoke(fetch_source_query.clj:303)",
            "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872$fn__71876.invoke(resolve_database_and_driver.clj:77)",
            "driver$do_with_driver.invokeStatic(driver.clj:97)",
            "driver$do_with_driver.invoke(driver.clj:92)",
            "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872.invoke(resolve_database_and_driver.clj:76)",
            "query_processor.middleware.store$initialize_store$fn__67050$fn__67051.invoke(store.clj:14)",
            "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:169)",
            "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
            "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:158)",
            "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
            "query_processor.middleware.store$initialize_store$fn__67050.invoke(store.clj:13)",
            "query_processor.middleware.resolve_database_and_driver$resolve_database$fn__71869.invoke(resolve_database_and_driver.clj:60)",
            "query_processor.middleware.normalize_query$normalize$fn__72174.invoke(normalize_query.clj:38)",
            "query_processor.middleware.enterprise$fn__71809$handle_audit_app_internal_queries__71810$fn__71812.invoke(enterprise.clj:96)",
            "query_processor.middleware.enterprise$handle_audit_app_internal_queries_middleware$fn__71820.invoke(enterprise.clj:103)",
            "query_processor.middleware.constraints$mark_needs_default_userland_constraints$fn__70935.invoke(constraints.clj:104)",
            "query_processor.middleware.process_userland_query$process_userland_query$fn__72105.invoke(process_userland_query.clj:156)",
            "query_processor.middleware.catch_exceptions$catch_exceptions$fn__72706.invoke(catch_exceptions.clj:171)",
            "query_processor.reducible$async_qp$qp_STAR___62605$thunk__62607.invoke(reducible.clj:126)",
            "query_processor.reducible$async_qp$qp_STAR___62605.invoke(reducible.clj:132)",
            "query_processor.reducible$sync_qp$qp_STAR___62617.doInvoke(reducible.clj:153)",
            "query_processor$process_userland_query.invokeStatic(query_processor.clj:402)",
            "query_processor$process_userland_query.doInvoke(query_processor.clj:398)",
            "query_processor$process_query_and_save_execution_BANG_.invokeStatic(query_processor.clj:416)",
            "query_processor$process_query_and_save_execution_BANG_.invoke(query_processor.clj:406)",
            "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invokeStatic(query_processor.clj:431)",
            "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invoke(query_processor.clj:421)",
            "api.dataset$run_query_async$fn__93567.invoke(dataset.clj:79)",
            "query_processor.streaming$streaming_response_STAR_$fn__53135$fn__53137.invoke(streaming.clj:168)",
            "query_processor.streaming$streaming_response_STAR_$fn__53135.invoke(streaming.clj:167)",
            "async.streaming_response$do_f_STAR_.invokeStatic(streaming_response.clj:69)",
            "async.streaming_response$do_f_STAR_.invoke(streaming_response.clj:67)",
            "async.streaming_response$do_f_async$task__43750.invoke(streaming_response.clj:88)"
          ],
          "error_type": "invalid-query",
          "ex-data": {
            "driver": "redshift",
            "sql": [
              "-- /* partner: \"metabase\", {\"dashboard_id\":null,\"chart_id\":null,\"optional_user_id\":477,\"optional_account_id\":\"0a0eeb39-1c3d-4f8f-a7cc-96bace83599a\",\"filter_values\":{}} */ Metabase:: userID: 477 queryType: native queryHash: 5e68425d88095c55a7adf94fd717e912d7b2b452e3ab31fc656266df6a318fe1",
              "WITH customer_ltv AS (",
              "  SELECT",
              "    customer_id,",
              "    SUM(net_sales) AS ltv",
              "  FROM",
              "    transactionrecords",
              "  WHERE",
              "    business = 'starwise'",
              "    AND (",
              "      isdeleted != TRUE",
              "      OR isdeleted IS NULL",
              "    )",
              "    AND type IN ('Sale', 'Return')",
              "  GROUP BY",
              "    customer_id",
              "),",
              "june_customer_stats AS (",
              "  SELECT",
              "    customer_id,",
              "    SUM(net_sales) AS june_sales,",
              "    COUNT(id) AS june_transactions",
              "  FROM",
              "    transactionrecords",
              "  WHERE",
              "    business = 'starwise'",
              "    AND (",
              "      isdeleted != TRUE",
              "      OR isdeleted IS NULL",
              "    )",
              "    AND type IN ('Sale', 'Return')",
              "    AND createdtime >= '2025-06-01 00:00:00'",
              "    AND createdtime < '2025-07-01 00:00:00'",
              "  GROUP BY",
              "    customer_id",
              ")",
              "SELECT",
              "  CASE",
              "  WHEN c.loyalty_id IS NOT NULL THEN 'Loyalty Member'",
              "  ELSE 'Non-Member' END AS customer_type,",
              "  SUM(jcs.june_sales) AS total_sales,",
              "  SUM(jcs.june_transactions) AS transaction_count,",
              "  SUM(jcs.june_sales) / SUM(jcs.june_transactions) AS aov,",
              "  AVG(cl.ltv) AS average_ltv",
              "FROM",
              "  june_customer_stats AS jcs",
              "  JOIN customers AS c ON jcs.customer_id = c.id",
              "  JOIN customer_ltv AS cl ON jcs.customer_id = cl.customer_id",
              "WHERE",
              "  c.business = 'starwise'",
              "  AND (",
              "    c.isdeleted != TRUE",
              "    OR c.isdeleted IS NULL",
              "  )",
              "GROUP BY",
              "  customer_type",
              "ORDER BY",
              "  customer_type;"
            ],
            "params": null,
            "type": "invalid-query"
          }
        }
      ],
      "action_id": null,
      "state": "42P01",
      "error_type": "invalid-query",
      "json_query": {
        "database": 2,
        "type": "native",
        "native": {
          "query": "WITH customer_ltv AS (\n  SELECT\n    customer_id,\n    SUM(net_sales) AS ltv\n  FROM\n    transactionrecords\n  WHERE\n    business = 'starwise'\n    AND (\n      isdeleted != TRUE\n      OR isdeleted IS NULL\n    )\n    AND type IN ('Sale', 'Return')\n  GROUP BY\n    customer_id\n), june_customer_stats AS (\n  SELECT\n    customer_id,\n    SUM(net_sales) AS june_sales,\n    COUNT(id) AS june_transactions\n  FROM\n    transactionrecords\n  WHERE\n    business = 'starwise'\n    AND (\n      isdeleted != TRUE\n      OR isdeleted IS NULL\n    )\n    AND type IN ('Sale', 'Return')\n    AND createdtime >= '2025-06-01 00:00:00'\n    AND createdtime < '2025-07-01 00:00:00'\n  GROUP BY\n    customer_id\n)\nSELECT\n  CASE\n    WHEN c.loyalty_id IS NOT NULL THEN 'Loyalty Member'\n    ELSE 'Non-Member'\n  END AS customer_type,\n  SUM(jcs.june_sales) AS total_sales,\n  SUM(jcs.june_transactions) AS transaction_count,\n  SUM(jcs.june_sales) / SUM(jcs.june_transactions) AS aov,\n  AVG(cl.ltv) AS average_ltv\nFROM\n  june_customer_stats AS jcs\n  JOIN customers AS c ON jcs.customer_id = c.id\n  JOIN customer_ltv AS cl ON jcs.customer_id = cl.customer_id\nWHERE\n  c.business = 'starwise'\n  AND (\n    c.isdeleted != TRUE\n    OR c.isdeleted IS NULL\n  )\nGROUP BY\n  customer_type\nORDER BY\n  customer_type;"
        },
        "middleware": {
          "js-int-to-string?": true,
          "add-default-userland-constraints?": true
        }
      },
      "status": "failed",
      "class": "class com.amazon.redshift.util.RedshiftException",
      "stacktrace": [
        "com.amazon.redshift.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2613)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResultsOnThread(QueryExecutorImpl.java:2281)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1886)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1878)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:375)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeInternal(RedshiftStatementImpl.java:515)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.execute(RedshiftStatementImpl.java:436)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeWithFlags(RedshiftStatementImpl.java:377)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeCachedSql(RedshiftStatementImpl.java:363)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeWithFlags(RedshiftStatementImpl.java:340)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.execute(RedshiftStatementImpl.java:330)",
        "com.mchange.v2.c3p0.impl.NewProxyStatement.execute(NewProxyStatement.java:75)",
        "--> driver.sql_jdbc.execute$fn__78950.invokeStatic(execute.clj:560)",
        "driver.sql_jdbc.execute$fn__78950.invoke(execute.clj:558)",
        "driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invokeStatic(execute.clj:568)",
        "driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invoke(execute.clj:565)",
        "driver.sql_jdbc.execute$execute_reducible_query$fn__79031$fn__79032.invoke(execute.clj:699)",
        "driver.sql_jdbc.execute$execute_reducible_query$fn__79031.invoke(execute.clj:698)",
        "driver.redshift$fn__119979$fn__119981.invoke(redshift.clj:138)",
        "driver.sql_jdbc.execute$do_with_resolved_connection.invokeStatic(execute.clj:334)",
        "driver.sql_jdbc.execute$do_with_resolved_connection.invoke(execute.clj:317)",
        "driver.redshift$fn__119979.invokeStatic(redshift.clj:123)",
        "driver.redshift$fn__119979.invoke(redshift.clj:121)",
        "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:692)",
        "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
        "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:689)",
        "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
        "driver.sql_jdbc$fn__106344.invokeStatic(sql_jdbc.clj:78)",
        "driver.sql_jdbc$fn__106344.invoke(sql_jdbc.clj:76)",
        "query_processor.context$executef.invokeStatic(context.clj:60)",
        "query_processor.context$executef.invoke(context.clj:49)",
        "query_processor.context.default$default_runf.invokeStatic(default.clj:44)",
        "query_processor.context.default$default_runf.invoke(default.clj:42)",
        "query_processor.context$runf.invokeStatic(context.clj:46)",
        "query_processor.context$runf.invoke(context.clj:40)",
        "query_processor.reducible$identity_qp.invokeStatic(reducible.clj:39)",
        "query_processor.reducible$identity_qp.invoke(reducible.clj:36)",
        "query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___71961.invoke(cache.clj:229)",
        "query_processor.middleware.permissions$check_query_permissions$fn__66347.invoke(permissions.clj:140)",
        "query_processor.middleware.enterprise$check_download_permissions_middleware$fn__71782.invoke(enterprise.clj:51)",
        "query_processor.middleware.enterprise$maybe_apply_column_level_perms_check_middleware$fn__71792.invoke(enterprise.clj:64)",
        "query_processor.middleware.mbql_to_native$mbql__GT_native$fn__71224.invoke(mbql_to_native.clj:24)",
        "query_processor$fn__73106$combined_post_process__73111$combined_post_process_STAR___73112.invoke(query_processor.clj:262)",
        "query_processor$fn__73106$combined_pre_process__73107$combined_pre_process_STAR___73108.invoke(query_processor.clj:259)",
        "query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__66444.invoke(fetch_source_query.clj:303)",
        "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872$fn__71876.invoke(resolve_database_and_driver.clj:77)",
        "driver$do_with_driver.invokeStatic(driver.clj:97)",
        "driver$do_with_driver.invoke(driver.clj:92)",
        "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872.invoke(resolve_database_and_driver.clj:76)",
        "query_processor.middleware.store$initialize_store$fn__67050$fn__67051.invoke(store.clj:14)",
        "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:169)",
        "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
        "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:158)",
        "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
        "query_processor.middleware.store$initialize_store$fn__67050.invoke(store.clj:13)",
        "query_processor.middleware.resolve_database_and_driver$resolve_database$fn__71869.invoke(resolve_database_and_driver.clj:60)",
        "query_processor.middleware.normalize_query$normalize$fn__72174.invoke(normalize_query.clj:38)",
        "query_processor.middleware.enterprise$fn__71809$handle_audit_app_internal_queries__71810$fn__71812.invoke(enterprise.clj:96)",
        "query_processor.middleware.enterprise$handle_audit_app_internal_queries_middleware$fn__71820.invoke(enterprise.clj:103)",
        "query_processor.middleware.constraints$mark_needs_default_userland_constraints$fn__70935.invoke(constraints.clj:104)",
        "query_processor.middleware.process_userland_query$process_userland_query$fn__72105.invoke(process_userland_query.clj:156)",
        "query_processor.middleware.catch_exceptions$catch_exceptions$fn__72706.invoke(catch_exceptions.clj:171)",
        "query_processor.reducible$async_qp$qp_STAR___62605$thunk__62607.invoke(reducible.clj:126)",
        "query_processor.reducible$async_qp$qp_STAR___62605.invoke(reducible.clj:132)",
        "query_processor.reducible$sync_qp$qp_STAR___62617.doInvoke(reducible.clj:153)",
        "query_processor$process_userland_query.invokeStatic(query_processor.clj:402)",
        "query_processor$process_userland_query.doInvoke(query_processor.clj:398)",
        "query_processor$process_query_and_save_execution_BANG_.invokeStatic(query_processor.clj:416)",
        "query_processor$process_query_and_save_execution_BANG_.invoke(query_processor.clj:406)",
        "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invokeStatic(query_processor.clj:431)",
        "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invoke(query_processor.clj:421)",
        "api.dataset$run_query_async$fn__93567.invoke(dataset.clj:79)",
        "query_processor.streaming$streaming_response_STAR_$fn__53135$fn__53137.invoke(streaming.clj:168)",
        "query_processor.streaming$streaming_response_STAR_$fn__53135.invoke(streaming.clj:167)",
        "async.streaming_response$do_f_STAR_.invokeStatic(streaming_response.clj:69)",
        "async.streaming_response$do_f_STAR_.invoke(streaming_response.clj:67)",
        "async.streaming_response$do_f_async$task__43750.invoke(streaming_response.clj:88)"
      ],
      "card_id": null,
      "context": "ad-hoc",
      "error": "ERROR: relation \"transactionrecords\" does not exist",
      "row_count": 0,
      "running_time": 0,
      "data": {
        "rows": [],
        "cols": []
      }
    },
    "row_count": 0,
    "query": "WITH customer_ltv AS (\n  SELECT\n    customer_id,\n    SUM(net_sales) AS ltv\n  FROM\n    transactionrecords\n  WHERE\n    business = 'starwise'\n    AND (\n      isdeleted != TRUE\n      OR isdeleted IS NULL\n    )\n    AND type IN ('Sale', 'Return')\n  GROUP BY\n    customer_id\n), june_customer_stats AS (\n  SELECT\n    customer_id,\n    SUM(net_sales) AS june_sales,\n    COUNT(id) AS june_transactions\n  FROM\n    transactionrecords\n  WHERE\n    business = 'starwise'\n    AND (\n      isdeleted != TRUE\n      OR isdeleted IS NULL\n    )\n    AND type IN ('Sale', 'Return')\n    AND createdtime >= '2025-06-01 00:00:00'\n    AND createdtime < '2025-07-01 00:00:00'\n  GROUP BY\n    customer_id\n)\nSELECT\n  CASE\n    WHEN c.loyalty_id IS NOT NULL THEN 'Loyalty Member'\n    ELSE 'Non-Member'\n  END AS customer_type,\n  SUM(jcs.june_sales) AS total_sales,\n  SUM(jcs.june_transactions) AS transaction_count,\n  SUM(jcs.june_sales) / SUM(jcs.june_transactions) AS aov,\n  AVG(cl.ltv) AS average_ltv\nFROM\n  june_customer_stats AS jcs\n  JOIN customers AS c ON jcs.customer_id = c.id\n  JOIN customer_ltv AS cl ON jcs.customer_id = cl.customer_id\nWHERE\n  c.business = 'starwise'\n  AND (\n    c.isdeleted != TRUE\n    OR c.isdeleted IS NULL\n  )\nGROUP BY\n  customer_type\nORDER BY\n  customer_type;"
  }
}