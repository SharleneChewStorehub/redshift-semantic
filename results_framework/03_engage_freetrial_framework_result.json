{
  "file_name": "03_engage_freetrial.sql",
  "timestamp": "/Users/sharlenechew/redshift-semantic",
  "business_question": "I need to see an activity funnel for all Malaysian merchants who started an Engage trial this year. For each merchant, show their new customer acquisition momentum in the two weeks leading up to the trial start, and on how many days they sent automated SMS campaigns during the first 30 days of their trial.",
  "golden_sql": "select distinct\n    b.name,\n    b._id,\n    b.country,\n    b.subscriptionstatus,\n    dateadd(hour,8,b.campaigntrialstartdate) as engage_trial_start_date,\n    count(distinct case when c.createdtime > dateadd(day,-14,b.campaigntrialstartdate) and c.createdtime <= dateadd(day,-7,b.campaigntrialstartdate) then c.\"_id\" end) as p14d_newcust,\n    count(distinct case when c.createdtime > dateadd(day,-7,b.campaigntrialstartdate) and c.createdtime <= b.campaigntrialstartdate then c.\"_id\" end) as p7d_newcust,\n    count(distinct case when sms.\"day\" > engage_trial_start_date and sms.\"day\" <= dateadd(day,30,engage_trial_start_date) then sms.\"day\" end) as auto_sms_sent_days_within_trial\n    /*case \n        when p14d_newcust >= 10 and p17d_newcust >= 10 then 1\n        else 0\n    end as product_qualified_lead*/\n    \nfrom storehub_mongo.businesses b\n\nleft join transformations.mask_customers c\n    on b.name = c.business\n    \nleft join (\n    select distinct\n    cj.business,\n    cast(dateadd(hour,8,cj.createdtime) as date) as \"day\"\n    --count(distinct case when cj.globalcampaigninformationid <> '64d4d6b30f005152c96d10cb' then cj._id end) as automated_sms_sent\n    \n    from storehub_mongo.campaignjobs cj\n    \n    where cj.createdtime >= '2022-09-23'\n        and cj.pushstatus = 'SUCCESS'\n        \n    --group by 1,2\n    ) sms\n    on sms.business = b.name\n\nwhere CHARINDEX('internal', b.planid) = 0 \n    and CHARINDEX('@storehub.com', b.email) = 0\n    and b.campaigntrialstartdate is not null\n    and b.country in ('MY')\n    and c.createdtime >= '2022-12-14' -- 2 weeks before the earliest recorded Engage trial start date\n    and b.campaigntrialstartdate >= '2025-01-01'\n    \ngroup by 1,2,3,4,5\norder by 5 ASC",
  "ai_generated_sql": "WITH engage_trial_merchants AS (\n  SELECT\n    b.id AS business_id,\n    b.name AS merchant_name,\n    s.trial_starts_at\n  FROM\n    businesses AS b\n    JOIN subscriptions AS s\n      ON b.id = s.business_id\n  WHERE\n    b.country_code = 'MY'\n    AND s.product_name = 'Engage'\n    AND s.trial_starts_at >= DATE_TRUNC('year', CURRENT_DATE)\n    AND (\n      b.isdeleted != TRUE OR b.isdeleted IS NULL\n    )\n    AND (\n      s.isdeleted != TRUE OR s.isdeleted IS NULL\n    )\n), customer_first_transaction AS (\n  SELECT\n    business_id,\n    customer_id,\n    MIN(createdtime) AS first_transaction_time\n  FROM\n    transactionrecords\n  WHERE\n    type = 'Sale'\n    AND (\n      isdeleted != TRUE OR isdeleted IS NULL\n    )\n  GROUP BY\n    1,\n    2\n), pre_trial_acquisition AS (\n  SELECT\n    etm.business_id,\n    COUNT(cft.customer_id) AS new_customer_count\n  FROM\n    engage_trial_merchants AS etm\n    LEFT JOIN customer_first_transaction AS cft\n      ON etm.business_id = cft.business_id\n      AND cft.first_transaction_time >= etm.trial_starts_at - INTERVAL '14 days'\n      AND cft.first_transaction_time < etm.trial_starts_at\n  GROUP BY\n    1\n), post_trial_sms AS (\n  SELECT\n    etm.business_id,\n    COUNT(DISTINCT DATE(cs.sent_at)) AS active_sms_days\n  FROM\n    engage_trial_merchants AS etm\n    LEFT JOIN campaign_sends AS cs\n      ON etm.business_id = cs.business_id\n      AND cs.channel = 'sms'\n      AND cs.automation_id IS NOT NULL\n      AND cs.sent_at >= etm.trial_starts_at\n      AND cs.sent_at < etm.trial_starts_at + INTERVAL '30 days'\n      AND (\n        cs.isdeleted != TRUE OR cs.isdeleted IS NULL\n      )\n  GROUP BY\n    1\n)\nSELECT\n  etm.merchant_name,\n  COALESCE(pta.new_customer_count, 0) AS new_customers_14d_pre_trial,\n  COALESCE(pts.active_sms_days, 0) AS automated_sms_days_30d_post_trial\nFROM\n  engage_trial_merchants AS etm\n  LEFT JOIN pre_trial_acquisition AS pta\n    ON etm.business_id = pta.business_id\n  LEFT JOIN post_trial_sms AS pts\n    ON etm.business_id = pts.business_id\nORDER BY\n  etm.trial_starts_at DESC;",
  "framework_context_length": 2383,
  "framework_files_loaded": [
    "semantic_context",
    "data_catalog",
    "business_rules",
    "query_patterns",
    "value_mappings",
    "query_cookbook"
  ],
  "api_result": {
    "success": true,
    "status_code": 202,
    "data": {
      "database_id": 2,
      "started_at": "2025-07-30T16:32:45.339303Z",
      "via": [
        {
          "status": "failed",
          "class": "class clojure.lang.ExceptionInfo",
          "error": "Error executing query: ERROR: relation \"businesses\" does not exist",
          "stacktrace": [
            "--> driver.sql_jdbc.execute$execute_reducible_query$fn__79031$fn__79032.invoke(execute.clj:701)",
            "driver.sql_jdbc.execute$execute_reducible_query$fn__79031.invoke(execute.clj:698)",
            "driver.redshift$fn__119979$fn__119981.invoke(redshift.clj:138)",
            "driver.sql_jdbc.execute$do_with_resolved_connection.invokeStatic(execute.clj:334)",
            "driver.sql_jdbc.execute$do_with_resolved_connection.invoke(execute.clj:317)",
            "driver.redshift$fn__119979.invokeStatic(redshift.clj:123)",
            "driver.redshift$fn__119979.invoke(redshift.clj:121)",
            "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:692)",
            "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
            "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:689)",
            "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
            "driver.sql_jdbc$fn__106344.invokeStatic(sql_jdbc.clj:78)",
            "driver.sql_jdbc$fn__106344.invoke(sql_jdbc.clj:76)",
            "query_processor.context$executef.invokeStatic(context.clj:60)",
            "query_processor.context$executef.invoke(context.clj:49)",
            "query_processor.context.default$default_runf.invokeStatic(default.clj:44)",
            "query_processor.context.default$default_runf.invoke(default.clj:42)",
            "query_processor.context$runf.invokeStatic(context.clj:46)",
            "query_processor.context$runf.invoke(context.clj:40)",
            "query_processor.reducible$identity_qp.invokeStatic(reducible.clj:39)",
            "query_processor.reducible$identity_qp.invoke(reducible.clj:36)",
            "query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___71961.invoke(cache.clj:229)",
            "query_processor.middleware.permissions$check_query_permissions$fn__66347.invoke(permissions.clj:140)",
            "query_processor.middleware.enterprise$check_download_permissions_middleware$fn__71782.invoke(enterprise.clj:51)",
            "query_processor.middleware.enterprise$maybe_apply_column_level_perms_check_middleware$fn__71792.invoke(enterprise.clj:64)",
            "query_processor.middleware.mbql_to_native$mbql__GT_native$fn__71224.invoke(mbql_to_native.clj:24)",
            "query_processor$fn__73106$combined_post_process__73111$combined_post_process_STAR___73112.invoke(query_processor.clj:262)",
            "query_processor$fn__73106$combined_pre_process__73107$combined_pre_process_STAR___73108.invoke(query_processor.clj:259)",
            "query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__66444.invoke(fetch_source_query.clj:303)",
            "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872$fn__71876.invoke(resolve_database_and_driver.clj:77)",
            "driver$do_with_driver.invokeStatic(driver.clj:97)",
            "driver$do_with_driver.invoke(driver.clj:92)",
            "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872.invoke(resolve_database_and_driver.clj:76)",
            "query_processor.middleware.store$initialize_store$fn__67050$fn__67051.invoke(store.clj:14)",
            "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:169)",
            "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
            "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:158)",
            "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
            "query_processor.middleware.store$initialize_store$fn__67050.invoke(store.clj:13)",
            "query_processor.middleware.resolve_database_and_driver$resolve_database$fn__71869.invoke(resolve_database_and_driver.clj:60)",
            "query_processor.middleware.normalize_query$normalize$fn__72174.invoke(normalize_query.clj:38)",
            "query_processor.middleware.enterprise$fn__71809$handle_audit_app_internal_queries__71810$fn__71812.invoke(enterprise.clj:96)",
            "query_processor.middleware.enterprise$handle_audit_app_internal_queries_middleware$fn__71820.invoke(enterprise.clj:103)",
            "query_processor.middleware.constraints$mark_needs_default_userland_constraints$fn__70935.invoke(constraints.clj:104)",
            "query_processor.middleware.process_userland_query$process_userland_query$fn__72105.invoke(process_userland_query.clj:156)",
            "query_processor.middleware.catch_exceptions$catch_exceptions$fn__72706.invoke(catch_exceptions.clj:171)",
            "query_processor.reducible$async_qp$qp_STAR___62605$thunk__62607.invoke(reducible.clj:126)",
            "query_processor.reducible$async_qp$qp_STAR___62605.invoke(reducible.clj:132)",
            "query_processor.reducible$sync_qp$qp_STAR___62617.doInvoke(reducible.clj:153)",
            "query_processor$process_userland_query.invokeStatic(query_processor.clj:402)",
            "query_processor$process_userland_query.doInvoke(query_processor.clj:398)",
            "query_processor$process_query_and_save_execution_BANG_.invokeStatic(query_processor.clj:416)",
            "query_processor$process_query_and_save_execution_BANG_.invoke(query_processor.clj:406)",
            "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invokeStatic(query_processor.clj:431)",
            "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invoke(query_processor.clj:421)",
            "api.dataset$run_query_async$fn__93567.invoke(dataset.clj:79)",
            "query_processor.streaming$streaming_response_STAR_$fn__53135$fn__53137.invoke(streaming.clj:168)",
            "query_processor.streaming$streaming_response_STAR_$fn__53135.invoke(streaming.clj:167)",
            "async.streaming_response$do_f_STAR_.invokeStatic(streaming_response.clj:69)",
            "async.streaming_response$do_f_STAR_.invoke(streaming_response.clj:67)",
            "async.streaming_response$do_f_async$task__43750.invoke(streaming_response.clj:88)"
          ],
          "error_type": "invalid-query",
          "ex-data": {
            "driver": "redshift",
            "sql": [
              "-- /* partner: \"metabase\", {\"dashboard_id\":null,\"chart_id\":null,\"optional_user_id\":477,\"optional_account_id\":\"0a0eeb39-1c3d-4f8f-a7cc-96bace83599a\",\"filter_values\":{}} */ Metabase:: userID: 477 queryType: native queryHash: 969b1ed4e83a0e0246ed935b391450bd2cfc70de84b4245d7ea6e6a8ed1fa7b6",
              "WITH engage_trial_merchants AS (",
              "  SELECT",
              "    b.id AS business_id,",
              "    b.name AS merchant_name,",
              "    s.trial_starts_at",
              "  FROM",
              "    businesses AS b",
              "    JOIN subscriptions AS s ON b.id = s.business_id",
              "  WHERE",
              "    b.country_code = 'MY'",
              "    AND s.product_name = 'Engage'",
              "    AND s.trial_starts_at >= DATE_TRUNC('year', CURRENT_DATE)",
              "    AND (",
              "      b.isdeleted != TRUE",
              "      OR b.isdeleted IS NULL",
              "    )",
              "    AND (",
              "      s.isdeleted != TRUE",
              "      OR s.isdeleted IS NULL",
              "    )",
              "),",
              "customer_first_transaction AS (",
              "  SELECT",
              "    business_id,",
              "    customer_id,",
              "    MIN(createdtime) AS first_transaction_time",
              "  FROM",
              "    transactionrecords",
              "  WHERE",
              "    type = 'Sale'",
              "    AND (",
              "      isdeleted != TRUE",
              "      OR isdeleted IS NULL",
              "    )",
              "  GROUP BY",
              "    1,",
              "    2",
              "),",
              "pre_trial_acquisition AS (",
              "  SELECT",
              "    etm.business_id,",
              "    COUNT(cft.customer_id) AS new_customer_count",
              "  FROM",
              "    engage_trial_merchants AS etm",
              "    LEFT JOIN customer_first_transaction AS cft ON etm.business_id = cft.business_id",
              "    AND cft.first_transaction_time >= etm.trial_starts_at - INTERVAL '14 days'",
              "    AND cft.first_transaction_time < etm.trial_starts_at",
              "  GROUP BY",
              "    1",
              "),",
              "post_trial_sms AS (",
              "  SELECT",
              "    etm.business_id,",
              "    COUNT(DISTINCT DATE(cs.sent_at)) AS active_sms_days",
              "  FROM",
              "    engage_trial_merchants AS etm",
              "    LEFT JOIN campaign_sends AS cs ON etm.business_id = cs.business_id",
              "    AND cs.channel = 'sms'",
              "    AND cs.automation_id IS NOT NULL",
              "    AND cs.sent_at >= etm.trial_starts_at",
              "    AND cs.sent_at < etm.trial_starts_at + INTERVAL '30 days'",
              "    AND (",
              "      cs.isdeleted != TRUE",
              "      OR cs.isdeleted IS NULL",
              "    )",
              "  GROUP BY",
              "    1",
              ")",
              "SELECT",
              "  etm.merchant_name,",
              "  COALESCE(pta.new_customer_count, 0) AS new_customers_14d_pre_trial,",
              "  COALESCE(pts.active_sms_days, 0) AS automated_sms_days_30d_post_trial",
              "FROM",
              "  engage_trial_merchants AS etm",
              "  LEFT JOIN pre_trial_acquisition AS pta ON etm.business_id = pta.business_id",
              "  LEFT JOIN post_trial_sms AS pts ON etm.business_id = pts.business_id",
              "ORDER BY",
              "  etm.trial_starts_at DESC;"
            ],
            "params": null,
            "type": "invalid-query"
          }
        }
      ],
      "action_id": null,
      "state": "42P01",
      "error_type": "invalid-query",
      "json_query": {
        "database": 2,
        "type": "native",
        "native": {
          "query": "WITH engage_trial_merchants AS (\n  SELECT\n    b.id AS business_id,\n    b.name AS merchant_name,\n    s.trial_starts_at\n  FROM\n    businesses AS b\n    JOIN subscriptions AS s\n      ON b.id = s.business_id\n  WHERE\n    b.country_code = 'MY'\n    AND s.product_name = 'Engage'\n    AND s.trial_starts_at >= DATE_TRUNC('year', CURRENT_DATE)\n    AND (\n      b.isdeleted != TRUE OR b.isdeleted IS NULL\n    )\n    AND (\n      s.isdeleted != TRUE OR s.isdeleted IS NULL\n    )\n), customer_first_transaction AS (\n  SELECT\n    business_id,\n    customer_id,\n    MIN(createdtime) AS first_transaction_time\n  FROM\n    transactionrecords\n  WHERE\n    type = 'Sale'\n    AND (\n      isdeleted != TRUE OR isdeleted IS NULL\n    )\n  GROUP BY\n    1,\n    2\n), pre_trial_acquisition AS (\n  SELECT\n    etm.business_id,\n    COUNT(cft.customer_id) AS new_customer_count\n  FROM\n    engage_trial_merchants AS etm\n    LEFT JOIN customer_first_transaction AS cft\n      ON etm.business_id = cft.business_id\n      AND cft.first_transaction_time >= etm.trial_starts_at - INTERVAL '14 days'\n      AND cft.first_transaction_time < etm.trial_starts_at\n  GROUP BY\n    1\n), post_trial_sms AS (\n  SELECT\n    etm.business_id,\n    COUNT(DISTINCT DATE(cs.sent_at)) AS active_sms_days\n  FROM\n    engage_trial_merchants AS etm\n    LEFT JOIN campaign_sends AS cs\n      ON etm.business_id = cs.business_id\n      AND cs.channel = 'sms'\n      AND cs.automation_id IS NOT NULL\n      AND cs.sent_at >= etm.trial_starts_at\n      AND cs.sent_at < etm.trial_starts_at + INTERVAL '30 days'\n      AND (\n        cs.isdeleted != TRUE OR cs.isdeleted IS NULL\n      )\n  GROUP BY\n    1\n)\nSELECT\n  etm.merchant_name,\n  COALESCE(pta.new_customer_count, 0) AS new_customers_14d_pre_trial,\n  COALESCE(pts.active_sms_days, 0) AS automated_sms_days_30d_post_trial\nFROM\n  engage_trial_merchants AS etm\n  LEFT JOIN pre_trial_acquisition AS pta\n    ON etm.business_id = pta.business_id\n  LEFT JOIN post_trial_sms AS pts\n    ON etm.business_id = pts.business_id\nORDER BY\n  etm.trial_starts_at DESC;"
        },
        "middleware": {
          "js-int-to-string?": true,
          "add-default-userland-constraints?": true
        }
      },
      "status": "failed",
      "class": "class com.amazon.redshift.util.RedshiftException",
      "stacktrace": [
        "com.amazon.redshift.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2613)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResultsOnThread(QueryExecutorImpl.java:2281)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1886)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1878)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:375)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeInternal(RedshiftStatementImpl.java:515)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.execute(RedshiftStatementImpl.java:436)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeWithFlags(RedshiftStatementImpl.java:377)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeCachedSql(RedshiftStatementImpl.java:363)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeWithFlags(RedshiftStatementImpl.java:340)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.execute(RedshiftStatementImpl.java:330)",
        "com.mchange.v2.c3p0.impl.NewProxyStatement.execute(NewProxyStatement.java:75)",
        "--> driver.sql_jdbc.execute$fn__78950.invokeStatic(execute.clj:560)",
        "driver.sql_jdbc.execute$fn__78950.invoke(execute.clj:558)",
        "driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invokeStatic(execute.clj:568)",
        "driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invoke(execute.clj:565)",
        "driver.sql_jdbc.execute$execute_reducible_query$fn__79031$fn__79032.invoke(execute.clj:699)",
        "driver.sql_jdbc.execute$execute_reducible_query$fn__79031.invoke(execute.clj:698)",
        "driver.redshift$fn__119979$fn__119981.invoke(redshift.clj:138)",
        "driver.sql_jdbc.execute$do_with_resolved_connection.invokeStatic(execute.clj:334)",
        "driver.sql_jdbc.execute$do_with_resolved_connection.invoke(execute.clj:317)",
        "driver.redshift$fn__119979.invokeStatic(redshift.clj:123)",
        "driver.redshift$fn__119979.invoke(redshift.clj:121)",
        "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:692)",
        "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
        "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:689)",
        "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
        "driver.sql_jdbc$fn__106344.invokeStatic(sql_jdbc.clj:78)",
        "driver.sql_jdbc$fn__106344.invoke(sql_jdbc.clj:76)",
        "query_processor.context$executef.invokeStatic(context.clj:60)",
        "query_processor.context$executef.invoke(context.clj:49)",
        "query_processor.context.default$default_runf.invokeStatic(default.clj:44)",
        "query_processor.context.default$default_runf.invoke(default.clj:42)",
        "query_processor.context$runf.invokeStatic(context.clj:46)",
        "query_processor.context$runf.invoke(context.clj:40)",
        "query_processor.reducible$identity_qp.invokeStatic(reducible.clj:39)",
        "query_processor.reducible$identity_qp.invoke(reducible.clj:36)",
        "query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___71961.invoke(cache.clj:229)",
        "query_processor.middleware.permissions$check_query_permissions$fn__66347.invoke(permissions.clj:140)",
        "query_processor.middleware.enterprise$check_download_permissions_middleware$fn__71782.invoke(enterprise.clj:51)",
        "query_processor.middleware.enterprise$maybe_apply_column_level_perms_check_middleware$fn__71792.invoke(enterprise.clj:64)",
        "query_processor.middleware.mbql_to_native$mbql__GT_native$fn__71224.invoke(mbql_to_native.clj:24)",
        "query_processor$fn__73106$combined_post_process__73111$combined_post_process_STAR___73112.invoke(query_processor.clj:262)",
        "query_processor$fn__73106$combined_pre_process__73107$combined_pre_process_STAR___73108.invoke(query_processor.clj:259)",
        "query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__66444.invoke(fetch_source_query.clj:303)",
        "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872$fn__71876.invoke(resolve_database_and_driver.clj:77)",
        "driver$do_with_driver.invokeStatic(driver.clj:97)",
        "driver$do_with_driver.invoke(driver.clj:92)",
        "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872.invoke(resolve_database_and_driver.clj:76)",
        "query_processor.middleware.store$initialize_store$fn__67050$fn__67051.invoke(store.clj:14)",
        "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:169)",
        "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
        "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:158)",
        "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
        "query_processor.middleware.store$initialize_store$fn__67050.invoke(store.clj:13)",
        "query_processor.middleware.resolve_database_and_driver$resolve_database$fn__71869.invoke(resolve_database_and_driver.clj:60)",
        "query_processor.middleware.normalize_query$normalize$fn__72174.invoke(normalize_query.clj:38)",
        "query_processor.middleware.enterprise$fn__71809$handle_audit_app_internal_queries__71810$fn__71812.invoke(enterprise.clj:96)",
        "query_processor.middleware.enterprise$handle_audit_app_internal_queries_middleware$fn__71820.invoke(enterprise.clj:103)",
        "query_processor.middleware.constraints$mark_needs_default_userland_constraints$fn__70935.invoke(constraints.clj:104)",
        "query_processor.middleware.process_userland_query$process_userland_query$fn__72105.invoke(process_userland_query.clj:156)",
        "query_processor.middleware.catch_exceptions$catch_exceptions$fn__72706.invoke(catch_exceptions.clj:171)",
        "query_processor.reducible$async_qp$qp_STAR___62605$thunk__62607.invoke(reducible.clj:126)",
        "query_processor.reducible$async_qp$qp_STAR___62605.invoke(reducible.clj:132)",
        "query_processor.reducible$sync_qp$qp_STAR___62617.doInvoke(reducible.clj:153)",
        "query_processor$process_userland_query.invokeStatic(query_processor.clj:402)",
        "query_processor$process_userland_query.doInvoke(query_processor.clj:398)",
        "query_processor$process_query_and_save_execution_BANG_.invokeStatic(query_processor.clj:416)",
        "query_processor$process_query_and_save_execution_BANG_.invoke(query_processor.clj:406)",
        "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invokeStatic(query_processor.clj:431)",
        "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invoke(query_processor.clj:421)",
        "api.dataset$run_query_async$fn__93567.invoke(dataset.clj:79)",
        "query_processor.streaming$streaming_response_STAR_$fn__53135$fn__53137.invoke(streaming.clj:168)",
        "query_processor.streaming$streaming_response_STAR_$fn__53135.invoke(streaming.clj:167)",
        "async.streaming_response$do_f_STAR_.invokeStatic(streaming_response.clj:69)",
        "async.streaming_response$do_f_STAR_.invoke(streaming_response.clj:67)",
        "async.streaming_response$do_f_async$task__43750.invoke(streaming_response.clj:88)"
      ],
      "card_id": null,
      "context": "ad-hoc",
      "error": "ERROR: relation \"businesses\" does not exist",
      "row_count": 0,
      "running_time": 0,
      "data": {
        "rows": [],
        "cols": []
      }
    },
    "row_count": 0,
    "query": "WITH engage_trial_merchants AS (\n  SELECT\n    b.id AS business_id,\n    b.name AS merchant_name,\n    s.trial_starts_at\n  FROM\n    businesses AS b\n    JOIN subscriptions AS s\n      ON b.id = s.business_id\n  WHERE\n    b.country_code = 'MY'\n    AND s.product_name = 'Engage'\n    AND s.trial_starts_at >= DATE_TRUNC('year', CURRENT_DATE)\n    AND (\n      b.isdeleted != TRUE OR b.isdeleted IS NULL\n    )\n    AND (\n      s.isdeleted != TRUE OR s.isdeleted IS NULL\n    )\n), customer_first_transaction AS (\n  SELECT\n    business_id,\n    customer_id,\n    MIN(createdtime) AS first_transaction_time\n  FROM\n    transactionrecords\n  WHERE\n    type = 'Sale'\n    AND (\n      isdeleted != TRUE OR isdeleted IS NULL\n    )\n  GROUP BY\n    1,\n    2\n), pre_trial_acquisition AS (\n  SELECT\n    etm.business_id,\n    COUNT(cft.customer_id) AS new_customer_count\n  FROM\n    engage_trial_merchants AS etm\n    LEFT JOIN customer_first_transaction AS cft\n      ON etm.business_id = cft.business_id\n      AND cft.first_transaction_time >= etm.trial_starts_at - INTERVAL '14 days'\n      AND cft.first_transaction_time < etm.trial_starts_at\n  GROUP BY\n    1\n), post_trial_sms AS (\n  SELECT\n    etm.business_id,\n    COUNT(DISTINCT DATE(cs.sent_at)) AS active_sms_days\n  FROM\n    engage_trial_merchants AS etm\n    LEFT JOIN campaign_sends AS cs\n      ON etm.business_id = cs.business_id\n      AND cs.channel = 'sms'\n      AND cs.automation_id IS NOT NULL\n      AND cs.sent_at >= etm.trial_starts_at\n      AND cs.sent_at < etm.trial_starts_at + INTERVAL '30 days'\n      AND (\n        cs.isdeleted != TRUE OR cs.isdeleted IS NULL\n      )\n  GROUP BY\n    1\n)\nSELECT\n  etm.merchant_name,\n  COALESCE(pta.new_customer_count, 0) AS new_customers_14d_pre_trial,\n  COALESCE(pts.active_sms_days, 0) AS automated_sms_days_30d_post_trial\nFROM\n  engage_trial_merchants AS etm\n  LEFT JOIN pre_trial_acquisition AS pta\n    ON etm.business_id = pta.business_id\n  LEFT JOIN post_trial_sms AS pts\n    ON etm.business_id = pts.business_id\nORDER BY\n  etm.trial_starts_at DESC;"
  }
}