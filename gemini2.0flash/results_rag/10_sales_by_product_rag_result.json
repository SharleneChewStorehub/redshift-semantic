{
  "file_name": "10_sales_by_product.sql",
  "business_question": "I need a detailed product profitability report for 'signaturebeefnoodles' for the first half of 2025. Can you show me a monthly breakdown, per store, for each product, including their net sales, gross profit, and gross profit margin?",
  "golden_sql": "-- I need a detailed product profitability report for 'signaturebeefnoodles' for the first half of 2025. Can you show me a monthly breakdown, per store, for each product, including their net sales, gross profit, and gross profit margin?\n\nwith transactions as (\nselect \n    tr._id as transactionid,\n    tr.business,\n    REGEXP_REPLACE (REGEXP_REPLACE (bs.name, '&#39;', ''''), '%7C;', ' - ') as storename,\n    tr.storeid,\n    tr.servicecharge,\n    tr.total,\n    tr.tax,\n    tr.subtotal,\n    tr.cost,\n    tr.discount,\n    CASE WHEN (tr.channel is null or tr.channel = 2) THEN 0 ELSE tr.channel END AS channel,\n    tr.roundedamount,\n    tr.paymentmethod,\n    tr.employeenumber,\n    tr.transactiontype,\n    tr.status,\n    tr.iscancelled,\n    tr.createdtime,\n    tr.modifiedtime,\n    tr.customerid,\n    tr.pax,\n    --e.employee_firstname,\n    --e.employee_lastname,\n    --e.employee_name,\n    --e.employee_email,\n    --c.customer_totaltransactions,\n    --c.customer_firstname,\n    --c.customer_lastname,\n    --c.customer_email,\n    --c.customer_phone,\n    --CASE WHEN tr.transactionid = c.firstpurchase_transactionid THEN c.firstpurchase_date ELSE NULL END AS customer_createdtime,\n    --c.customer_tags,\n    --bs.store_data_modified_time,\n    --c.customer_data_modified_time,\n    --e.employee_data_modified_time,\n    tr.data_modified_time as real_data_modified_time,\n    tr.shippingtype,\n    CASE \n        WHEN (tr.channel is null or tr.channel = 2) THEN 0 \n        WHEN tr.channel = 3 and tr.shippingtype in ('dineIn', 'takeaway') THEN 98\n        WHEN tr.channel = 3 and tr.shippingtype in ('delivery', 'pickup') THEN 99\n        ELSE tr.channel \n    END AS displaychannel,\n    0.00 AS shippingfee\n\nfrom storehub_mongo.transactionrecords tr\n\n--left join storehub_mongo.employees e\n--    on e.employeenumber = tr.employeenumber         \n--    and tr.business = e.business\n\n--left join storehub_mongo.customers c\n--    on c.customerid = tr.customerid \n--    and tr.business = c.business\n\nleft join storehub_mongo.businesses__stores bs\n    on bs._id = tr.storeid \n\nwhere tr.modifiedtime >= dateadd(hour,-8,'2022-01-01')\n    and tr.modifiedtime >= dateadd(hour,-8,'2025-01-01') and tr.modifiedtime < dateadd(hour,-8,'2025-07-01')\n    and tr.business = 'signaturebeefnoodles'\n    --and tr._id in ('675fe430a740d9000728b780','675fbb3b510a3000073f61fb','675fbe8a2332d7000765c6e7','676142b6a422150007aeba56','675fc41f028abe00079b6796','6760ed9a068e5f000755a21c','675fd7fe06adff000607d2c5')\n),\n\nproducts as (\nselect\n    products1._id as productid,\n    products1.original_id as original_id,\n    CASE WHEN products2.title is null THEN products1.title ELSE products2.title END AS parentproduct_title,\n    products1.title as product_title,\n    products1.skunumber,\n    products1.cost,\n    products1.category as product_category,\n    products1.tags as product_tags,\n    products1.supplierid + ',' + products1.supplierids as supplierids,\n    products1.data_modified_time as product_data_modified_time\n\nfrom storehub_mongo.products as products1\n\nleft join storehub_mongo.products as products2 \n    on products1.parentproductid = products2.original_id\n\nwhere products1.business = 'signaturebeefnoodles'\n),\n\nreport_transaction_items as (\nselect \n    ti._id,\n    ti.productid as productid,\n    ti.total,\n    ti.subtotal,\n    ti.unitprice,\n    CASE WHEN ti.cost is null THEN 0 ELSE ti.cost END AS cost,\n    ti.tax,\n    ti.discount,\n    ti.quantity,\n    ti.itemtype,\n    ti.employeeid,\n    ti.employeename,\n\n    transactions.business + '_' + ti.productid as business_productid,\n    transactions.pax,\n    transactions.transactionid,\n    transactions.transactiontype,\n    transactions.createdtime,\n    transactions.business,\n    transactions.status,\n    transactions.channel,\n    transactions.iscancelled,\n    transactions.paymentmethod,\n    transactions.storeid,\n    transactions.storename,\n    transactions.employeenumber,\n    transactions.customerid,\n    --transactions.employee_firstname,\n    --transactions.employee_lastname,\n    --transactions.employee_name,\n    --transactions.employee_email,\n    --transactions.customer_createdtime,\n    --transactions.customer_firstname,\n    --transactions.customer_lastname,\n    --transactions.customer_tags,\n    --transactions.customer_name,\n    --transactions.customer_email,\n    --transactions.customer_phone,\n    transactions.servicecharge,\n    transactions.roundedamount,\n\n    products.skunumber,\n    products.product_tags,\n    products.supplierids,\n    products.product_title,\n    products.parentproduct_title,\n    products.product_category,\n    products.productid as original_product_id,\n\n    ti.data_modified_time as real_data_modified_time,\n    products.product_data_modified_time as product_data_modified_time,\n\n    transactions.shippingtype,\n    transactions.displaychannel\n\nfrom storehub_mongo.transactionrecords__items ti\n\ninner join transactions \n    on ti.transactionrecords_foreignkey = transactions.transactionid\n\nleft join products \n    on ti.productid = products.original_id\n)\n\n\nselect\n    --b.\"Store ID\"\n    t.storename as \"Store Name\"\n    , t.\"month\"\n    --, t.employeeid,\n    --, t.employeename,\n    , t.parentproduct_title as \"Product Name\"\n    , t.product_category as \"Product Category\"\n    , t.skunumber as \"SKU\"\n    , t.salesItemsCount as \"Total Item Sold\"\n    , t.sales + t.tax as \"Total Sales\"\n    , t.returns as \"Total Sales Returned\"\n    , t.discount as \"Total Discount\"\n    , COALESCE(t.discount / NULLIF(t.subtotal,0) *100, 0) AS \"Discount %\"\n    , t.sales as \"Item Net Sales\"\n    , COALESCE(t.cost / NULLIF(t.quantity,0), 0) as \"Average Cost\" --Sum of Item Cost / Total Item Sold\n    , COALESCE(\"Item Net Sales\" / NULLIF(t.\"count\",0), 0) AS \"Average Net Sales\" --Net Sales / Total Transaction * Total transaction includes both sale transactions and returned transactions\n    , \"Item Net Sales\" - t.cost AS \"Gross Profit\"\n    , COALESCE((\"Item Net Sales\" - t.cost) / NULLIF(\"Item Net Sales\",0) * 100, 0) AS \"Gross Profit %\"\n    \n    --, t.salesSubtotal - t.salesDiscount + t.tax as \"Total Sales2\"\n    --, t.returnsSubtotal - t.returnsDiscount as \"Total Sales Returned2\"\n    --, t.sales - t.tax - t.serviceCharge - t.rounding - t.returns AS \"Item Net Sales\" \n    --, t.subtotal - t.discount as \"Item Net Sales2\"\n    --, COALESCE(t.salesCost / NULLIF(t.quantity,0), 0) as \"Average Cost2\" \n    --, COALESCE(\"Item Net Sales2\" / NULLIF(t.\"count\",0), 0) AS \"Average Net Sales2\"\n    \nfrom (\n    SELECT \n        rti.storename,\n        date_trunc('month',cast(dateadd(hour,8,rti.createdtime) as date)) AS \"month\",\n        --rti.product_title as \"Product Name\",\n        COUNT(rti.\"*\") AS \"count\", --total transaction\n        --rti.employeeid,\n        --rti.employeename,\n        rti.\"parentproduct_title\" AS parentproduct_title,\n        rti.\"product_category\" AS product_category,\n        rti.\"skunumber\" AS skunumber,\n        SUM(CASE WHEN rti.\"transactiontype\"='Return' THEN COALESCE(-rti.\"quantity\",0) ELSE COALESCE(+rti.\"quantity\",0) END) AS salesItemsCount, -- =sold items quantity - returned items quantity\n        SUM(CASE WHEN rti.\"transactiontype\"='Return' THEN COALESCE(0,0) ELSE COALESCE(+rti.\"total\",0) END) AS sales, -- sold items sales\n        SUM(CASE WHEN rti.\"transactiontype\"='Return' THEN COALESCE(+rti.\"total\",0) ELSE COALESCE(0,0) END) AS returns, -- returned items sales\n        SUM(CASE WHEN rti.\"transactiontype\"='Return' THEN COALESCE(-rti.\"discount\",0) ELSE COALESCE(+rti.\"discount\",0) END) AS discount, -- =sold items discount - returned items discount\n        SUM(CASE WHEN rti.\"transactiontype\"='Return' THEN COALESCE(-rti.\"subtotal\",0) ELSE COALESCE(+rti.\"subtotal\",0) END) AS subtotal, -- =sold items subtotal - returned items subtotal\n        SUM(CASE WHEN rti.\"transactiontype\"='Return' THEN COALESCE(1,0) ELSE COALESCE(0,0) END) AS returnsCount, -- returned items quantity\n        SUM(CASE WHEN rti.\"transactiontype\"='Return' THEN COALESCE(-rti.\"tax\",0) ELSE COALESCE(+rti.\"tax\",0) END) AS tax, -- =sold items tax - returned items tax\n        SUM(CASE WHEN rti.\"transactiontype\"='Return' THEN COALESCE(-rti.\"cost\",0) ELSE COALESCE(+rti.\"cost\",0) END) AS cost, -- =sold items cost - returned items cost\n        SUM(CASE WHEN rti.\"transactiontype\"='Return' THEN COALESCE(-rti.\"quantity\",0) ELSE COALESCE(+rti.\"quantity\",0) END) AS quantity, \n        SUM(CASE WHEN rti.\"transactiontype\"='Return' THEN COALESCE(-rti.\"roundedamount\",0) ELSE COALESCE(+rti.\"roundedamount\",0) END) AS rounding, -- transaction level info: sales rounded amount - returned rounded amount\n        SUM(CASE WHEN rti.\"transactiontype\"='Return' THEN COALESCE(-rti.\"servicecharge\",0) ELSE COALESCE(+rti.\"servicecharge\",0) END) AS serviceCharge -- transaction level info: sales service charge - returned service charge\n        \n        --SUM(CASE WHEN rti.\"transactiontype\"='Return' THEN COALESCE(0,0) ELSE COALESCE(+rti.\"discount\",0) END) AS salesDiscount,  -- sold items discount\n        --SUM(CASE WHEN rti.\"transactiontype\"='Return' THEN COALESCE(0,0) ELSE COALESCE(+rti.\"subtotal\",0) END) AS salesSubtotal, -- sold items subtotal\n        --SUM(CASE WHEN rti.\"transactiontype\"='Return' THEN COALESCE(+rti.\"discount\",0) ELSE COALESCE(0,0) END) AS returnsDiscount, -- returned items discount\n        --SUM(CASE WHEN rti.\"transactiontype\"='Return' THEN COALESCE(+rti.\"subtotal\",0) ELSE COALESCE(0,0) END) AS returnsSubtotal, -- returned items subtotal\n        --SUM(CASE WHEN rti.\"transactiontype\"='Return' THEN COALESCE(0,0) ELSE COALESCE(+rti.\"cost\",0) END) AS salesCost -- sold items cost\n        \n    FROM report_transaction_items rti\n    \n    WHERE rti.status not in ('pendingPayment','failed','created','paymentCancelled') \n        AND rti.iscancelled is not true \n        AND rti.transactiontype <> 'PreOrder' \n        AND (rti.createdtime >= dateadd(hour,-8,'2025-01-01') and rti.createdtime < dateadd(hour,-8,'2025-07-01')) \n        AND rti.business = 'signaturebeefnoodles'\n    \n    GROUP BY rti.storename, \"month\", rti.\"parentproduct_title\", rti.\"product_category\", rti.\"skunumber\"--, rti.employeeid, rti.employeename,\n    --ORDER BY \"variation_name\" ASC\n    ) t\n\nORDER BY t.\"month\" ASC, 3 ASC",
  "ai_generated_sql": "SELECT\n    DATE_TRUNC('month', o.created_at) AS month,\n    s.store_name,\n    p.product_name,\n    SUM(oi.quantity * oi.sale_price) AS net_sales,\n    SUM(oi.quantity * (oi.sale_price - p.cost)) AS gross_profit,\n    SUM(oi.quantity * (oi.sale_price - p.cost)) / SUM(oi.quantity * oi.sale_price) AS gross_profit_margin\nFROM\n    orders o\nJOIN\n    order_items oi ON o.id = oi.order_id\nJOIN\n    products p ON oi.product_id = p.id\nJOIN\n    stores s ON o.store_id = s.id\nWHERE\n    o.created_at >= '2025-01-01' AND o.created_at < '2025-07-01'\n    AND p.product_name = 'signaturebeefnoodles'\n    AND o.customer_id NOT IN (SELECT id FROM customers WHERE is_internal = TRUE)\nGROUP BY\n    1, 2, 3\nORDER BY\n    1, 2, 3;",
  "api_result": {
    "success": true,
    "status_code": 202,
    "data": {
      "database_id": 2,
      "started_at": "2025-07-30T17:10:34.329419Z",
      "via": [
        {
          "status": "failed",
          "class": "class clojure.lang.ExceptionInfo",
          "error": "Error executing query: ERROR: relation \"orders\" does not exist",
          "stacktrace": [
            "--> driver.sql_jdbc.execute$execute_reducible_query$fn__79031$fn__79032.invoke(execute.clj:701)",
            "driver.sql_jdbc.execute$execute_reducible_query$fn__79031.invoke(execute.clj:698)",
            "driver.redshift$fn__119979$fn__119981.invoke(redshift.clj:138)",
            "driver.sql_jdbc.execute$do_with_resolved_connection.invokeStatic(execute.clj:334)",
            "driver.sql_jdbc.execute$do_with_resolved_connection.invoke(execute.clj:317)",
            "driver.redshift$fn__119979.invokeStatic(redshift.clj:123)",
            "driver.redshift$fn__119979.invoke(redshift.clj:121)",
            "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:692)",
            "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
            "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:689)",
            "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
            "driver.sql_jdbc$fn__106344.invokeStatic(sql_jdbc.clj:78)",
            "driver.sql_jdbc$fn__106344.invoke(sql_jdbc.clj:76)",
            "query_processor.context$executef.invokeStatic(context.clj:60)",
            "query_processor.context$executef.invoke(context.clj:49)",
            "query_processor.context.default$default_runf.invokeStatic(default.clj:44)",
            "query_processor.context.default$default_runf.invoke(default.clj:42)",
            "query_processor.context$runf.invokeStatic(context.clj:46)",
            "query_processor.context$runf.invoke(context.clj:40)",
            "query_processor.reducible$identity_qp.invokeStatic(reducible.clj:39)",
            "query_processor.reducible$identity_qp.invoke(reducible.clj:36)",
            "query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___71961.invoke(cache.clj:229)",
            "query_processor.middleware.permissions$check_query_permissions$fn__66347.invoke(permissions.clj:140)",
            "query_processor.middleware.enterprise$check_download_permissions_middleware$fn__71782.invoke(enterprise.clj:51)",
            "query_processor.middleware.enterprise$maybe_apply_column_level_perms_check_middleware$fn__71792.invoke(enterprise.clj:64)",
            "query_processor.middleware.mbql_to_native$mbql__GT_native$fn__71224.invoke(mbql_to_native.clj:24)",
            "query_processor$fn__73106$combined_post_process__73111$combined_post_process_STAR___73112.invoke(query_processor.clj:262)",
            "query_processor$fn__73106$combined_pre_process__73107$combined_pre_process_STAR___73108.invoke(query_processor.clj:259)",
            "query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__66444.invoke(fetch_source_query.clj:303)",
            "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872$fn__71876.invoke(resolve_database_and_driver.clj:77)",
            "driver$do_with_driver.invokeStatic(driver.clj:97)",
            "driver$do_with_driver.invoke(driver.clj:92)",
            "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872.invoke(resolve_database_and_driver.clj:76)",
            "query_processor.middleware.store$initialize_store$fn__67050$fn__67051.invoke(store.clj:14)",
            "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:169)",
            "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
            "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:158)",
            "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
            "query_processor.middleware.store$initialize_store$fn__67050.invoke(store.clj:13)",
            "query_processor.middleware.resolve_database_and_driver$resolve_database$fn__71869.invoke(resolve_database_and_driver.clj:60)",
            "query_processor.middleware.normalize_query$normalize$fn__72174.invoke(normalize_query.clj:38)",
            "query_processor.middleware.enterprise$fn__71809$handle_audit_app_internal_queries__71810$fn__71812.invoke(enterprise.clj:96)",
            "query_processor.middleware.enterprise$handle_audit_app_internal_queries_middleware$fn__71820.invoke(enterprise.clj:103)",
            "query_processor.middleware.constraints$mark_needs_default_userland_constraints$fn__70935.invoke(constraints.clj:104)",
            "query_processor.middleware.process_userland_query$process_userland_query$fn__72105.invoke(process_userland_query.clj:156)",
            "query_processor.middleware.catch_exceptions$catch_exceptions$fn__72706.invoke(catch_exceptions.clj:171)",
            "query_processor.reducible$async_qp$qp_STAR___62605$thunk__62607.invoke(reducible.clj:126)",
            "query_processor.reducible$async_qp$qp_STAR___62605.invoke(reducible.clj:132)",
            "query_processor.reducible$sync_qp$qp_STAR___62617.doInvoke(reducible.clj:153)",
            "query_processor$process_userland_query.invokeStatic(query_processor.clj:402)",
            "query_processor$process_userland_query.doInvoke(query_processor.clj:398)",
            "query_processor$process_query_and_save_execution_BANG_.invokeStatic(query_processor.clj:416)",
            "query_processor$process_query_and_save_execution_BANG_.invoke(query_processor.clj:406)",
            "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invokeStatic(query_processor.clj:431)",
            "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invoke(query_processor.clj:421)",
            "api.dataset$run_query_async$fn__93567.invoke(dataset.clj:79)",
            "query_processor.streaming$streaming_response_STAR_$fn__53135$fn__53137.invoke(streaming.clj:168)",
            "query_processor.streaming$streaming_response_STAR_$fn__53135.invoke(streaming.clj:167)",
            "async.streaming_response$do_f_STAR_.invokeStatic(streaming_response.clj:69)",
            "async.streaming_response$do_f_STAR_.invoke(streaming_response.clj:67)",
            "async.streaming_response$do_f_async$task__43750.invoke(streaming_response.clj:88)"
          ],
          "error_type": "invalid-query",
          "ex-data": {
            "driver": "redshift",
            "sql": [
              "-- /* partner: \"metabase\", {\"dashboard_id\":null,\"chart_id\":null,\"optional_user_id\":477,\"optional_account_id\":\"0a0eeb39-1c3d-4f8f-a7cc-96bace83599a\",\"filter_values\":{}} */ Metabase:: userID: 477 queryType: native queryHash: 1a681f0cb32657c2f7ab6a6e94d21db4d08ed9d3ea85b2bd4aa3180edd20d481",
              "SELECT",
              "  DATE_TRUNC('month', o.created_at) AS month,",
              "  s.store_name,",
              "  p.product_name,",
              "  SUM(oi.quantity * oi.sale_price) AS net_sales,",
              "  SUM(oi.quantity * (oi.sale_price - p.cost)) AS gross_profit,",
              "  SUM(oi.quantity * (oi.sale_price - p.cost)) / SUM(oi.quantity * oi.sale_price) AS gross_profit_margin",
              "FROM",
              "  orders o",
              "  JOIN order_items oi ON o.id = oi.order_id",
              "  JOIN products p ON oi.product_id = p.id",
              "  JOIN stores s ON o.store_id = s.id",
              "WHERE",
              "  o.created_at >= '2025-01-01'",
              "  AND o.created_at < '2025-07-01'",
              "  AND p.product_name = 'signaturebeefnoodles'",
              "  AND o.customer_id NOT IN (",
              "    SELECT",
              "      id",
              "    FROM",
              "      customers",
              "    WHERE",
              "      is_internal = TRUE",
              "  )",
              "GROUP BY",
              "  1,",
              "  2,",
              "  3",
              "ORDER BY",
              "  1,",
              "  2,",
              "  3;"
            ],
            "params": null,
            "type": "invalid-query"
          }
        }
      ],
      "action_id": null,
      "state": "42P01",
      "error_type": "invalid-query",
      "json_query": {
        "database": 2,
        "type": "native",
        "native": {
          "query": "SELECT\n    DATE_TRUNC('month', o.created_at) AS month,\n    s.store_name,\n    p.product_name,\n    SUM(oi.quantity * oi.sale_price) AS net_sales,\n    SUM(oi.quantity * (oi.sale_price - p.cost)) AS gross_profit,\n    SUM(oi.quantity * (oi.sale_price - p.cost)) / SUM(oi.quantity * oi.sale_price) AS gross_profit_margin\nFROM\n    orders o\nJOIN\n    order_items oi ON o.id = oi.order_id\nJOIN\n    products p ON oi.product_id = p.id\nJOIN\n    stores s ON o.store_id = s.id\nWHERE\n    o.created_at >= '2025-01-01' AND o.created_at < '2025-07-01'\n    AND p.product_name = 'signaturebeefnoodles'\n    AND o.customer_id NOT IN (SELECT id FROM customers WHERE is_internal = TRUE)\nGROUP BY\n    1, 2, 3\nORDER BY\n    1, 2, 3;"
        },
        "middleware": {
          "js-int-to-string?": true,
          "add-default-userland-constraints?": true
        }
      },
      "status": "failed",
      "class": "class com.amazon.redshift.util.RedshiftException",
      "stacktrace": [
        "com.amazon.redshift.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2613)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResultsOnThread(QueryExecutorImpl.java:2281)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1886)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1878)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:375)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeInternal(RedshiftStatementImpl.java:515)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.execute(RedshiftStatementImpl.java:436)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeWithFlags(RedshiftStatementImpl.java:377)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeCachedSql(RedshiftStatementImpl.java:363)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeWithFlags(RedshiftStatementImpl.java:340)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.execute(RedshiftStatementImpl.java:330)",
        "com.mchange.v2.c3p0.impl.NewProxyStatement.execute(NewProxyStatement.java:75)",
        "--> driver.sql_jdbc.execute$fn__78950.invokeStatic(execute.clj:560)",
        "driver.sql_jdbc.execute$fn__78950.invoke(execute.clj:558)",
        "driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invokeStatic(execute.clj:568)",
        "driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invoke(execute.clj:565)",
        "driver.sql_jdbc.execute$execute_reducible_query$fn__79031$fn__79032.invoke(execute.clj:699)",
        "driver.sql_jdbc.execute$execute_reducible_query$fn__79031.invoke(execute.clj:698)",
        "driver.redshift$fn__119979$fn__119981.invoke(redshift.clj:138)",
        "driver.sql_jdbc.execute$do_with_resolved_connection.invokeStatic(execute.clj:334)",
        "driver.sql_jdbc.execute$do_with_resolved_connection.invoke(execute.clj:317)",
        "driver.redshift$fn__119979.invokeStatic(redshift.clj:123)",
        "driver.redshift$fn__119979.invoke(redshift.clj:121)",
        "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:692)",
        "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
        "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:689)",
        "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
        "driver.sql_jdbc$fn__106344.invokeStatic(sql_jdbc.clj:78)",
        "driver.sql_jdbc$fn__106344.invoke(sql_jdbc.clj:76)",
        "query_processor.context$executef.invokeStatic(context.clj:60)",
        "query_processor.context$executef.invoke(context.clj:49)",
        "query_processor.context.default$default_runf.invokeStatic(default.clj:44)",
        "query_processor.context.default$default_runf.invoke(default.clj:42)",
        "query_processor.context$runf.invokeStatic(context.clj:46)",
        "query_processor.context$runf.invoke(context.clj:40)",
        "query_processor.reducible$identity_qp.invokeStatic(reducible.clj:39)",
        "query_processor.reducible$identity_qp.invoke(reducible.clj:36)",
        "query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___71961.invoke(cache.clj:229)",
        "query_processor.middleware.permissions$check_query_permissions$fn__66347.invoke(permissions.clj:140)",
        "query_processor.middleware.enterprise$check_download_permissions_middleware$fn__71782.invoke(enterprise.clj:51)",
        "query_processor.middleware.enterprise$maybe_apply_column_level_perms_check_middleware$fn__71792.invoke(enterprise.clj:64)",
        "query_processor.middleware.mbql_to_native$mbql__GT_native$fn__71224.invoke(mbql_to_native.clj:24)",
        "query_processor$fn__73106$combined_post_process__73111$combined_post_process_STAR___73112.invoke(query_processor.clj:262)",
        "query_processor$fn__73106$combined_pre_process__73107$combined_pre_process_STAR___73108.invoke(query_processor.clj:259)",
        "query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__66444.invoke(fetch_source_query.clj:303)",
        "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872$fn__71876.invoke(resolve_database_and_driver.clj:77)",
        "driver$do_with_driver.invokeStatic(driver.clj:97)",
        "driver$do_with_driver.invoke(driver.clj:92)",
        "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872.invoke(resolve_database_and_driver.clj:76)",
        "query_processor.middleware.store$initialize_store$fn__67050$fn__67051.invoke(store.clj:14)",
        "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:169)",
        "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
        "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:158)",
        "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
        "query_processor.middleware.store$initialize_store$fn__67050.invoke(store.clj:13)",
        "query_processor.middleware.resolve_database_and_driver$resolve_database$fn__71869.invoke(resolve_database_and_driver.clj:60)",
        "query_processor.middleware.normalize_query$normalize$fn__72174.invoke(normalize_query.clj:38)",
        "query_processor.middleware.enterprise$fn__71809$handle_audit_app_internal_queries__71810$fn__71812.invoke(enterprise.clj:96)",
        "query_processor.middleware.enterprise$handle_audit_app_internal_queries_middleware$fn__71820.invoke(enterprise.clj:103)",
        "query_processor.middleware.constraints$mark_needs_default_userland_constraints$fn__70935.invoke(constraints.clj:104)",
        "query_processor.middleware.process_userland_query$process_userland_query$fn__72105.invoke(process_userland_query.clj:156)",
        "query_processor.middleware.catch_exceptions$catch_exceptions$fn__72706.invoke(catch_exceptions.clj:171)",
        "query_processor.reducible$async_qp$qp_STAR___62605$thunk__62607.invoke(reducible.clj:126)",
        "query_processor.reducible$async_qp$qp_STAR___62605.invoke(reducible.clj:132)",
        "query_processor.reducible$sync_qp$qp_STAR___62617.doInvoke(reducible.clj:153)",
        "query_processor$process_userland_query.invokeStatic(query_processor.clj:402)",
        "query_processor$process_userland_query.doInvoke(query_processor.clj:398)",
        "query_processor$process_query_and_save_execution_BANG_.invokeStatic(query_processor.clj:416)",
        "query_processor$process_query_and_save_execution_BANG_.invoke(query_processor.clj:406)",
        "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invokeStatic(query_processor.clj:431)",
        "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invoke(query_processor.clj:421)",
        "api.dataset$run_query_async$fn__93567.invoke(dataset.clj:79)",
        "query_processor.streaming$streaming_response_STAR_$fn__53135$fn__53137.invoke(streaming.clj:168)",
        "query_processor.streaming$streaming_response_STAR_$fn__53135.invoke(streaming.clj:167)",
        "async.streaming_response$do_f_STAR_.invokeStatic(streaming_response.clj:69)",
        "async.streaming_response$do_f_STAR_.invoke(streaming_response.clj:67)",
        "async.streaming_response$do_f_async$task__43750.invoke(streaming_response.clj:88)"
      ],
      "card_id": null,
      "context": "ad-hoc",
      "error": "ERROR: relation \"orders\" does not exist",
      "row_count": 0,
      "running_time": 0,
      "data": {
        "rows": [],
        "cols": []
      }
    },
    "row_count": 0,
    "query": "SELECT\n    DATE_TRUNC('month', o.created_at) AS month,\n    s.store_name,\n    p.product_name,\n    SUM(oi.quantity * oi.sale_price) AS net_sales,\n    SUM(oi.quantity * (oi.sale_price - p.cost)) AS gross_profit,\n    SUM(oi.quantity * (oi.sale_price - p.cost)) / SUM(oi.quantity * oi.sale_price) AS gross_profit_margin\nFROM\n    orders o\nJOIN\n    order_items oi ON o.id = oi.order_id\nJOIN\n    products p ON oi.product_id = p.id\nJOIN\n    stores s ON o.store_id = s.id\nWHERE\n    o.created_at >= '2025-01-01' AND o.created_at < '2025-07-01'\n    AND p.product_name = 'signaturebeefnoodles'\n    AND o.customer_id NOT IN (SELECT id FROM customers WHERE is_internal = TRUE)\nGROUP BY\n    1, 2, 3\nORDER BY\n    1, 2, 3;"
  },
  "timestamp": "2025-07-31T01:10:34.385577"
}