{
  "file_name": "04_beep_ecomm_paymentgatewayrevenue.sql",
  "business_question": "What was our total revenue from payment gateway fees for all online transactions in Malaysia for June 2025?",
  "golden_sql": "-- What was our total revenue from payment gateway fees for all online transactions in Malaysia for June 2025?\n\nwith txn as (\nselect distinct \n    tr.receiptnumber,\n    tr.createdtime,\n    tr.business,\n    b.country,\n    tr._id,\n    tr.status,\n    tr.channel,\n    tr.shippingtype,\n    tr.isdisbursed,\n    tr.total\n    \nfrom storehub_mongo.transactionrecords tr\n\nleft join storehub_mongo.businesses b\n    on b.name = tr.business\n    \nwhere (tr.channel = 1 or tr.channel = 3)\n    and tr.business != 'merchandise'\n    and tr.paymentmethod = 'Online'\n    and CHARINDEX('internal', b.planid) = 0 \n    and CHARINDEX('@storehub.com', b.email) = 0\n    and b.country = 'MY'\n    and tr.status not in ('cancelled', 'created', 'failed', 'paymentCancelled', 'pendingPayment', 'pendingVerification')\n    and tr.total < 10000000\n    and tr.createdtime >= dateadd(hour,-8,'2025-06-01') and tr.createdtime < dateadd(hour,-8,'2025-07-01')\n),\n\npo as (\nselect \n    pi.*,\n    bp.createdtime as bptime\n\nfrom storehub_mongo.payoutitems pi\n\nleft join storehub_mongo.batchpayouts bp\n    on bp._id = pi.batchpayoutid\n)\n\n\nselect \n    t.country,\n    date_trunc('month', t.\"Transaction time\") as \"Month\",\n    count(distinct t.\"transaction id\") as total_txn,\n    sum(t.\"Transaction Amount\") as total_txn_amt,\n    sum(t.\"Payment Gateway Profit\") as total_pg_revenue\nfrom (\nselect distinct \n    dateadd(hour,8,txn.createdtime) as \"Transaction time\",\n    dateadd(hour,8,po.bptime) as \"Payout time\",\n    txn.country,\n    txn.business, \n    txn.receiptnumber as \"receipt number\",\n    txn._id as \"transaction id\",\n    txn.status,\n    case \n        when txn.channel = 1 then 'Ecomm'\n        when txn.channel = 3 then 'Beep'\n    end as \"channel\",\n    txn.shippingtype,\n    txn.isdisbursed,\n    txn.total as \"Transaction Amount\",\n    --trpm.paymentprovider,\n    --trpm.paymentgateway,\n    --gr.paymentgateway,\n    po.paymentgateway as \"payment gateway\",\n    po.cause as \"Payout reason\",\n    po.amount as \"Payout amount\",\n    --\"Payout amount - Sell\" + \"Payout amount - Adjustment\" as \"Total Payout amount\",\n    (case when po.cause = 'sell' then isnull(gr.fee,0) - isnull(pso.paymentgatewaycost,0) else 0 end) as \"Payment Gateway Cost\",\n    isnull(po.paymentgatewayfee,0) as \"Payment Gateway Fee\",\n    -(\"Payment Gateway Fee\" - \"Payment Gateway Cost\") as \"Payment Gateway Profit\",\n    -(po.transactionfee) as \"Storehub Fee (Transaction Fee)\"\n    --count(distinct pi.receiptnumber) as \"# of txn\",\n    --sum(case when pi.cause = 'adjustment' then pi.amount else 0 end) as \"Adjustment Amount\",\n    --(case when po.cause = 'sell' then isnull(po.refundedamount,0) else 0 end) as \"Refunded Amount\"\n\nfrom txn\n    \nleft join po \n    on po.receiptnumber = txn.receiptnumber\n\nleft join (\n    select * \n    from storehub_mongo.gatewayrecords gr\n    where gr.transactiontype = 'payment' \n        and gr.reconstatus = 'passed'\n    ) gr \n    on gr.receiptnumber = po.receiptnumber\n\nleft join storehub_mongo.paymentsettlements__orders pso \n    on pso.receiptnumber = txn.receiptnumber\n    --and (pi.cause = 'sell' or pi.cause = 'cancel')\n\n--group by 1,2,3,4,5,6,7,8,9,10,11,12,13\norder by \"Transaction time\" desc,  \"receipt number\" ASC, \"Payout reason\" DESC\n) t\n\ngroup by 1,2\norder by 1 ASC, 2 ASC",
  "ai_generated_sql": "SELECT\n    SUM(pgt.fee_amount)\nFROM\n    payment_gateway_transactions pgt\nJOIN\n    transactions t ON pgt.transaction_id = t.transaction_id\nJOIN\n    accounts a ON t.account_id = a.account_id\nWHERE\n    t.transaction_timestamp >= '2025-06-01 00:00:00 UTC'\n    AND t.transaction_timestamp < '2025-07-01 00:00:00 UTC'\n    AND t.transaction_type = 'online'\n    AND a.country = 'MY'\n    AND a.account_type <> 'internal';",
  "api_result": {
    "success": true,
    "status_code": 202,
    "data": {
      "database_id": 2,
      "started_at": "2025-07-30T17:10:15.562082Z",
      "via": [
        {
          "status": "failed",
          "class": "class clojure.lang.ExceptionInfo",
          "error": "Error executing query: ERROR: relation \"payment_gateway_transactions\" does not exist",
          "stacktrace": [
            "--> driver.sql_jdbc.execute$execute_reducible_query$fn__79031$fn__79032.invoke(execute.clj:701)",
            "driver.sql_jdbc.execute$execute_reducible_query$fn__79031.invoke(execute.clj:698)",
            "driver.redshift$fn__119979$fn__119981.invoke(redshift.clj:138)",
            "driver.sql_jdbc.execute$do_with_resolved_connection.invokeStatic(execute.clj:334)",
            "driver.sql_jdbc.execute$do_with_resolved_connection.invoke(execute.clj:317)",
            "driver.redshift$fn__119979.invokeStatic(redshift.clj:123)",
            "driver.redshift$fn__119979.invoke(redshift.clj:121)",
            "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:692)",
            "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
            "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:689)",
            "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
            "driver.sql_jdbc$fn__106344.invokeStatic(sql_jdbc.clj:78)",
            "driver.sql_jdbc$fn__106344.invoke(sql_jdbc.clj:76)",
            "query_processor.context$executef.invokeStatic(context.clj:60)",
            "query_processor.context$executef.invoke(context.clj:49)",
            "query_processor.context.default$default_runf.invokeStatic(default.clj:44)",
            "query_processor.context.default$default_runf.invoke(default.clj:42)",
            "query_processor.context$runf.invokeStatic(context.clj:46)",
            "query_processor.context$runf.invoke(context.clj:40)",
            "query_processor.reducible$identity_qp.invokeStatic(reducible.clj:39)",
            "query_processor.reducible$identity_qp.invoke(reducible.clj:36)",
            "query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___71961.invoke(cache.clj:229)",
            "query_processor.middleware.permissions$check_query_permissions$fn__66347.invoke(permissions.clj:140)",
            "query_processor.middleware.enterprise$check_download_permissions_middleware$fn__71782.invoke(enterprise.clj:51)",
            "query_processor.middleware.enterprise$maybe_apply_column_level_perms_check_middleware$fn__71792.invoke(enterprise.clj:64)",
            "query_processor.middleware.mbql_to_native$mbql__GT_native$fn__71224.invoke(mbql_to_native.clj:24)",
            "query_processor$fn__73106$combined_post_process__73111$combined_post_process_STAR___73112.invoke(query_processor.clj:262)",
            "query_processor$fn__73106$combined_pre_process__73107$combined_pre_process_STAR___73108.invoke(query_processor.clj:259)",
            "query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__66444.invoke(fetch_source_query.clj:303)",
            "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872$fn__71876.invoke(resolve_database_and_driver.clj:77)",
            "driver$do_with_driver.invokeStatic(driver.clj:97)",
            "driver$do_with_driver.invoke(driver.clj:92)",
            "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872.invoke(resolve_database_and_driver.clj:76)",
            "query_processor.middleware.store$initialize_store$fn__67050$fn__67051.invoke(store.clj:14)",
            "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:169)",
            "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
            "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:158)",
            "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
            "query_processor.middleware.store$initialize_store$fn__67050.invoke(store.clj:13)",
            "query_processor.middleware.resolve_database_and_driver$resolve_database$fn__71869.invoke(resolve_database_and_driver.clj:60)",
            "query_processor.middleware.normalize_query$normalize$fn__72174.invoke(normalize_query.clj:38)",
            "query_processor.middleware.enterprise$fn__71809$handle_audit_app_internal_queries__71810$fn__71812.invoke(enterprise.clj:96)",
            "query_processor.middleware.enterprise$handle_audit_app_internal_queries_middleware$fn__71820.invoke(enterprise.clj:103)",
            "query_processor.middleware.constraints$mark_needs_default_userland_constraints$fn__70935.invoke(constraints.clj:104)",
            "query_processor.middleware.process_userland_query$process_userland_query$fn__72105.invoke(process_userland_query.clj:156)",
            "query_processor.middleware.catch_exceptions$catch_exceptions$fn__72706.invoke(catch_exceptions.clj:171)",
            "query_processor.reducible$async_qp$qp_STAR___62605$thunk__62607.invoke(reducible.clj:126)",
            "query_processor.reducible$async_qp$qp_STAR___62605.invoke(reducible.clj:132)",
            "query_processor.reducible$sync_qp$qp_STAR___62617.doInvoke(reducible.clj:153)",
            "query_processor$process_userland_query.invokeStatic(query_processor.clj:402)",
            "query_processor$process_userland_query.doInvoke(query_processor.clj:398)",
            "query_processor$process_query_and_save_execution_BANG_.invokeStatic(query_processor.clj:416)",
            "query_processor$process_query_and_save_execution_BANG_.invoke(query_processor.clj:406)",
            "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invokeStatic(query_processor.clj:431)",
            "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invoke(query_processor.clj:421)",
            "api.dataset$run_query_async$fn__93567.invoke(dataset.clj:79)",
            "query_processor.streaming$streaming_response_STAR_$fn__53135$fn__53137.invoke(streaming.clj:168)",
            "query_processor.streaming$streaming_response_STAR_$fn__53135.invoke(streaming.clj:167)",
            "async.streaming_response$do_f_STAR_.invokeStatic(streaming_response.clj:69)",
            "async.streaming_response$do_f_STAR_.invoke(streaming_response.clj:67)",
            "async.streaming_response$do_f_async$task__43750.invoke(streaming_response.clj:88)"
          ],
          "error_type": "invalid-query",
          "ex-data": {
            "driver": "redshift",
            "sql": [
              "-- /* partner: \"metabase\", {\"dashboard_id\":null,\"chart_id\":null,\"optional_user_id\":477,\"optional_account_id\":\"0a0eeb39-1c3d-4f8f-a7cc-96bace83599a\",\"filter_values\":{}} */ Metabase:: userID: 477 queryType: native queryHash: 9c319eec0cf9773b189afec2ccfd6a43da32e602a72633dc02543cfbcd975e00",
              "SELECT",
              "  SUM(pgt.fee_amount)",
              "FROM",
              "  payment_gateway_transactions pgt",
              "  JOIN transactions t ON pgt.transaction_id = t.transaction_id",
              "  JOIN accounts a ON t.account_id = a.account_id",
              "WHERE",
              "  t.transaction_timestamp >= '2025-06-01 00:00:00 UTC'",
              "  AND t.transaction_timestamp < '2025-07-01 00:00:00 UTC'",
              "  AND t.transaction_type = 'online'",
              "  AND a.country = 'MY'",
              "  AND a.account_type <> 'internal';"
            ],
            "params": null,
            "type": "invalid-query"
          }
        }
      ],
      "action_id": null,
      "state": "42P01",
      "error_type": "invalid-query",
      "json_query": {
        "database": 2,
        "type": "native",
        "native": {
          "query": "SELECT\n    SUM(pgt.fee_amount)\nFROM\n    payment_gateway_transactions pgt\nJOIN\n    transactions t ON pgt.transaction_id = t.transaction_id\nJOIN\n    accounts a ON t.account_id = a.account_id\nWHERE\n    t.transaction_timestamp >= '2025-06-01 00:00:00 UTC'\n    AND t.transaction_timestamp < '2025-07-01 00:00:00 UTC'\n    AND t.transaction_type = 'online'\n    AND a.country = 'MY'\n    AND a.account_type <> 'internal';"
        },
        "middleware": {
          "js-int-to-string?": true,
          "add-default-userland-constraints?": true
        }
      },
      "status": "failed",
      "class": "class com.amazon.redshift.util.RedshiftException",
      "stacktrace": [
        "com.amazon.redshift.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2613)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResultsOnThread(QueryExecutorImpl.java:2281)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1886)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1878)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:375)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeInternal(RedshiftStatementImpl.java:515)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.execute(RedshiftStatementImpl.java:436)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeWithFlags(RedshiftStatementImpl.java:377)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeCachedSql(RedshiftStatementImpl.java:363)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeWithFlags(RedshiftStatementImpl.java:340)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.execute(RedshiftStatementImpl.java:330)",
        "com.mchange.v2.c3p0.impl.NewProxyStatement.execute(NewProxyStatement.java:75)",
        "--> driver.sql_jdbc.execute$fn__78950.invokeStatic(execute.clj:560)",
        "driver.sql_jdbc.execute$fn__78950.invoke(execute.clj:558)",
        "driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invokeStatic(execute.clj:568)",
        "driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invoke(execute.clj:565)",
        "driver.sql_jdbc.execute$execute_reducible_query$fn__79031$fn__79032.invoke(execute.clj:699)",
        "driver.sql_jdbc.execute$execute_reducible_query$fn__79031.invoke(execute.clj:698)",
        "driver.redshift$fn__119979$fn__119981.invoke(redshift.clj:138)",
        "driver.sql_jdbc.execute$do_with_resolved_connection.invokeStatic(execute.clj:334)",
        "driver.sql_jdbc.execute$do_with_resolved_connection.invoke(execute.clj:317)",
        "driver.redshift$fn__119979.invokeStatic(redshift.clj:123)",
        "driver.redshift$fn__119979.invoke(redshift.clj:121)",
        "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:692)",
        "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
        "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:689)",
        "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
        "driver.sql_jdbc$fn__106344.invokeStatic(sql_jdbc.clj:78)",
        "driver.sql_jdbc$fn__106344.invoke(sql_jdbc.clj:76)",
        "query_processor.context$executef.invokeStatic(context.clj:60)",
        "query_processor.context$executef.invoke(context.clj:49)",
        "query_processor.context.default$default_runf.invokeStatic(default.clj:44)",
        "query_processor.context.default$default_runf.invoke(default.clj:42)",
        "query_processor.context$runf.invokeStatic(context.clj:46)",
        "query_processor.context$runf.invoke(context.clj:40)",
        "query_processor.reducible$identity_qp.invokeStatic(reducible.clj:39)",
        "query_processor.reducible$identity_qp.invoke(reducible.clj:36)",
        "query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___71961.invoke(cache.clj:229)",
        "query_processor.middleware.permissions$check_query_permissions$fn__66347.invoke(permissions.clj:140)",
        "query_processor.middleware.enterprise$check_download_permissions_middleware$fn__71782.invoke(enterprise.clj:51)",
        "query_processor.middleware.enterprise$maybe_apply_column_level_perms_check_middleware$fn__71792.invoke(enterprise.clj:64)",
        "query_processor.middleware.mbql_to_native$mbql__GT_native$fn__71224.invoke(mbql_to_native.clj:24)",
        "query_processor$fn__73106$combined_post_process__73111$combined_post_process_STAR___73112.invoke(query_processor.clj:262)",
        "query_processor$fn__73106$combined_pre_process__73107$combined_pre_process_STAR___73108.invoke(query_processor.clj:259)",
        "query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__66444.invoke(fetch_source_query.clj:303)",
        "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872$fn__71876.invoke(resolve_database_and_driver.clj:77)",
        "driver$do_with_driver.invokeStatic(driver.clj:97)",
        "driver$do_with_driver.invoke(driver.clj:92)",
        "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872.invoke(resolve_database_and_driver.clj:76)",
        "query_processor.middleware.store$initialize_store$fn__67050$fn__67051.invoke(store.clj:14)",
        "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:169)",
        "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
        "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:158)",
        "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
        "query_processor.middleware.store$initialize_store$fn__67050.invoke(store.clj:13)",
        "query_processor.middleware.resolve_database_and_driver$resolve_database$fn__71869.invoke(resolve_database_and_driver.clj:60)",
        "query_processor.middleware.normalize_query$normalize$fn__72174.invoke(normalize_query.clj:38)",
        "query_processor.middleware.enterprise$fn__71809$handle_audit_app_internal_queries__71810$fn__71812.invoke(enterprise.clj:96)",
        "query_processor.middleware.enterprise$handle_audit_app_internal_queries_middleware$fn__71820.invoke(enterprise.clj:103)",
        "query_processor.middleware.constraints$mark_needs_default_userland_constraints$fn__70935.invoke(constraints.clj:104)",
        "query_processor.middleware.process_userland_query$process_userland_query$fn__72105.invoke(process_userland_query.clj:156)",
        "query_processor.middleware.catch_exceptions$catch_exceptions$fn__72706.invoke(catch_exceptions.clj:171)",
        "query_processor.reducible$async_qp$qp_STAR___62605$thunk__62607.invoke(reducible.clj:126)",
        "query_processor.reducible$async_qp$qp_STAR___62605.invoke(reducible.clj:132)",
        "query_processor.reducible$sync_qp$qp_STAR___62617.doInvoke(reducible.clj:153)",
        "query_processor$process_userland_query.invokeStatic(query_processor.clj:402)",
        "query_processor$process_userland_query.doInvoke(query_processor.clj:398)",
        "query_processor$process_query_and_save_execution_BANG_.invokeStatic(query_processor.clj:416)",
        "query_processor$process_query_and_save_execution_BANG_.invoke(query_processor.clj:406)",
        "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invokeStatic(query_processor.clj:431)",
        "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invoke(query_processor.clj:421)",
        "api.dataset$run_query_async$fn__93567.invoke(dataset.clj:79)",
        "query_processor.streaming$streaming_response_STAR_$fn__53135$fn__53137.invoke(streaming.clj:168)",
        "query_processor.streaming$streaming_response_STAR_$fn__53135.invoke(streaming.clj:167)",
        "async.streaming_response$do_f_STAR_.invokeStatic(streaming_response.clj:69)",
        "async.streaming_response$do_f_STAR_.invoke(streaming_response.clj:67)",
        "async.streaming_response$do_f_async$task__43750.invoke(streaming_response.clj:88)"
      ],
      "card_id": null,
      "context": "ad-hoc",
      "error": "ERROR: relation \"payment_gateway_transactions\" does not exist",
      "row_count": 0,
      "running_time": 0,
      "data": {
        "rows": [],
        "cols": []
      }
    },
    "row_count": 0,
    "query": "SELECT\n    SUM(pgt.fee_amount)\nFROM\n    payment_gateway_transactions pgt\nJOIN\n    transactions t ON pgt.transaction_id = t.transaction_id\nJOIN\n    accounts a ON t.account_id = a.account_id\nWHERE\n    t.transaction_timestamp >= '2025-06-01 00:00:00 UTC'\n    AND t.transaction_timestamp < '2025-07-01 00:00:00 UTC'\n    AND t.transaction_type = 'online'\n    AND a.country = 'MY'\n    AND a.account_type <> 'internal';"
  },
  "timestamp": "2025-07-31T01:10:15.623856"
}