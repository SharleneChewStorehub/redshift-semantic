{
  "file_name": "13_transaction_breakdown_store.sql",
  "business_question": "I need a comprehensive monthly sales roll-up for Malaysia for January 2025. The report must provide a complete breakdown of GMV and transaction counts for every single sales channel, from in-store POS to all our third-party marketplace integrations like GrabFood and Shopify.",
  "golden_sql": "-- I need a comprehensive monthly sales roll-up for Malaysia for January 2025. The report must provide a complete breakdown of GMV and transaction counts for every single sales channel, from in-store POS to all our third-party marketplace integrations like GrabFood and Shopify.\n\n\nSELECT \n    b.name as \"bo account name\",\n    b.subscriptionstatus,\n    b.planid,\n    case\n        when b.businesstype in ('Bar','Cafe','Food Truck','Restaurant','Restuarant','cafe','restaurant','Cafe') then 'FnB'\n        when b.businesstype in ('Retail','Retail Store','retail','E-Commerce','eCommerce','ecommerce') then 'Retail'\n        when b.businesstype in ('Salon/Spa','Service','service') then 'Service' \n        else 'Other' \n    end as \"Industry\",\n    tr.storeid,\n    REGEXP_REPLACE (REGEXP_REPLACE (bs.name, '&#39;', ''''), '%7C;', ' - ') as \"storename\",\n    bs.postalcode,\n    bs.city,\n    bs.state,\n    date_trunc('month',cast(dateadd(hour,8,tr.createdtime) as date)) as \"month\",\n    COUNT(distinct case when (tr.channel is null or tr.channel = 2) then tr._id end) as \"offline txn#\",\n    sum(case when (tr.channel is null or tr.channel = 2) then tr.total end) as \"offline gmv\",\n    --sum(case when (tr.channel is null or tr.channel = 2) then tr.pax end) as \"pax\",\n    --count(distinct case when (tr.channel is null or tr.channel = 2) and tr.pax is null then tr._id end) as \"one pax\",\n    --isnull(\"pax\",0) + isnull(\"one pax\",0) as \"total pax#\",\n    count(distinct case when tr.channel = 3 and tr.shippingtype in ('dineIn','takeaway') then tr._id end) as \"qrtxn#\",\n    sum(case when tr.channel = 3 and tr.shippingtype in ('dineIn','takeaway') then tr.total end) as \"qr gmv\",\n    count(distinct case when tr.channel = 3 and tr.shippingtype in ('delivery','pickup') then tr._id end) as \"bdtxn#\",\n    sum(case when tr.channel = 3 and tr.shippingtype in ('delivery','pickup') then tr.total end) as \"bd gmv\",\n    count(distinct case when tr.channel = 1 then tr._id end) as \"ecomm txn#\",\n    sum(case when tr.channel = 1 then tr.total end) as \"ecomm gmv\",\n    count(distinct case when tr.channel = 10 then tr._id end) as \"fdi grabfood txn#\",\n    sum(case when tr.channel = 10 then tr.total end) as \"fdi grabfood gmv\",\n    count(distinct case when tr.channel = 11 then tr._id end) as \"fdi shopeefood txn#\",\n    sum(case when tr.channel = 11 then tr.total end) as \"fdi shopeefood gmv\",\n    count(distinct case when tr.channel = 12 then tr._id end) as \"fdi foodpanda txn#\",\n    sum(case when tr.channel = 12 then tr.total end) as \"fdi foodpanda gmv\",\n    count(distinct case when tr.channel = 100 then tr._id end) as \"mpi lazada txn#\",\n    sum(case when tr.channel = 100 then tr.total end) as \"mpi lazada gmv\",\n    count(distinct case when tr.channel = 101 then tr._id end) as \"mpi shopee txn#\",\n    sum(case when tr.channel = 101 then tr.total end) as \"mpi shopee gmv\",\n    count(distinct case when tr.channel = 102 then tr._id end) as \"mpi zalora txn#\",\n    sum(case when tr.channel = 102 then tr.total end) as \"mpi zalora gmv\",\n    count(distinct case when tr.channel = 103 then tr._id end) as \"mpi woocommerce txn#\",\n    sum(case when tr.channel = 103 then tr.total end) as \"mpi woocommerce gmv\",\n    count(distinct case when tr.channel = 104 then tr._id end) as \"mpi shopify txn#\",\n    sum(case when tr.channel = 104 then tr.total end) as \"mpi shopify gmv\",\n    count(distinct case when tr.channel = 105 then tr._id end) as \"mpi tiktokshop txn#\",\n    sum(case when tr.channel = 105 then tr.total end) as \"mpi tiktokshop gmv\"\n    --sum(t.total)/30 as \"GMV\"\n\nfrom storehub_mongo.businesses b\n\nleft join storehub_mongo.transactionrecords tr\n    on b.name = tr.business\n\nleft join storehub_mongo.businesses__stores bs\n    on bs._id = tr.storeid\n    \nwhere CHARINDEX('internal', b.planid) = 0 \n    and CHARINDEX('@storehub.com', b.email) = 0\n    and b.country = 'MY'\n    --and b.subscriptionstatus = 'Active'\n    --and (tr.channel = 3 or tr.channel is null or tr.channel = 2)\n    and tr.transactiontype = 'Sale'\n    and tr.iscancelled is not true\n    and tr.status not in ('cancelled', 'created', 'failed', 'paymentCancelled', 'pendingPayment', 'pendingVerification')\n    and tr.total<10000000\n    and (tr.createdtime >= dateadd(hour,-8,'2025-01-01') and tr.createdtime < dateadd(hour,-8,'2025-02-01'))\n    --and b.name = 'thecoffeeacademics'\n    --and tr.business = 'ashhryshoshedap'\n\ngroup by 1,2,3,4,5,6,7,8,9,10\norder by \"bo account name\" ASC, \"storename\" ASC, \"month\" ASC\n\n",
  "ai_generated_sql": "SELECT\n    CASE channel\n        WHEN '0' THEN 'POS'\n        WHEN '1' THEN 'Online Store'\n        WHEN '3' THEN 'QR Order'\n        WHEN '10' THEN 'GrabFood'\n        WHEN '11' THEN 'ShopeeFood'\n        WHEN '12' THEN 'FoodPanda'\n        WHEN '13' THEN 'Beep'\n        ELSE 'Other'\n    END AS channel_name,\n    COUNT(DISTINCT receiptnumber) AS transaction_count,\n    SUM(totalamount) AS gmv\nFROM transactionrecords\nWHERE business = 'actual_business_name'\n    AND isdeleted != true\n    AND type = 'Sale'\n    AND createdtime >= '2025-01-01' AND createdtime < '2025-02-01'\nGROUP BY channel\nORDER BY gmv DESC",
  "framework_context_length": 162010,
  "framework_files_loaded": [
    "semantic_context",
    "data_catalog",
    "business_rules",
    "query_patterns",
    "value_mappings",
    "query_cookbook"
  ],
  "api_result": {
    "success": true,
    "status_code": 202,
    "data": {
      "database_id": 2,
      "started_at": "2025-07-30T17:12:12.976939Z",
      "via": [
        {
          "status": "failed",
          "class": "class clojure.lang.ExceptionInfo",
          "error": "Error executing query: ERROR: relation \"transactionrecords\" does not exist",
          "stacktrace": [
            "--> driver.sql_jdbc.execute$execute_reducible_query$fn__79031$fn__79032.invoke(execute.clj:701)",
            "driver.sql_jdbc.execute$execute_reducible_query$fn__79031.invoke(execute.clj:698)",
            "driver.redshift$fn__119979$fn__119981.invoke(redshift.clj:138)",
            "driver.sql_jdbc.execute$do_with_resolved_connection.invokeStatic(execute.clj:334)",
            "driver.sql_jdbc.execute$do_with_resolved_connection.invoke(execute.clj:317)",
            "driver.redshift$fn__119979.invokeStatic(redshift.clj:123)",
            "driver.redshift$fn__119979.invoke(redshift.clj:121)",
            "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:692)",
            "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
            "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:689)",
            "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
            "driver.sql_jdbc$fn__106344.invokeStatic(sql_jdbc.clj:78)",
            "driver.sql_jdbc$fn__106344.invoke(sql_jdbc.clj:76)",
            "query_processor.context$executef.invokeStatic(context.clj:60)",
            "query_processor.context$executef.invoke(context.clj:49)",
            "query_processor.context.default$default_runf.invokeStatic(default.clj:44)",
            "query_processor.context.default$default_runf.invoke(default.clj:42)",
            "query_processor.context$runf.invokeStatic(context.clj:46)",
            "query_processor.context$runf.invoke(context.clj:40)",
            "query_processor.reducible$identity_qp.invokeStatic(reducible.clj:39)",
            "query_processor.reducible$identity_qp.invoke(reducible.clj:36)",
            "query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___71961.invoke(cache.clj:229)",
            "query_processor.middleware.permissions$check_query_permissions$fn__66347.invoke(permissions.clj:140)",
            "query_processor.middleware.enterprise$check_download_permissions_middleware$fn__71782.invoke(enterprise.clj:51)",
            "query_processor.middleware.enterprise$maybe_apply_column_level_perms_check_middleware$fn__71792.invoke(enterprise.clj:64)",
            "query_processor.middleware.mbql_to_native$mbql__GT_native$fn__71224.invoke(mbql_to_native.clj:24)",
            "query_processor$fn__73106$combined_post_process__73111$combined_post_process_STAR___73112.invoke(query_processor.clj:262)",
            "query_processor$fn__73106$combined_pre_process__73107$combined_pre_process_STAR___73108.invoke(query_processor.clj:259)",
            "query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__66444.invoke(fetch_source_query.clj:303)",
            "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872$fn__71876.invoke(resolve_database_and_driver.clj:77)",
            "driver$do_with_driver.invokeStatic(driver.clj:97)",
            "driver$do_with_driver.invoke(driver.clj:92)",
            "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872.invoke(resolve_database_and_driver.clj:76)",
            "query_processor.middleware.store$initialize_store$fn__67050$fn__67051.invoke(store.clj:14)",
            "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:169)",
            "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
            "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:158)",
            "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
            "query_processor.middleware.store$initialize_store$fn__67050.invoke(store.clj:13)",
            "query_processor.middleware.resolve_database_and_driver$resolve_database$fn__71869.invoke(resolve_database_and_driver.clj:60)",
            "query_processor.middleware.normalize_query$normalize$fn__72174.invoke(normalize_query.clj:38)",
            "query_processor.middleware.enterprise$fn__71809$handle_audit_app_internal_queries__71810$fn__71812.invoke(enterprise.clj:96)",
            "query_processor.middleware.enterprise$handle_audit_app_internal_queries_middleware$fn__71820.invoke(enterprise.clj:103)",
            "query_processor.middleware.constraints$mark_needs_default_userland_constraints$fn__70935.invoke(constraints.clj:104)",
            "query_processor.middleware.process_userland_query$process_userland_query$fn__72105.invoke(process_userland_query.clj:156)",
            "query_processor.middleware.catch_exceptions$catch_exceptions$fn__72706.invoke(catch_exceptions.clj:171)",
            "query_processor.reducible$async_qp$qp_STAR___62605$thunk__62607.invoke(reducible.clj:126)",
            "query_processor.reducible$async_qp$qp_STAR___62605.invoke(reducible.clj:132)",
            "query_processor.reducible$sync_qp$qp_STAR___62617.doInvoke(reducible.clj:153)",
            "query_processor$process_userland_query.invokeStatic(query_processor.clj:402)",
            "query_processor$process_userland_query.doInvoke(query_processor.clj:398)",
            "query_processor$process_query_and_save_execution_BANG_.invokeStatic(query_processor.clj:416)",
            "query_processor$process_query_and_save_execution_BANG_.invoke(query_processor.clj:406)",
            "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invokeStatic(query_processor.clj:431)",
            "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invoke(query_processor.clj:421)",
            "api.dataset$run_query_async$fn__93567.invoke(dataset.clj:79)",
            "query_processor.streaming$streaming_response_STAR_$fn__53135$fn__53137.invoke(streaming.clj:168)",
            "query_processor.streaming$streaming_response_STAR_$fn__53135.invoke(streaming.clj:167)",
            "async.streaming_response$do_f_STAR_.invokeStatic(streaming_response.clj:69)",
            "async.streaming_response$do_f_STAR_.invoke(streaming_response.clj:67)",
            "async.streaming_response$do_f_async$task__43750.invoke(streaming_response.clj:88)"
          ],
          "error_type": "invalid-query",
          "ex-data": {
            "driver": "redshift",
            "sql": [
              "-- /* partner: \"metabase\", {\"dashboard_id\":null,\"chart_id\":null,\"optional_user_id\":477,\"optional_account_id\":\"0a0eeb39-1c3d-4f8f-a7cc-96bace83599a\",\"filter_values\":{}} */ Metabase:: userID: 477 queryType: native queryHash: f8f723b27cc93e0bb57bde7444441ede1bf50558fba5830e1dba0b21f417b847",
              "SELECT",
              "  CASE channel",
              "  WHEN '0' THEN 'POS'",
              "  WHEN '1' THEN 'Online Store'",
              "  WHEN '3' THEN 'QR Order'",
              "  WHEN '10' THEN 'GrabFood'",
              "  WHEN '11' THEN 'ShopeeFood'",
              "  WHEN '12' THEN 'FoodPanda'",
              "  WHEN '13' THEN 'Beep'",
              "  ELSE 'Other' END AS channel_name,",
              "  COUNT(DISTINCT receiptnumber) AS transaction_count,",
              "  SUM(totalamount) AS gmv",
              "FROM",
              "  transactionrecords",
              "WHERE",
              "  business = 'actual_business_name'",
              "  AND isdeleted != true",
              "  AND type = 'Sale'",
              "  AND createdtime >= '2025-01-01'",
              "  AND createdtime < '2025-02-01'",
              "GROUP BY",
              "  channel",
              "ORDER BY",
              "  gmv DESC"
            ],
            "params": null,
            "type": "invalid-query"
          }
        }
      ],
      "action_id": null,
      "state": "42P01",
      "error_type": "invalid-query",
      "json_query": {
        "database": 2,
        "type": "native",
        "native": {
          "query": "SELECT\n    CASE channel\n        WHEN '0' THEN 'POS'\n        WHEN '1' THEN 'Online Store'\n        WHEN '3' THEN 'QR Order'\n        WHEN '10' THEN 'GrabFood'\n        WHEN '11' THEN 'ShopeeFood'\n        WHEN '12' THEN 'FoodPanda'\n        WHEN '13' THEN 'Beep'\n        ELSE 'Other'\n    END AS channel_name,\n    COUNT(DISTINCT receiptnumber) AS transaction_count,\n    SUM(totalamount) AS gmv\nFROM transactionrecords\nWHERE business = 'actual_business_name'\n    AND isdeleted != true\n    AND type = 'Sale'\n    AND createdtime >= '2025-01-01' AND createdtime < '2025-02-01'\nGROUP BY channel\nORDER BY gmv DESC"
        },
        "middleware": {
          "js-int-to-string?": true,
          "add-default-userland-constraints?": true
        }
      },
      "status": "failed",
      "class": "class com.amazon.redshift.util.RedshiftException",
      "stacktrace": [
        "com.amazon.redshift.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2613)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResultsOnThread(QueryExecutorImpl.java:2281)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1886)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1878)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:375)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeInternal(RedshiftStatementImpl.java:515)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.execute(RedshiftStatementImpl.java:436)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeWithFlags(RedshiftStatementImpl.java:377)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeCachedSql(RedshiftStatementImpl.java:363)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeWithFlags(RedshiftStatementImpl.java:340)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.execute(RedshiftStatementImpl.java:330)",
        "com.mchange.v2.c3p0.impl.NewProxyStatement.execute(NewProxyStatement.java:75)",
        "--> driver.sql_jdbc.execute$fn__78950.invokeStatic(execute.clj:560)",
        "driver.sql_jdbc.execute$fn__78950.invoke(execute.clj:558)",
        "driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invokeStatic(execute.clj:568)",
        "driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invoke(execute.clj:565)",
        "driver.sql_jdbc.execute$execute_reducible_query$fn__79031$fn__79032.invoke(execute.clj:699)",
        "driver.sql_jdbc.execute$execute_reducible_query$fn__79031.invoke(execute.clj:698)",
        "driver.redshift$fn__119979$fn__119981.invoke(redshift.clj:138)",
        "driver.sql_jdbc.execute$do_with_resolved_connection.invokeStatic(execute.clj:334)",
        "driver.sql_jdbc.execute$do_with_resolved_connection.invoke(execute.clj:317)",
        "driver.redshift$fn__119979.invokeStatic(redshift.clj:123)",
        "driver.redshift$fn__119979.invoke(redshift.clj:121)",
        "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:692)",
        "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
        "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:689)",
        "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
        "driver.sql_jdbc$fn__106344.invokeStatic(sql_jdbc.clj:78)",
        "driver.sql_jdbc$fn__106344.invoke(sql_jdbc.clj:76)",
        "query_processor.context$executef.invokeStatic(context.clj:60)",
        "query_processor.context$executef.invoke(context.clj:49)",
        "query_processor.context.default$default_runf.invokeStatic(default.clj:44)",
        "query_processor.context.default$default_runf.invoke(default.clj:42)",
        "query_processor.context$runf.invokeStatic(context.clj:46)",
        "query_processor.context$runf.invoke(context.clj:40)",
        "query_processor.reducible$identity_qp.invokeStatic(reducible.clj:39)",
        "query_processor.reducible$identity_qp.invoke(reducible.clj:36)",
        "query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___71961.invoke(cache.clj:229)",
        "query_processor.middleware.permissions$check_query_permissions$fn__66347.invoke(permissions.clj:140)",
        "query_processor.middleware.enterprise$check_download_permissions_middleware$fn__71782.invoke(enterprise.clj:51)",
        "query_processor.middleware.enterprise$maybe_apply_column_level_perms_check_middleware$fn__71792.invoke(enterprise.clj:64)",
        "query_processor.middleware.mbql_to_native$mbql__GT_native$fn__71224.invoke(mbql_to_native.clj:24)",
        "query_processor$fn__73106$combined_post_process__73111$combined_post_process_STAR___73112.invoke(query_processor.clj:262)",
        "query_processor$fn__73106$combined_pre_process__73107$combined_pre_process_STAR___73108.invoke(query_processor.clj:259)",
        "query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__66444.invoke(fetch_source_query.clj:303)",
        "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872$fn__71876.invoke(resolve_database_and_driver.clj:77)",
        "driver$do_with_driver.invokeStatic(driver.clj:97)",
        "driver$do_with_driver.invoke(driver.clj:92)",
        "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872.invoke(resolve_database_and_driver.clj:76)",
        "query_processor.middleware.store$initialize_store$fn__67050$fn__67051.invoke(store.clj:14)",
        "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:169)",
        "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
        "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:158)",
        "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
        "query_processor.middleware.store$initialize_store$fn__67050.invoke(store.clj:13)",
        "query_processor.middleware.resolve_database_and_driver$resolve_database$fn__71869.invoke(resolve_database_and_driver.clj:60)",
        "query_processor.middleware.normalize_query$normalize$fn__72174.invoke(normalize_query.clj:38)",
        "query_processor.middleware.enterprise$fn__71809$handle_audit_app_internal_queries__71810$fn__71812.invoke(enterprise.clj:96)",
        "query_processor.middleware.enterprise$handle_audit_app_internal_queries_middleware$fn__71820.invoke(enterprise.clj:103)",
        "query_processor.middleware.constraints$mark_needs_default_userland_constraints$fn__70935.invoke(constraints.clj:104)",
        "query_processor.middleware.process_userland_query$process_userland_query$fn__72105.invoke(process_userland_query.clj:156)",
        "query_processor.middleware.catch_exceptions$catch_exceptions$fn__72706.invoke(catch_exceptions.clj:171)",
        "query_processor.reducible$async_qp$qp_STAR___62605$thunk__62607.invoke(reducible.clj:126)",
        "query_processor.reducible$async_qp$qp_STAR___62605.invoke(reducible.clj:132)",
        "query_processor.reducible$sync_qp$qp_STAR___62617.doInvoke(reducible.clj:153)",
        "query_processor$process_userland_query.invokeStatic(query_processor.clj:402)",
        "query_processor$process_userland_query.doInvoke(query_processor.clj:398)",
        "query_processor$process_query_and_save_execution_BANG_.invokeStatic(query_processor.clj:416)",
        "query_processor$process_query_and_save_execution_BANG_.invoke(query_processor.clj:406)",
        "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invokeStatic(query_processor.clj:431)",
        "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invoke(query_processor.clj:421)",
        "api.dataset$run_query_async$fn__93567.invoke(dataset.clj:79)",
        "query_processor.streaming$streaming_response_STAR_$fn__53135$fn__53137.invoke(streaming.clj:168)",
        "query_processor.streaming$streaming_response_STAR_$fn__53135.invoke(streaming.clj:167)",
        "async.streaming_response$do_f_STAR_.invokeStatic(streaming_response.clj:69)",
        "async.streaming_response$do_f_STAR_.invoke(streaming_response.clj:67)",
        "async.streaming_response$do_f_async$task__43750.invoke(streaming_response.clj:88)"
      ],
      "card_id": null,
      "context": "ad-hoc",
      "error": "ERROR: relation \"transactionrecords\" does not exist",
      "row_count": 0,
      "running_time": 0,
      "data": {
        "rows": [],
        "cols": []
      }
    },
    "row_count": 0,
    "query": "SELECT\n    CASE channel\n        WHEN '0' THEN 'POS'\n        WHEN '1' THEN 'Online Store'\n        WHEN '3' THEN 'QR Order'\n        WHEN '10' THEN 'GrabFood'\n        WHEN '11' THEN 'ShopeeFood'\n        WHEN '12' THEN 'FoodPanda'\n        WHEN '13' THEN 'Beep'\n        ELSE 'Other'\n    END AS channel_name,\n    COUNT(DISTINCT receiptnumber) AS transaction_count,\n    SUM(totalamount) AS gmv\nFROM transactionrecords\nWHERE business = 'actual_business_name'\n    AND isdeleted != true\n    AND type = 'Sale'\n    AND createdtime >= '2025-01-01' AND createdtime < '2025-02-01'\nGROUP BY channel\nORDER BY gmv DESC"
  },
  "timestamp": "2025-07-31T01:12:13.039444"
}