{
  "file_name": "03_engage_freetrial.sql",
  "business_question": "I need to see an activity funnel for all Malaysian merchants who started an Engage trial this year. For each merchant, show their new customer acquisition momentum in the two weeks leading up to the trial start, and on how many days they sent automated SMS campaigns during the first 30 days of their trial.",
  "golden_sql": "-- I need to see an activity funnel for all Malaysian merchants who started an Engage trial this year. For each merchant, show their new customer acquisition momentum in the two weeks leading up to the trial start, and on how many days they sent automated SMS campaigns during the first 30 days of their trial.\n\nselect distinct\n    b.name,\n    b._id,\n    b.country,\n    b.subscriptionstatus,\n    dateadd(hour,8,b.campaigntrialstartdate) as engage_trial_start_date,\n    count(distinct case when c.createdtime > dateadd(day,-14,b.campaigntrialstartdate) and c.createdtime <= dateadd(day,-7,b.campaigntrialstartdate) then c.\"_id\" end) as p14d_newcust,\n    count(distinct case when c.createdtime > dateadd(day,-7,b.campaigntrialstartdate) and c.createdtime <= b.campaigntrialstartdate then c.\"_id\" end) as p7d_newcust,\n    count(distinct case when sms.\"day\" > engage_trial_start_date and sms.\"day\" <= dateadd(day,30,engage_trial_start_date) then sms.\"day\" end) as auto_sms_sent_days_within_trial\n    /*case \n        when p14d_newcust >= 10 and p17d_newcust >= 10 then 1\n        else 0\n    end as product_qualified_lead*/\n    \nfrom storehub_mongo.businesses b\n\nleft join transformations.mask_customers c\n    on b.name = c.business\n    \nleft join (\n    select distinct\n    cj.business,\n    cast(dateadd(hour,8,cj.createdtime) as date) as \"day\"\n    --count(distinct case when cj.globalcampaigninformationid <> '64d4d6b30f005152c96d10cb' then cj._id end) as automated_sms_sent\n    \n    from storehub_mongo.campaignjobs cj\n    \n    where cj.createdtime >= '2022-09-23'\n        and cj.pushstatus = 'SUCCESS'\n        \n    --group by 1,2\n    ) sms\n    on sms.business = b.name\n\nwhere CHARINDEX('internal', b.planid) = 0 \n    and CHARINDEX('@storehub.com', b.email) = 0\n    and b.campaigntrialstartdate is not null\n    and b.country in ('MY')\n    and c.createdtime >= '2022-12-14' -- 2 weeks before the earliest recorded Engage trial start date\n    and b.campaigntrialstartdate >= '2025-01-01'\n    \ngroup by 1,2,3,4,5\norder by 5 ASC\n",
  "ai_generated_sql": "WITH trial_merchants AS (\n  SELECT\n    _id AS merchant_id,\n    country,\n    DATE_TRUNC('year', createdtime) AS trial_year\n  FROM businesses\n  WHERE\n    business = 'actual_business_name'\n    AND isdeleted != true\n    AND subscriptionstatus = 'Trial'\n    AND country = 'MY'\n    AND DATE_TRUNC('year', createdtime) = DATE_TRUNC('year', CURRENT_DATE)\n), customer_acquisition AS (\n  SELECT\n    tm.merchant_id,\n    COUNT(DISTINCT c._id) AS new_customers\n  FROM trial_merchants tm\n  JOIN customers c ON tm.merchant_id = c.business\n  WHERE\n    c.business = 'actual_business_name'\n    AND c.isdeleted != true\n    AND c.createdtime BETWEEN tm.createdtime - INTERVAL '2 weeks' AND tm.createdtime\n  GROUP BY\n    tm.merchant_id\n), sms_campaign_days AS (\n  SELECT\n    tm.merchant_id,\n    COUNT(DISTINCT DATE(ca.createdtime)) AS sms_days\n  FROM trial_merchants tm\n  JOIN campaigns ca ON tm.merchant_id = ca.business\n  WHERE\n    ca.business = 'actual_business_name'\n    AND ca.channel = 'SMS'\n    AND ca.createdtime BETWEEN tm.createdtime AND tm.createdtime + INTERVAL '30 days'\n  GROUP BY\n    tm.merchant_id\n)\nSELECT\n  tm.merchant_id,\n  ca.new_customers,\n  COALESCE(scd.sms_days, 0) AS sms_campaign_days\nFROM trial_merchants tm\nLEFT JOIN customer_acquisition ca ON tm.merchant_id = ca.merchant_id\nLEFT JOIN sms_campaign_days scd ON tm.merchant_id = scd.merchant_id\nWHERE\n  tm.business = 'actual_business_name'\nORDER BY\n  tm.merchant_id",
  "framework_context_length": 162010,
  "framework_files_loaded": [
    "semantic_context",
    "data_catalog",
    "business_rules",
    "query_patterns",
    "value_mappings",
    "query_cookbook"
  ],
  "api_result": {
    "success": true,
    "status_code": 202,
    "data": {
      "database_id": 2,
      "started_at": "2025-07-30T17:11:30.205029Z",
      "via": [
        {
          "status": "failed",
          "class": "class clojure.lang.ExceptionInfo",
          "error": "Error executing query: ERROR: relation \"businesses\" does not exist",
          "stacktrace": [
            "--> driver.sql_jdbc.execute$execute_reducible_query$fn__79031$fn__79032.invoke(execute.clj:701)",
            "driver.sql_jdbc.execute$execute_reducible_query$fn__79031.invoke(execute.clj:698)",
            "driver.redshift$fn__119979$fn__119981.invoke(redshift.clj:138)",
            "driver.sql_jdbc.execute$do_with_resolved_connection.invokeStatic(execute.clj:334)",
            "driver.sql_jdbc.execute$do_with_resolved_connection.invoke(execute.clj:317)",
            "driver.redshift$fn__119979.invokeStatic(redshift.clj:123)",
            "driver.redshift$fn__119979.invoke(redshift.clj:121)",
            "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:692)",
            "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
            "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:689)",
            "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
            "driver.sql_jdbc$fn__106344.invokeStatic(sql_jdbc.clj:78)",
            "driver.sql_jdbc$fn__106344.invoke(sql_jdbc.clj:76)",
            "query_processor.context$executef.invokeStatic(context.clj:60)",
            "query_processor.context$executef.invoke(context.clj:49)",
            "query_processor.context.default$default_runf.invokeStatic(default.clj:44)",
            "query_processor.context.default$default_runf.invoke(default.clj:42)",
            "query_processor.context$runf.invokeStatic(context.clj:46)",
            "query_processor.context$runf.invoke(context.clj:40)",
            "query_processor.reducible$identity_qp.invokeStatic(reducible.clj:39)",
            "query_processor.reducible$identity_qp.invoke(reducible.clj:36)",
            "query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___71961.invoke(cache.clj:229)",
            "query_processor.middleware.permissions$check_query_permissions$fn__66347.invoke(permissions.clj:140)",
            "query_processor.middleware.enterprise$check_download_permissions_middleware$fn__71782.invoke(enterprise.clj:51)",
            "query_processor.middleware.enterprise$maybe_apply_column_level_perms_check_middleware$fn__71792.invoke(enterprise.clj:64)",
            "query_processor.middleware.mbql_to_native$mbql__GT_native$fn__71224.invoke(mbql_to_native.clj:24)",
            "query_processor$fn__73106$combined_post_process__73111$combined_post_process_STAR___73112.invoke(query_processor.clj:262)",
            "query_processor$fn__73106$combined_pre_process__73107$combined_pre_process_STAR___73108.invoke(query_processor.clj:259)",
            "query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__66444.invoke(fetch_source_query.clj:303)",
            "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872$fn__71876.invoke(resolve_database_and_driver.clj:77)",
            "driver$do_with_driver.invokeStatic(driver.clj:97)",
            "driver$do_with_driver.invoke(driver.clj:92)",
            "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872.invoke(resolve_database_and_driver.clj:76)",
            "query_processor.middleware.store$initialize_store$fn__67050$fn__67051.invoke(store.clj:14)",
            "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:169)",
            "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
            "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:158)",
            "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
            "query_processor.middleware.store$initialize_store$fn__67050.invoke(store.clj:13)",
            "query_processor.middleware.resolve_database_and_driver$resolve_database$fn__71869.invoke(resolve_database_and_driver.clj:60)",
            "query_processor.middleware.normalize_query$normalize$fn__72174.invoke(normalize_query.clj:38)",
            "query_processor.middleware.enterprise$fn__71809$handle_audit_app_internal_queries__71810$fn__71812.invoke(enterprise.clj:96)",
            "query_processor.middleware.enterprise$handle_audit_app_internal_queries_middleware$fn__71820.invoke(enterprise.clj:103)",
            "query_processor.middleware.constraints$mark_needs_default_userland_constraints$fn__70935.invoke(constraints.clj:104)",
            "query_processor.middleware.process_userland_query$process_userland_query$fn__72105.invoke(process_userland_query.clj:156)",
            "query_processor.middleware.catch_exceptions$catch_exceptions$fn__72706.invoke(catch_exceptions.clj:171)",
            "query_processor.reducible$async_qp$qp_STAR___62605$thunk__62607.invoke(reducible.clj:126)",
            "query_processor.reducible$async_qp$qp_STAR___62605.invoke(reducible.clj:132)",
            "query_processor.reducible$sync_qp$qp_STAR___62617.doInvoke(reducible.clj:153)",
            "query_processor$process_userland_query.invokeStatic(query_processor.clj:402)",
            "query_processor$process_userland_query.doInvoke(query_processor.clj:398)",
            "query_processor$process_query_and_save_execution_BANG_.invokeStatic(query_processor.clj:416)",
            "query_processor$process_query_and_save_execution_BANG_.invoke(query_processor.clj:406)",
            "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invokeStatic(query_processor.clj:431)",
            "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invoke(query_processor.clj:421)",
            "api.dataset$run_query_async$fn__93567.invoke(dataset.clj:79)",
            "query_processor.streaming$streaming_response_STAR_$fn__53135$fn__53137.invoke(streaming.clj:168)",
            "query_processor.streaming$streaming_response_STAR_$fn__53135.invoke(streaming.clj:167)",
            "async.streaming_response$do_f_STAR_.invokeStatic(streaming_response.clj:69)",
            "async.streaming_response$do_f_STAR_.invoke(streaming_response.clj:67)",
            "async.streaming_response$do_f_async$task__43750.invoke(streaming_response.clj:88)"
          ],
          "error_type": "invalid-query",
          "ex-data": {
            "driver": "redshift",
            "sql": [
              "-- /* partner: \"metabase\", {\"dashboard_id\":null,\"chart_id\":null,\"optional_user_id\":477,\"optional_account_id\":\"0a0eeb39-1c3d-4f8f-a7cc-96bace83599a\",\"filter_values\":{}} */ Metabase:: userID: 477 queryType: native queryHash: a2534d7e9ba93f0a9e34c048415f861e881183e571fa78ed8ed74e133011e32b",
              "WITH trial_merchants AS (",
              "  SELECT",
              "    _id AS merchant_id,",
              "    country,",
              "    DATE_TRUNC('year', createdtime) AS trial_year",
              "  FROM",
              "    businesses",
              "  WHERE",
              "    business = 'actual_business_name'",
              "    AND isdeleted != true",
              "    AND subscriptionstatus = 'Trial'",
              "    AND country = 'MY'",
              "    AND DATE_TRUNC('year', createdtime) = DATE_TRUNC('year', CURRENT_DATE)",
              "),",
              "customer_acquisition AS (",
              "  SELECT",
              "    tm.merchant_id,",
              "    COUNT(DISTINCT c._id) AS new_customers",
              "  FROM",
              "    trial_merchants tm",
              "    JOIN customers c ON tm.merchant_id = c.business",
              "  WHERE",
              "    c.business = 'actual_business_name'",
              "    AND c.isdeleted != true",
              "    AND c.createdtime BETWEEN tm.createdtime - INTERVAL '2 weeks'",
              "    AND tm.createdtime",
              "  GROUP BY",
              "    tm.merchant_id",
              "),",
              "sms_campaign_days AS (",
              "  SELECT",
              "    tm.merchant_id,",
              "    COUNT(DISTINCT DATE(ca.createdtime)) AS sms_days",
              "  FROM",
              "    trial_merchants tm",
              "    JOIN campaigns ca ON tm.merchant_id = ca.business",
              "  WHERE",
              "    ca.business = 'actual_business_name'",
              "    AND ca.channel = 'SMS'",
              "    AND ca.createdtime BETWEEN tm.createdtime",
              "    AND tm.createdtime + INTERVAL '30 days'",
              "  GROUP BY",
              "    tm.merchant_id",
              ")",
              "SELECT",
              "  tm.merchant_id,",
              "  ca.new_customers,",
              "  COALESCE(scd.sms_days, 0) AS sms_campaign_days",
              "FROM",
              "  trial_merchants tm",
              "  LEFT JOIN customer_acquisition ca ON tm.merchant_id = ca.merchant_id",
              "  LEFT JOIN sms_campaign_days scd ON tm.merchant_id = scd.merchant_id",
              "WHERE",
              "  tm.business = 'actual_business_name'",
              "ORDER BY",
              "  tm.merchant_id"
            ],
            "params": null,
            "type": "invalid-query"
          }
        }
      ],
      "action_id": null,
      "state": "42P01",
      "error_type": "invalid-query",
      "json_query": {
        "database": 2,
        "type": "native",
        "native": {
          "query": "WITH trial_merchants AS (\n  SELECT\n    _id AS merchant_id,\n    country,\n    DATE_TRUNC('year', createdtime) AS trial_year\n  FROM businesses\n  WHERE\n    business = 'actual_business_name'\n    AND isdeleted != true\n    AND subscriptionstatus = 'Trial'\n    AND country = 'MY'\n    AND DATE_TRUNC('year', createdtime) = DATE_TRUNC('year', CURRENT_DATE)\n), customer_acquisition AS (\n  SELECT\n    tm.merchant_id,\n    COUNT(DISTINCT c._id) AS new_customers\n  FROM trial_merchants tm\n  JOIN customers c ON tm.merchant_id = c.business\n  WHERE\n    c.business = 'actual_business_name'\n    AND c.isdeleted != true\n    AND c.createdtime BETWEEN tm.createdtime - INTERVAL '2 weeks' AND tm.createdtime\n  GROUP BY\n    tm.merchant_id\n), sms_campaign_days AS (\n  SELECT\n    tm.merchant_id,\n    COUNT(DISTINCT DATE(ca.createdtime)) AS sms_days\n  FROM trial_merchants tm\n  JOIN campaigns ca ON tm.merchant_id = ca.business\n  WHERE\n    ca.business = 'actual_business_name'\n    AND ca.channel = 'SMS'\n    AND ca.createdtime BETWEEN tm.createdtime AND tm.createdtime + INTERVAL '30 days'\n  GROUP BY\n    tm.merchant_id\n)\nSELECT\n  tm.merchant_id,\n  ca.new_customers,\n  COALESCE(scd.sms_days, 0) AS sms_campaign_days\nFROM trial_merchants tm\nLEFT JOIN customer_acquisition ca ON tm.merchant_id = ca.merchant_id\nLEFT JOIN sms_campaign_days scd ON tm.merchant_id = scd.merchant_id\nWHERE\n  tm.business = 'actual_business_name'\nORDER BY\n  tm.merchant_id"
        },
        "middleware": {
          "js-int-to-string?": true,
          "add-default-userland-constraints?": true
        }
      },
      "status": "failed",
      "class": "class com.amazon.redshift.util.RedshiftException",
      "stacktrace": [
        "com.amazon.redshift.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2613)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResultsOnThread(QueryExecutorImpl.java:2281)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1886)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1878)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:375)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeInternal(RedshiftStatementImpl.java:515)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.execute(RedshiftStatementImpl.java:436)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeWithFlags(RedshiftStatementImpl.java:377)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeCachedSql(RedshiftStatementImpl.java:363)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeWithFlags(RedshiftStatementImpl.java:340)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.execute(RedshiftStatementImpl.java:330)",
        "com.mchange.v2.c3p0.impl.NewProxyStatement.execute(NewProxyStatement.java:75)",
        "--> driver.sql_jdbc.execute$fn__78950.invokeStatic(execute.clj:560)",
        "driver.sql_jdbc.execute$fn__78950.invoke(execute.clj:558)",
        "driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invokeStatic(execute.clj:568)",
        "driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invoke(execute.clj:565)",
        "driver.sql_jdbc.execute$execute_reducible_query$fn__79031$fn__79032.invoke(execute.clj:699)",
        "driver.sql_jdbc.execute$execute_reducible_query$fn__79031.invoke(execute.clj:698)",
        "driver.redshift$fn__119979$fn__119981.invoke(redshift.clj:138)",
        "driver.sql_jdbc.execute$do_with_resolved_connection.invokeStatic(execute.clj:334)",
        "driver.sql_jdbc.execute$do_with_resolved_connection.invoke(execute.clj:317)",
        "driver.redshift$fn__119979.invokeStatic(redshift.clj:123)",
        "driver.redshift$fn__119979.invoke(redshift.clj:121)",
        "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:692)",
        "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
        "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:689)",
        "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
        "driver.sql_jdbc$fn__106344.invokeStatic(sql_jdbc.clj:78)",
        "driver.sql_jdbc$fn__106344.invoke(sql_jdbc.clj:76)",
        "query_processor.context$executef.invokeStatic(context.clj:60)",
        "query_processor.context$executef.invoke(context.clj:49)",
        "query_processor.context.default$default_runf.invokeStatic(default.clj:44)",
        "query_processor.context.default$default_runf.invoke(default.clj:42)",
        "query_processor.context$runf.invokeStatic(context.clj:46)",
        "query_processor.context$runf.invoke(context.clj:40)",
        "query_processor.reducible$identity_qp.invokeStatic(reducible.clj:39)",
        "query_processor.reducible$identity_qp.invoke(reducible.clj:36)",
        "query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___71961.invoke(cache.clj:229)",
        "query_processor.middleware.permissions$check_query_permissions$fn__66347.invoke(permissions.clj:140)",
        "query_processor.middleware.enterprise$check_download_permissions_middleware$fn__71782.invoke(enterprise.clj:51)",
        "query_processor.middleware.enterprise$maybe_apply_column_level_perms_check_middleware$fn__71792.invoke(enterprise.clj:64)",
        "query_processor.middleware.mbql_to_native$mbql__GT_native$fn__71224.invoke(mbql_to_native.clj:24)",
        "query_processor$fn__73106$combined_post_process__73111$combined_post_process_STAR___73112.invoke(query_processor.clj:262)",
        "query_processor$fn__73106$combined_pre_process__73107$combined_pre_process_STAR___73108.invoke(query_processor.clj:259)",
        "query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__66444.invoke(fetch_source_query.clj:303)",
        "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872$fn__71876.invoke(resolve_database_and_driver.clj:77)",
        "driver$do_with_driver.invokeStatic(driver.clj:97)",
        "driver$do_with_driver.invoke(driver.clj:92)",
        "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872.invoke(resolve_database_and_driver.clj:76)",
        "query_processor.middleware.store$initialize_store$fn__67050$fn__67051.invoke(store.clj:14)",
        "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:169)",
        "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
        "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:158)",
        "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
        "query_processor.middleware.store$initialize_store$fn__67050.invoke(store.clj:13)",
        "query_processor.middleware.resolve_database_and_driver$resolve_database$fn__71869.invoke(resolve_database_and_driver.clj:60)",
        "query_processor.middleware.normalize_query$normalize$fn__72174.invoke(normalize_query.clj:38)",
        "query_processor.middleware.enterprise$fn__71809$handle_audit_app_internal_queries__71810$fn__71812.invoke(enterprise.clj:96)",
        "query_processor.middleware.enterprise$handle_audit_app_internal_queries_middleware$fn__71820.invoke(enterprise.clj:103)",
        "query_processor.middleware.constraints$mark_needs_default_userland_constraints$fn__70935.invoke(constraints.clj:104)",
        "query_processor.middleware.process_userland_query$process_userland_query$fn__72105.invoke(process_userland_query.clj:156)",
        "query_processor.middleware.catch_exceptions$catch_exceptions$fn__72706.invoke(catch_exceptions.clj:171)",
        "query_processor.reducible$async_qp$qp_STAR___62605$thunk__62607.invoke(reducible.clj:126)",
        "query_processor.reducible$async_qp$qp_STAR___62605.invoke(reducible.clj:132)",
        "query_processor.reducible$sync_qp$qp_STAR___62617.doInvoke(reducible.clj:153)",
        "query_processor$process_userland_query.invokeStatic(query_processor.clj:402)",
        "query_processor$process_userland_query.doInvoke(query_processor.clj:398)",
        "query_processor$process_query_and_save_execution_BANG_.invokeStatic(query_processor.clj:416)",
        "query_processor$process_query_and_save_execution_BANG_.invoke(query_processor.clj:406)",
        "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invokeStatic(query_processor.clj:431)",
        "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invoke(query_processor.clj:421)",
        "api.dataset$run_query_async$fn__93567.invoke(dataset.clj:79)",
        "query_processor.streaming$streaming_response_STAR_$fn__53135$fn__53137.invoke(streaming.clj:168)",
        "query_processor.streaming$streaming_response_STAR_$fn__53135.invoke(streaming.clj:167)",
        "async.streaming_response$do_f_STAR_.invokeStatic(streaming_response.clj:69)",
        "async.streaming_response$do_f_STAR_.invoke(streaming_response.clj:67)",
        "async.streaming_response$do_f_async$task__43750.invoke(streaming_response.clj:88)"
      ],
      "card_id": null,
      "context": "ad-hoc",
      "error": "ERROR: relation \"businesses\" does not exist",
      "row_count": 0,
      "running_time": 0,
      "data": {
        "rows": [],
        "cols": []
      }
    },
    "row_count": 0,
    "query": "WITH trial_merchants AS (\n  SELECT\n    _id AS merchant_id,\n    country,\n    DATE_TRUNC('year', createdtime) AS trial_year\n  FROM businesses\n  WHERE\n    business = 'actual_business_name'\n    AND isdeleted != true\n    AND subscriptionstatus = 'Trial'\n    AND country = 'MY'\n    AND DATE_TRUNC('year', createdtime) = DATE_TRUNC('year', CURRENT_DATE)\n), customer_acquisition AS (\n  SELECT\n    tm.merchant_id,\n    COUNT(DISTINCT c._id) AS new_customers\n  FROM trial_merchants tm\n  JOIN customers c ON tm.merchant_id = c.business\n  WHERE\n    c.business = 'actual_business_name'\n    AND c.isdeleted != true\n    AND c.createdtime BETWEEN tm.createdtime - INTERVAL '2 weeks' AND tm.createdtime\n  GROUP BY\n    tm.merchant_id\n), sms_campaign_days AS (\n  SELECT\n    tm.merchant_id,\n    COUNT(DISTINCT DATE(ca.createdtime)) AS sms_days\n  FROM trial_merchants tm\n  JOIN campaigns ca ON tm.merchant_id = ca.business\n  WHERE\n    ca.business = 'actual_business_name'\n    AND ca.channel = 'SMS'\n    AND ca.createdtime BETWEEN tm.createdtime AND tm.createdtime + INTERVAL '30 days'\n  GROUP BY\n    tm.merchant_id\n)\nSELECT\n  tm.merchant_id,\n  ca.new_customers,\n  COALESCE(scd.sms_days, 0) AS sms_campaign_days\nFROM trial_merchants tm\nLEFT JOIN customer_acquisition ca ON tm.merchant_id = ca.merchant_id\nLEFT JOIN sms_campaign_days scd ON tm.merchant_id = scd.merchant_id\nWHERE\n  tm.business = 'actual_business_name'\nORDER BY\n  tm.merchant_id"
  },
  "timestamp": "2025-07-31T01:11:30.272478"
}