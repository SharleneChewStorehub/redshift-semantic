{
  "file_name": "06_cashback_utilisation.sql",
  "business_question": "How effective is the cashback program at driving repeat business from our QR ordering feature in Malaysia? I need to see the cashback utilization rate for Beep orders over the last 12 months, with the total amounts claimed and redeemed standardized in SGD.",
  "golden_sql": "-- How effective is the cashback program at driving repeat business from our QR ordering feature in Malaysia? I need to see the cashback utilization rate for Beep orders over the last 12 months, with the total amounts claimed and redeemed standardized in SGD.\n\nselect \n    date_trunc('month', cast(dateadd(hour,8,lc.eventtime) as date)) as month,\n    --count(distinct lc.receiptnumber) as \"claimed cashback #\",\n    --count(distinct tr.receiptnumber) as bdtxn_count,\n    --count(distinct tr.consumerid) as \"claimed cashback unique consumer #\",\n    sum(case\n            when lc.eventtype = 'earned' and b.country = 'MY' then lc.amount * 0.31\n            when lc.eventtype = 'earned' and b.country = 'PH' then lc.amount * 0.025\n            when lc.eventtype = 'earned' and b.country = 'TH' then lc.amount * 0.039\n            when lc.eventtype = 'earned' and b.country = 'SG' then lc.amount\n        end) as \"claimed cashback amount (SGD)\",\n    -sum(case\n            when lc.eventtype = 'expense' and b.country = 'MY' then lc.amount * 0.31\n            when lc.eventtype = 'expense' and b.country = 'PH' then lc.amount * 0.025\n            when lc.eventtype = 'expense' and b.country = 'TH' then lc.amount * 0.03\n            when lc.eventtype = 'expense' and b.country = 'SG' then lc.amount\n        end) as \"redeemed cashback amount (SGD)\",\n    \"redeemed cashback amount (SGD)\" / \"claimed cashback amount (SGD)\" as \"cashback utilisation rate\"\n    --cast(\"claimed cashback amount (SGD)\" as float) / cast(\"claimed cashback unique consumer #\" as float) as \"avg claimed cashback amount per consumer (SGD)\"\n        \nfrom storehub_mongo.loyaltychangelogs lc\n\nleft join transformations.mask_businesses b\n    on lc.business = b.name\n\nleft join storehub_mongo.transactionrecords tr\n    on lc.receiptnumber = tr.receiptnumber\n    \nwhere lc.eventtype in ('earned','expense')\n    and lc.rewardtype = 'cashback' \n    and lc.source = 'QR_ORDERING'\n    and CHARINDEX('internal', b.planid) = 0 \n    and CHARINDEX('@storehub.com', b.email) = 0\n    and tr.channel = 3 \n    and tr.shippingtype in ('delivery', 'pickup', 'dineIn', 'takeaway') \n    and tr.status not in ('cancelled', 'created', 'failed', 'paymentCancelled', 'pendingPayment', 'pendingVerification')\n    and b.country in ('MY')\n    and lc.eventtime BETWEEN dateadd(hour,-8,date_trunc('month', cast(getdate() + INTERVAL '-12 month' as date))) and dateadd(hour,16,cast(getdate() as date))\n\n\ngroup by 1\norder by 1 DESC\n",
  "ai_generated_sql": "WITH CashbackTransactions AS (\n  SELECT\n    t.receiptnumber,\n    t.createdtime,\n    t.business,\n    t.storeid,\n    t.customerid\n  FROM transactionrecords t\n  WHERE\n    t.business = 'actual_business_name'\n    AND (\n      t.isdeleted != TRUE\n      OR t.isdeleted IS NULL\n    )\n    AND t.type IN ('Sale', 'Return')\n    AND t.channel = '3'\n    AND t.createdtime >= CURRENT_DATE - INTERVAL '12 months'\n    AND EXISTS (\n      SELECT\n        1\n      FROM transactionrecords__loyaltydiscounts ld\n      WHERE\n        ld.transactionrecords_foreignkey = t.receiptnumber\n    )\n), CashbackClaims AS (\n  SELECT\n    lc.customerid,\n    SUM(\n      CASE\n        WHEN lc.eventtype = 'expense'\n        THEN ABS(lc.amount)\n        ELSE 0\n      END\n    ) AS total_cashback_claimed_myr\n  FROM loyaltychangelogs lc\n  JOIN CashbackTransactions ct ON lc.customerid = ct.customerid\n  WHERE\n    lc.business = 'actual_business_name'\n    AND lc.eventtype = 'expense'\n    AND lc.createdtime >= CURRENT_DATE - INTERVAL '12 months'\n  GROUP BY\n    lc.customerid\n), CashbackRedemptions AS (\n  SELECT\n    lc.customerid,\n    SUM(\n      CASE\n        WHEN lc.eventtype = 'expense'\n        THEN ABS(lc.amount)\n        ELSE 0\n      END\n    ) AS total_cashback_redeemed_myr\n  FROM loyaltychangelogs lc\n  JOIN CashbackTransactions ct ON lc.customerid = ct.customerid\n  WHERE\n    lc.business = 'actual_business_name'\n    AND lc.eventtype = 'expense'\n    AND lc.createdtime >= CURRENT_DATE - INTERVAL '12 months'\n  GROUP BY\n    lc.customerid\n), RepeatCustomers AS (\n  SELECT\n    ct.customerid,\n    COUNT(DISTINCT ct.receiptnumber) AS total_transactions\n  FROM CashbackTransactions ct\n  WHERE\n    ct.business = 'actual_business_name'\n    AND ct.createdtime >= CURRENT_DATE - INTERVAL '12 months'\n  GROUP BY\n    ct.customerid\n  HAVING\n    COUNT(DISTINCT ct.receiptnumber) > 1\n)\nSELECT\n  COUNT(DISTINCT rc.customerid) AS total_repeat_customers,\n  SUM(\n    COALESCE(cc.total_cashback_claimed_myr, 0) * (\n      CASE\n        WHEN b.currency = 'MYR'\n        THEN 0.32\n        ELSE 1\n      END\n    )\n  ) AS total_cashback_claimed_sgd,\n  SUM(\n    COALESCE(cr.total_cashback_redeemed_myr, 0) * (\n      CASE\n        WHEN b.currency = 'MYR'\n        THEN 0.32\n        ELSE 1\n      END\n    )\n  ) AS total_cashback_redeemed_sgd,\n  CASE\n    WHEN COUNT(DISTINCT rc.customerid) > 0\n    THEN ROUND(\n      (\n        SUM(\n          COALESCE(cr.total_cashback_redeemed_myr, 0) * (\n            CASE\n              WHEN b.currency = 'MYR'\n              THEN 0.32\n              ELSE 1\n            END\n          )\n        ) / SUM(\n          COALESCE(cc.total_cashback_claimed_myr, 0) * (\n            CASE\n              WHEN b.currency = 'MYR'\n              THEN 0.32\n              ELSE 1\n            END\n          )\n        )\n      ) * 100,\n      2\n    )\n    ELSE 0\n  END AS cashback_utilization_rate\nFROM RepeatCustomers rc\nLEFT JOIN CashbackClaims cc ON rc.customerid = cc.customerid\nLEFT JOIN CashbackRedemptions cr ON rc.customerid = cr.customerid\nLEFT JOIN businesses b ON b.business = 'actual_business_name';",
  "framework_context_length": 162010,
  "framework_files_loaded": [
    "semantic_context",
    "data_catalog",
    "business_rules",
    "query_patterns",
    "value_mappings",
    "query_cookbook"
  ],
  "api_result": {
    "success": true,
    "status_code": 202,
    "data": {
      "database_id": 2,
      "started_at": "2025-07-30T17:11:42.386829Z",
      "via": [
        {
          "status": "failed",
          "class": "class clojure.lang.ExceptionInfo",
          "error": "Error executing query: ERROR: relation \"transactionrecords\" does not exist",
          "stacktrace": [
            "--> driver.sql_jdbc.execute$execute_reducible_query$fn__79031$fn__79032.invoke(execute.clj:701)",
            "driver.sql_jdbc.execute$execute_reducible_query$fn__79031.invoke(execute.clj:698)",
            "driver.redshift$fn__119979$fn__119981.invoke(redshift.clj:138)",
            "driver.sql_jdbc.execute$do_with_resolved_connection.invokeStatic(execute.clj:334)",
            "driver.sql_jdbc.execute$do_with_resolved_connection.invoke(execute.clj:317)",
            "driver.redshift$fn__119979.invokeStatic(redshift.clj:123)",
            "driver.redshift$fn__119979.invoke(redshift.clj:121)",
            "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:692)",
            "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
            "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:689)",
            "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
            "driver.sql_jdbc$fn__106344.invokeStatic(sql_jdbc.clj:78)",
            "driver.sql_jdbc$fn__106344.invoke(sql_jdbc.clj:76)",
            "query_processor.context$executef.invokeStatic(context.clj:60)",
            "query_processor.context$executef.invoke(context.clj:49)",
            "query_processor.context.default$default_runf.invokeStatic(default.clj:44)",
            "query_processor.context.default$default_runf.invoke(default.clj:42)",
            "query_processor.context$runf.invokeStatic(context.clj:46)",
            "query_processor.context$runf.invoke(context.clj:40)",
            "query_processor.reducible$identity_qp.invokeStatic(reducible.clj:39)",
            "query_processor.reducible$identity_qp.invoke(reducible.clj:36)",
            "query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___71961.invoke(cache.clj:229)",
            "query_processor.middleware.permissions$check_query_permissions$fn__66347.invoke(permissions.clj:140)",
            "query_processor.middleware.enterprise$check_download_permissions_middleware$fn__71782.invoke(enterprise.clj:51)",
            "query_processor.middleware.enterprise$maybe_apply_column_level_perms_check_middleware$fn__71792.invoke(enterprise.clj:64)",
            "query_processor.middleware.mbql_to_native$mbql__GT_native$fn__71224.invoke(mbql_to_native.clj:24)",
            "query_processor$fn__73106$combined_post_process__73111$combined_post_process_STAR___73112.invoke(query_processor.clj:262)",
            "query_processor$fn__73106$combined_pre_process__73107$combined_pre_process_STAR___73108.invoke(query_processor.clj:259)",
            "query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__66444.invoke(fetch_source_query.clj:303)",
            "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872$fn__71876.invoke(resolve_database_and_driver.clj:77)",
            "driver$do_with_driver.invokeStatic(driver.clj:97)",
            "driver$do_with_driver.invoke(driver.clj:92)",
            "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872.invoke(resolve_database_and_driver.clj:76)",
            "query_processor.middleware.store$initialize_store$fn__67050$fn__67051.invoke(store.clj:14)",
            "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:169)",
            "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
            "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:158)",
            "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
            "query_processor.middleware.store$initialize_store$fn__67050.invoke(store.clj:13)",
            "query_processor.middleware.resolve_database_and_driver$resolve_database$fn__71869.invoke(resolve_database_and_driver.clj:60)",
            "query_processor.middleware.normalize_query$normalize$fn__72174.invoke(normalize_query.clj:38)",
            "query_processor.middleware.enterprise$fn__71809$handle_audit_app_internal_queries__71810$fn__71812.invoke(enterprise.clj:96)",
            "query_processor.middleware.enterprise$handle_audit_app_internal_queries_middleware$fn__71820.invoke(enterprise.clj:103)",
            "query_processor.middleware.constraints$mark_needs_default_userland_constraints$fn__70935.invoke(constraints.clj:104)",
            "query_processor.middleware.process_userland_query$process_userland_query$fn__72105.invoke(process_userland_query.clj:156)",
            "query_processor.middleware.catch_exceptions$catch_exceptions$fn__72706.invoke(catch_exceptions.clj:171)",
            "query_processor.reducible$async_qp$qp_STAR___62605$thunk__62607.invoke(reducible.clj:126)",
            "query_processor.reducible$async_qp$qp_STAR___62605.invoke(reducible.clj:132)",
            "query_processor.reducible$sync_qp$qp_STAR___62617.doInvoke(reducible.clj:153)",
            "query_processor$process_userland_query.invokeStatic(query_processor.clj:402)",
            "query_processor$process_userland_query.doInvoke(query_processor.clj:398)",
            "query_processor$process_query_and_save_execution_BANG_.invokeStatic(query_processor.clj:416)",
            "query_processor$process_query_and_save_execution_BANG_.invoke(query_processor.clj:406)",
            "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invokeStatic(query_processor.clj:431)",
            "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invoke(query_processor.clj:421)",
            "api.dataset$run_query_async$fn__93567.invoke(dataset.clj:79)",
            "query_processor.streaming$streaming_response_STAR_$fn__53135$fn__53137.invoke(streaming.clj:168)",
            "query_processor.streaming$streaming_response_STAR_$fn__53135.invoke(streaming.clj:167)",
            "async.streaming_response$do_f_STAR_.invokeStatic(streaming_response.clj:69)",
            "async.streaming_response$do_f_STAR_.invoke(streaming_response.clj:67)",
            "async.streaming_response$do_f_async$task__43750.invoke(streaming_response.clj:88)"
          ],
          "error_type": "invalid-query",
          "ex-data": {
            "driver": "redshift",
            "sql": [
              "-- /* partner: \"metabase\", {\"dashboard_id\":null,\"chart_id\":null,\"optional_user_id\":477,\"optional_account_id\":\"0a0eeb39-1c3d-4f8f-a7cc-96bace83599a\",\"filter_values\":{}} */ Metabase:: userID: 477 queryType: native queryHash: ba583c2bb2657933efb694c5923e7bb9fdc78d478e07710372905708719555fb",
              "WITH CashbackTransactions AS (",
              "  SELECT",
              "    t.receiptnumber,",
              "    t.createdtime,",
              "    t.business,",
              "    t.storeid,",
              "    t.customerid",
              "  FROM",
              "    transactionrecords t",
              "  WHERE",
              "    t.business = 'actual_business_name'",
              "    AND (",
              "      t.isdeleted != TRUE",
              "      OR t.isdeleted IS NULL",
              "    )",
              "    AND t.type IN ('Sale', 'Return')",
              "    AND t.channel = '3'",
              "    AND t.createdtime >= CURRENT_DATE - INTERVAL '12 months'",
              "    AND EXISTS (",
              "      SELECT",
              "        1",
              "      FROM",
              "        transactionrecords__loyaltydiscounts ld",
              "      WHERE",
              "        ld.transactionrecords_foreignkey = t.receiptnumber",
              "    )",
              "),",
              "CashbackClaims AS (",
              "  SELECT",
              "    lc.customerid,",
              "    SUM(",
              "      CASE",
              "      WHEN lc.eventtype = 'expense' THEN ABS(lc.amount)",
              "      ELSE 0 END",
              "    ) AS total_cashback_claimed_myr",
              "  FROM",
              "    loyaltychangelogs lc",
              "    JOIN CashbackTransactions ct ON lc.customerid = ct.customerid",
              "  WHERE",
              "    lc.business = 'actual_business_name'",
              "    AND lc.eventtype = 'expense'",
              "    AND lc.createdtime >= CURRENT_DATE - INTERVAL '12 months'",
              "  GROUP BY",
              "    lc.customerid",
              "),",
              "CashbackRedemptions AS (",
              "  SELECT",
              "    lc.customerid,",
              "    SUM(",
              "      CASE",
              "      WHEN lc.eventtype = 'expense' THEN ABS(lc.amount)",
              "      ELSE 0 END",
              "    ) AS total_cashback_redeemed_myr",
              "  FROM",
              "    loyaltychangelogs lc",
              "    JOIN CashbackTransactions ct ON lc.customerid = ct.customerid",
              "  WHERE",
              "    lc.business = 'actual_business_name'",
              "    AND lc.eventtype = 'expense'",
              "    AND lc.createdtime >= CURRENT_DATE - INTERVAL '12 months'",
              "  GROUP BY",
              "    lc.customerid",
              "),",
              "RepeatCustomers AS (",
              "  SELECT",
              "    ct.customerid,",
              "    COUNT(DISTINCT ct.receiptnumber) AS total_transactions",
              "  FROM",
              "    CashbackTransactions ct",
              "  WHERE",
              "    ct.business = 'actual_business_name'",
              "    AND ct.createdtime >= CURRENT_DATE - INTERVAL '12 months'",
              "  GROUP BY",
              "    ct.customerid",
              "  HAVING",
              "    COUNT(DISTINCT ct.receiptnumber) > 1",
              ")",
              "SELECT",
              "  COUNT(DISTINCT rc.customerid) AS total_repeat_customers,",
              "  SUM(",
              "    COALESCE(cc.total_cashback_claimed_myr, 0) * (",
              "      CASE",
              "      WHEN b.currency = 'MYR' THEN 0.32",
              "      ELSE 1 END",
              "    )",
              "  ) AS total_cashback_claimed_sgd,",
              "  SUM(",
              "    COALESCE(cr.total_cashback_redeemed_myr, 0) * (",
              "      CASE",
              "      WHEN b.currency = 'MYR' THEN 0.32",
              "      ELSE 1 END",
              "    )",
              "  ) AS total_cashback_redeemed_sgd,",
              "  CASE",
              "  WHEN COUNT(DISTINCT rc.customerid) > 0 THEN ROUND(",
              "    (",
              "      SUM(",
              "        COALESCE(cr.total_cashback_redeemed_myr, 0) * (",
              "          CASE",
              "          WHEN b.currency = 'MYR' THEN 0.32",
              "          ELSE 1 END",
              "        )",
              "      ) / SUM(",
              "        COALESCE(cc.total_cashback_claimed_myr, 0) * (",
              "          CASE",
              "          WHEN b.currency = 'MYR' THEN 0.32",
              "          ELSE 1 END",
              "        )",
              "      )",
              "    ) * 100,",
              "    2",
              "  )",
              "  ELSE 0 END AS cashback_utilization_rate",
              "FROM",
              "  RepeatCustomers rc",
              "  LEFT JOIN CashbackClaims cc ON rc.customerid = cc.customerid",
              "  LEFT JOIN CashbackRedemptions cr ON rc.customerid = cr.customerid",
              "  LEFT JOIN businesses b ON b.business = 'actual_business_name';"
            ],
            "params": null,
            "type": "invalid-query"
          }
        }
      ],
      "action_id": null,
      "state": "42P01",
      "error_type": "invalid-query",
      "json_query": {
        "database": 2,
        "type": "native",
        "native": {
          "query": "WITH CashbackTransactions AS (\n  SELECT\n    t.receiptnumber,\n    t.createdtime,\n    t.business,\n    t.storeid,\n    t.customerid\n  FROM transactionrecords t\n  WHERE\n    t.business = 'actual_business_name'\n    AND (\n      t.isdeleted != TRUE\n      OR t.isdeleted IS NULL\n    )\n    AND t.type IN ('Sale', 'Return')\n    AND t.channel = '3'\n    AND t.createdtime >= CURRENT_DATE - INTERVAL '12 months'\n    AND EXISTS (\n      SELECT\n        1\n      FROM transactionrecords__loyaltydiscounts ld\n      WHERE\n        ld.transactionrecords_foreignkey = t.receiptnumber\n    )\n), CashbackClaims AS (\n  SELECT\n    lc.customerid,\n    SUM(\n      CASE\n        WHEN lc.eventtype = 'expense'\n        THEN ABS(lc.amount)\n        ELSE 0\n      END\n    ) AS total_cashback_claimed_myr\n  FROM loyaltychangelogs lc\n  JOIN CashbackTransactions ct ON lc.customerid = ct.customerid\n  WHERE\n    lc.business = 'actual_business_name'\n    AND lc.eventtype = 'expense'\n    AND lc.createdtime >= CURRENT_DATE - INTERVAL '12 months'\n  GROUP BY\n    lc.customerid\n), CashbackRedemptions AS (\n  SELECT\n    lc.customerid,\n    SUM(\n      CASE\n        WHEN lc.eventtype = 'expense'\n        THEN ABS(lc.amount)\n        ELSE 0\n      END\n    ) AS total_cashback_redeemed_myr\n  FROM loyaltychangelogs lc\n  JOIN CashbackTransactions ct ON lc.customerid = ct.customerid\n  WHERE\n    lc.business = 'actual_business_name'\n    AND lc.eventtype = 'expense'\n    AND lc.createdtime >= CURRENT_DATE - INTERVAL '12 months'\n  GROUP BY\n    lc.customerid\n), RepeatCustomers AS (\n  SELECT\n    ct.customerid,\n    COUNT(DISTINCT ct.receiptnumber) AS total_transactions\n  FROM CashbackTransactions ct\n  WHERE\n    ct.business = 'actual_business_name'\n    AND ct.createdtime >= CURRENT_DATE - INTERVAL '12 months'\n  GROUP BY\n    ct.customerid\n  HAVING\n    COUNT(DISTINCT ct.receiptnumber) > 1\n)\nSELECT\n  COUNT(DISTINCT rc.customerid) AS total_repeat_customers,\n  SUM(\n    COALESCE(cc.total_cashback_claimed_myr, 0) * (\n      CASE\n        WHEN b.currency = 'MYR'\n        THEN 0.32\n        ELSE 1\n      END\n    )\n  ) AS total_cashback_claimed_sgd,\n  SUM(\n    COALESCE(cr.total_cashback_redeemed_myr, 0) * (\n      CASE\n        WHEN b.currency = 'MYR'\n        THEN 0.32\n        ELSE 1\n      END\n    )\n  ) AS total_cashback_redeemed_sgd,\n  CASE\n    WHEN COUNT(DISTINCT rc.customerid) > 0\n    THEN ROUND(\n      (\n        SUM(\n          COALESCE(cr.total_cashback_redeemed_myr, 0) * (\n            CASE\n              WHEN b.currency = 'MYR'\n              THEN 0.32\n              ELSE 1\n            END\n          )\n        ) / SUM(\n          COALESCE(cc.total_cashback_claimed_myr, 0) * (\n            CASE\n              WHEN b.currency = 'MYR'\n              THEN 0.32\n              ELSE 1\n            END\n          )\n        )\n      ) * 100,\n      2\n    )\n    ELSE 0\n  END AS cashback_utilization_rate\nFROM RepeatCustomers rc\nLEFT JOIN CashbackClaims cc ON rc.customerid = cc.customerid\nLEFT JOIN CashbackRedemptions cr ON rc.customerid = cr.customerid\nLEFT JOIN businesses b ON b.business = 'actual_business_name';"
        },
        "middleware": {
          "js-int-to-string?": true,
          "add-default-userland-constraints?": true
        }
      },
      "status": "failed",
      "class": "class com.amazon.redshift.util.RedshiftException",
      "stacktrace": [
        "com.amazon.redshift.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2613)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResultsOnThread(QueryExecutorImpl.java:2281)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1886)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1878)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:375)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeInternal(RedshiftStatementImpl.java:515)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.execute(RedshiftStatementImpl.java:436)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeWithFlags(RedshiftStatementImpl.java:377)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeCachedSql(RedshiftStatementImpl.java:363)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeWithFlags(RedshiftStatementImpl.java:340)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.execute(RedshiftStatementImpl.java:330)",
        "com.mchange.v2.c3p0.impl.NewProxyStatement.execute(NewProxyStatement.java:75)",
        "--> driver.sql_jdbc.execute$fn__78950.invokeStatic(execute.clj:560)",
        "driver.sql_jdbc.execute$fn__78950.invoke(execute.clj:558)",
        "driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invokeStatic(execute.clj:568)",
        "driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invoke(execute.clj:565)",
        "driver.sql_jdbc.execute$execute_reducible_query$fn__79031$fn__79032.invoke(execute.clj:699)",
        "driver.sql_jdbc.execute$execute_reducible_query$fn__79031.invoke(execute.clj:698)",
        "driver.redshift$fn__119979$fn__119981.invoke(redshift.clj:138)",
        "driver.sql_jdbc.execute$do_with_resolved_connection.invokeStatic(execute.clj:334)",
        "driver.sql_jdbc.execute$do_with_resolved_connection.invoke(execute.clj:317)",
        "driver.redshift$fn__119979.invokeStatic(redshift.clj:123)",
        "driver.redshift$fn__119979.invoke(redshift.clj:121)",
        "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:692)",
        "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
        "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:689)",
        "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
        "driver.sql_jdbc$fn__106344.invokeStatic(sql_jdbc.clj:78)",
        "driver.sql_jdbc$fn__106344.invoke(sql_jdbc.clj:76)",
        "query_processor.context$executef.invokeStatic(context.clj:60)",
        "query_processor.context$executef.invoke(context.clj:49)",
        "query_processor.context.default$default_runf.invokeStatic(default.clj:44)",
        "query_processor.context.default$default_runf.invoke(default.clj:42)",
        "query_processor.context$runf.invokeStatic(context.clj:46)",
        "query_processor.context$runf.invoke(context.clj:40)",
        "query_processor.reducible$identity_qp.invokeStatic(reducible.clj:39)",
        "query_processor.reducible$identity_qp.invoke(reducible.clj:36)",
        "query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___71961.invoke(cache.clj:229)",
        "query_processor.middleware.permissions$check_query_permissions$fn__66347.invoke(permissions.clj:140)",
        "query_processor.middleware.enterprise$check_download_permissions_middleware$fn__71782.invoke(enterprise.clj:51)",
        "query_processor.middleware.enterprise$maybe_apply_column_level_perms_check_middleware$fn__71792.invoke(enterprise.clj:64)",
        "query_processor.middleware.mbql_to_native$mbql__GT_native$fn__71224.invoke(mbql_to_native.clj:24)",
        "query_processor$fn__73106$combined_post_process__73111$combined_post_process_STAR___73112.invoke(query_processor.clj:262)",
        "query_processor$fn__73106$combined_pre_process__73107$combined_pre_process_STAR___73108.invoke(query_processor.clj:259)",
        "query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__66444.invoke(fetch_source_query.clj:303)",
        "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872$fn__71876.invoke(resolve_database_and_driver.clj:77)",
        "driver$do_with_driver.invokeStatic(driver.clj:97)",
        "driver$do_with_driver.invoke(driver.clj:92)",
        "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872.invoke(resolve_database_and_driver.clj:76)",
        "query_processor.middleware.store$initialize_store$fn__67050$fn__67051.invoke(store.clj:14)",
        "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:169)",
        "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
        "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:158)",
        "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
        "query_processor.middleware.store$initialize_store$fn__67050.invoke(store.clj:13)",
        "query_processor.middleware.resolve_database_and_driver$resolve_database$fn__71869.invoke(resolve_database_and_driver.clj:60)",
        "query_processor.middleware.normalize_query$normalize$fn__72174.invoke(normalize_query.clj:38)",
        "query_processor.middleware.enterprise$fn__71809$handle_audit_app_internal_queries__71810$fn__71812.invoke(enterprise.clj:96)",
        "query_processor.middleware.enterprise$handle_audit_app_internal_queries_middleware$fn__71820.invoke(enterprise.clj:103)",
        "query_processor.middleware.constraints$mark_needs_default_userland_constraints$fn__70935.invoke(constraints.clj:104)",
        "query_processor.middleware.process_userland_query$process_userland_query$fn__72105.invoke(process_userland_query.clj:156)",
        "query_processor.middleware.catch_exceptions$catch_exceptions$fn__72706.invoke(catch_exceptions.clj:171)",
        "query_processor.reducible$async_qp$qp_STAR___62605$thunk__62607.invoke(reducible.clj:126)",
        "query_processor.reducible$async_qp$qp_STAR___62605.invoke(reducible.clj:132)",
        "query_processor.reducible$sync_qp$qp_STAR___62617.doInvoke(reducible.clj:153)",
        "query_processor$process_userland_query.invokeStatic(query_processor.clj:402)",
        "query_processor$process_userland_query.doInvoke(query_processor.clj:398)",
        "query_processor$process_query_and_save_execution_BANG_.invokeStatic(query_processor.clj:416)",
        "query_processor$process_query_and_save_execution_BANG_.invoke(query_processor.clj:406)",
        "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invokeStatic(query_processor.clj:431)",
        "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invoke(query_processor.clj:421)",
        "api.dataset$run_query_async$fn__93567.invoke(dataset.clj:79)",
        "query_processor.streaming$streaming_response_STAR_$fn__53135$fn__53137.invoke(streaming.clj:168)",
        "query_processor.streaming$streaming_response_STAR_$fn__53135.invoke(streaming.clj:167)",
        "async.streaming_response$do_f_STAR_.invokeStatic(streaming_response.clj:69)",
        "async.streaming_response$do_f_STAR_.invoke(streaming_response.clj:67)",
        "async.streaming_response$do_f_async$task__43750.invoke(streaming_response.clj:88)"
      ],
      "card_id": null,
      "context": "ad-hoc",
      "error": "ERROR: relation \"transactionrecords\" does not exist",
      "row_count": 0,
      "running_time": 0,
      "data": {
        "rows": [],
        "cols": []
      }
    },
    "row_count": 0,
    "query": "WITH CashbackTransactions AS (\n  SELECT\n    t.receiptnumber,\n    t.createdtime,\n    t.business,\n    t.storeid,\n    t.customerid\n  FROM transactionrecords t\n  WHERE\n    t.business = 'actual_business_name'\n    AND (\n      t.isdeleted != TRUE\n      OR t.isdeleted IS NULL\n    )\n    AND t.type IN ('Sale', 'Return')\n    AND t.channel = '3'\n    AND t.createdtime >= CURRENT_DATE - INTERVAL '12 months'\n    AND EXISTS (\n      SELECT\n        1\n      FROM transactionrecords__loyaltydiscounts ld\n      WHERE\n        ld.transactionrecords_foreignkey = t.receiptnumber\n    )\n), CashbackClaims AS (\n  SELECT\n    lc.customerid,\n    SUM(\n      CASE\n        WHEN lc.eventtype = 'expense'\n        THEN ABS(lc.amount)\n        ELSE 0\n      END\n    ) AS total_cashback_claimed_myr\n  FROM loyaltychangelogs lc\n  JOIN CashbackTransactions ct ON lc.customerid = ct.customerid\n  WHERE\n    lc.business = 'actual_business_name'\n    AND lc.eventtype = 'expense'\n    AND lc.createdtime >= CURRENT_DATE - INTERVAL '12 months'\n  GROUP BY\n    lc.customerid\n), CashbackRedemptions AS (\n  SELECT\n    lc.customerid,\n    SUM(\n      CASE\n        WHEN lc.eventtype = 'expense'\n        THEN ABS(lc.amount)\n        ELSE 0\n      END\n    ) AS total_cashback_redeemed_myr\n  FROM loyaltychangelogs lc\n  JOIN CashbackTransactions ct ON lc.customerid = ct.customerid\n  WHERE\n    lc.business = 'actual_business_name'\n    AND lc.eventtype = 'expense'\n    AND lc.createdtime >= CURRENT_DATE - INTERVAL '12 months'\n  GROUP BY\n    lc.customerid\n), RepeatCustomers AS (\n  SELECT\n    ct.customerid,\n    COUNT(DISTINCT ct.receiptnumber) AS total_transactions\n  FROM CashbackTransactions ct\n  WHERE\n    ct.business = 'actual_business_name'\n    AND ct.createdtime >= CURRENT_DATE - INTERVAL '12 months'\n  GROUP BY\n    ct.customerid\n  HAVING\n    COUNT(DISTINCT ct.receiptnumber) > 1\n)\nSELECT\n  COUNT(DISTINCT rc.customerid) AS total_repeat_customers,\n  SUM(\n    COALESCE(cc.total_cashback_claimed_myr, 0) * (\n      CASE\n        WHEN b.currency = 'MYR'\n        THEN 0.32\n        ELSE 1\n      END\n    )\n  ) AS total_cashback_claimed_sgd,\n  SUM(\n    COALESCE(cr.total_cashback_redeemed_myr, 0) * (\n      CASE\n        WHEN b.currency = 'MYR'\n        THEN 0.32\n        ELSE 1\n      END\n    )\n  ) AS total_cashback_redeemed_sgd,\n  CASE\n    WHEN COUNT(DISTINCT rc.customerid) > 0\n    THEN ROUND(\n      (\n        SUM(\n          COALESCE(cr.total_cashback_redeemed_myr, 0) * (\n            CASE\n              WHEN b.currency = 'MYR'\n              THEN 0.32\n              ELSE 1\n            END\n          )\n        ) / SUM(\n          COALESCE(cc.total_cashback_claimed_myr, 0) * (\n            CASE\n              WHEN b.currency = 'MYR'\n              THEN 0.32\n              ELSE 1\n            END\n          )\n        )\n      ) * 100,\n      2\n    )\n    ELSE 0\n  END AS cashback_utilization_rate\nFROM RepeatCustomers rc\nLEFT JOIN CashbackClaims cc ON rc.customerid = cc.customerid\nLEFT JOIN CashbackRedemptions cr ON rc.customerid = cr.customerid\nLEFT JOIN businesses b ON b.business = 'actual_business_name';"
  },
  "timestamp": "2025-07-31T01:11:42.459706"
}