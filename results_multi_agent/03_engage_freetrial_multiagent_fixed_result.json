{
  "file_name": "03_engage_freetrial.sql",
  "timestamp": "/Users/sharlenechew/redshift-semantic",
  "a_b_test_config": {
    "use_fixed_catalog": true,
    "catalog_used": "data_catalog_fixed.json"
  },
  "business_question": "I need to see an activity funnel for all Malaysian merchants who started an Engage trial this year. For each merchant, show their new customer acquisition momentum in the two weeks leading up to the trial start, and on how many days they sent automated SMS campaigns during the first 30 days of their trial.",
  "golden_sql": "select distinct\n    b.name,\n    b._id,\n    b.country,\n    b.subscriptionstatus,\n    dateadd(hour,8,b.campaigntrialstartdate) as engage_trial_start_date,\n    count(distinct case when c.createdtime > dateadd(day,-14,b.campaigntrialstartdate) and c.createdtime <= dateadd(day,-7,b.campaigntrialstartdate) then c.\"_id\" end) as p14d_newcust,\n    count(distinct case when c.createdtime > dateadd(day,-7,b.campaigntrialstartdate) and c.createdtime <= b.campaigntrialstartdate then c.\"_id\" end) as p7d_newcust,\n    count(distinct case when sms.\"day\" > engage_trial_start_date and sms.\"day\" <= dateadd(day,30,engage_trial_start_date) then sms.\"day\" end) as auto_sms_sent_days_within_trial\n    /*case \n        when p14d_newcust >= 10 and p17d_newcust >= 10 then 1\n        else 0\n    end as product_qualified_lead*/\n    \nfrom storehub_mongo.businesses b\n\nleft join transformations.mask_customers c\n    on b.name = c.business\n    \nleft join (\n    select distinct\n    cj.business,\n    cast(dateadd(hour,8,cj.createdtime) as date) as \"day\"\n    --count(distinct case when cj.globalcampaigninformationid <> '64d4d6b30f005152c96d10cb' then cj._id end) as automated_sms_sent\n    \n    from storehub_mongo.campaignjobs cj\n    \n    where cj.createdtime >= '2022-09-23'\n        and cj.pushstatus = 'SUCCESS'\n        \n    --group by 1,2\n    ) sms\n    on sms.business = b.name\n\nwhere CHARINDEX('internal', b.planid) = 0 \n    and CHARINDEX('@storehub.com', b.email) = 0\n    and b.campaigntrialstartdate is not null\n    and b.country in ('MY')\n    and c.createdtime >= '2022-12-14' -- 2 weeks before the earliest recorded Engage trial start date\n    and b.campaigntrialstartdate >= '2025-01-01'\n    \ngroup by 1,2,3,4,5\norder by 5 ASC",
  "ai_generated_sql": "WITH\ncohort AS (\n    SELECT\n        l.business_id,\n        l.created_at AS trial_start_date\n    FROM loyaltychangelogs AS l\n    JOIN businesses AS b ON l.business_id = b.id\n    WHERE\n        l.description = 'Engage Trial Start'\n        AND b.country = 'MY'\n        AND l.created_at >= DATE_TRUNC('year', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')\n        AND l.created_at < (DATE_TRUNC('year', CURRENT_TIMESTAMP AT TIME ZONE 'UTC') + INTERVAL '1 year')\n        AND (l.isdeleted IS NULL OR l.isdeleted != TRUE)\n        AND (b.isdeleted IS NULL OR b.isdeleted != TRUE)\n),\npre_trial_customers AS (\n    SELECT\n        c.business_id,\n        COUNT(DISTINCT c.id) AS new_customer_count\n    FROM customers AS c\n    JOIN cohort ON c.business_id = cohort.business_id\n        AND c.created_at >= (cohort.trial_start_date - INTERVAL '14 day')\n        AND c.created_at < cohort.trial_start_date\n    WHERE\n        (c.isdeleted IS NULL OR c.isdeleted != TRUE)\n    GROUP BY\n        c.business_id\n),\npost_trial_campaigns AS (\n    SELECT\n        cs.business_id,\n        COUNT(DISTINCT DATE(cs.updated_at)) AS active_campaign_days\n    FROM campaignsegments AS cs\n    JOIN cohort ON cs.business_id = cohort.business_id\n        AND cs.updated_at >= cohort.trial_start_date\n        AND cs.updated_at < (cohort.trial_start_date + INTERVAL '30 day')\n    WHERE\n        (cs.isdeleted IS NULL OR cs.isdeleted != TRUE)\n        AND cs.updated_at <= CURRENT_TIMESTAMP + INTERVAL '1 day'\n    GROUP BY\n        cs.business_id\n)\nSELECT\n    cohort.business_id,\n    cohort.trial_start_date,\n    COALESCE(pre.new_customer_count, 0) AS new_customers_pre_trial_14d,\n    COALESCE(post.active_campaign_days, 0) AS sms_campaign_days_post_trial_30d\nFROM cohort\nLEFT JOIN pre_trial_customers AS pre ON cohort.business_id = pre.business_id\nLEFT JOIN post_trial_campaigns AS post ON cohort.business_id = post.business_id\nORDER BY\n    cohort.trial_start_date DESC;",
  "multi_agent_architecture": {
    "orchestrator": "Gemini 2.5 Pro",
    "intent_agent": "Semantic context-based intent parsing",
    "schema_agent": "Data catalog fixed + value mappings",
    "logic_agent": "Business rules + query patterns + cookbook"
  },
  "api_result": {
    "success": true,
    "status_code": 202,
    "data": {
      "database_id": 2,
      "started_at": "2025-07-31T18:27:30.642985Z",
      "via": [
        {
          "status": "failed",
          "class": "class clojure.lang.ExceptionInfo",
          "error": "Error executing query: ERROR: relation \"loyaltychangelogs\" does not exist",
          "stacktrace": [
            "--> driver.sql_jdbc.execute$execute_reducible_query$fn__79031$fn__79032.invoke(execute.clj:701)",
            "driver.sql_jdbc.execute$execute_reducible_query$fn__79031.invoke(execute.clj:698)",
            "driver.redshift$fn__119979$fn__119981.invoke(redshift.clj:138)",
            "driver.sql_jdbc.execute$do_with_resolved_connection.invokeStatic(execute.clj:334)",
            "driver.sql_jdbc.execute$do_with_resolved_connection.invoke(execute.clj:317)",
            "driver.redshift$fn__119979.invokeStatic(redshift.clj:123)",
            "driver.redshift$fn__119979.invoke(redshift.clj:121)",
            "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:692)",
            "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
            "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:689)",
            "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
            "driver.sql_jdbc$fn__106344.invokeStatic(sql_jdbc.clj:78)",
            "driver.sql_jdbc$fn__106344.invoke(sql_jdbc.clj:76)",
            "query_processor.context$executef.invokeStatic(context.clj:60)",
            "query_processor.context$executef.invoke(context.clj:49)",
            "query_processor.context.default$default_runf.invokeStatic(default.clj:44)",
            "query_processor.context.default$default_runf.invoke(default.clj:42)",
            "query_processor.context$runf.invokeStatic(context.clj:46)",
            "query_processor.context$runf.invoke(context.clj:40)",
            "query_processor.reducible$identity_qp.invokeStatic(reducible.clj:39)",
            "query_processor.reducible$identity_qp.invoke(reducible.clj:36)",
            "query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___71961.invoke(cache.clj:229)",
            "query_processor.middleware.permissions$check_query_permissions$fn__66347.invoke(permissions.clj:140)",
            "query_processor.middleware.enterprise$check_download_permissions_middleware$fn__71782.invoke(enterprise.clj:51)",
            "query_processor.middleware.enterprise$maybe_apply_column_level_perms_check_middleware$fn__71792.invoke(enterprise.clj:64)",
            "query_processor.middleware.mbql_to_native$mbql__GT_native$fn__71224.invoke(mbql_to_native.clj:24)",
            "query_processor$fn__73106$combined_post_process__73111$combined_post_process_STAR___73112.invoke(query_processor.clj:262)",
            "query_processor$fn__73106$combined_pre_process__73107$combined_pre_process_STAR___73108.invoke(query_processor.clj:259)",
            "query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__66444.invoke(fetch_source_query.clj:303)",
            "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872$fn__71876.invoke(resolve_database_and_driver.clj:77)",
            "driver$do_with_driver.invokeStatic(driver.clj:97)",
            "driver$do_with_driver.invoke(driver.clj:92)",
            "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872.invoke(resolve_database_and_driver.clj:76)",
            "query_processor.middleware.store$initialize_store$fn__67050$fn__67051.invoke(store.clj:14)",
            "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:169)",
            "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
            "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:158)",
            "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
            "query_processor.middleware.store$initialize_store$fn__67050.invoke(store.clj:13)",
            "query_processor.middleware.resolve_database_and_driver$resolve_database$fn__71869.invoke(resolve_database_and_driver.clj:60)",
            "query_processor.middleware.normalize_query$normalize$fn__72174.invoke(normalize_query.clj:38)",
            "query_processor.middleware.enterprise$fn__71809$handle_audit_app_internal_queries__71810$fn__71812.invoke(enterprise.clj:96)",
            "query_processor.middleware.enterprise$handle_audit_app_internal_queries_middleware$fn__71820.invoke(enterprise.clj:103)",
            "query_processor.middleware.constraints$mark_needs_default_userland_constraints$fn__70935.invoke(constraints.clj:104)",
            "query_processor.middleware.process_userland_query$process_userland_query$fn__72105.invoke(process_userland_query.clj:156)",
            "query_processor.middleware.catch_exceptions$catch_exceptions$fn__72706.invoke(catch_exceptions.clj:171)",
            "query_processor.reducible$async_qp$qp_STAR___62605$thunk__62607.invoke(reducible.clj:126)",
            "query_processor.reducible$async_qp$qp_STAR___62605.invoke(reducible.clj:132)",
            "query_processor.reducible$sync_qp$qp_STAR___62617.doInvoke(reducible.clj:153)",
            "query_processor$process_userland_query.invokeStatic(query_processor.clj:402)",
            "query_processor$process_userland_query.doInvoke(query_processor.clj:398)",
            "query_processor$process_query_and_save_execution_BANG_.invokeStatic(query_processor.clj:416)",
            "query_processor$process_query_and_save_execution_BANG_.invoke(query_processor.clj:406)",
            "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invokeStatic(query_processor.clj:431)",
            "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invoke(query_processor.clj:421)",
            "api.dataset$run_query_async$fn__93567.invoke(dataset.clj:79)",
            "query_processor.streaming$streaming_response_STAR_$fn__53135$fn__53137.invoke(streaming.clj:168)",
            "query_processor.streaming$streaming_response_STAR_$fn__53135.invoke(streaming.clj:167)",
            "async.streaming_response$do_f_STAR_.invokeStatic(streaming_response.clj:69)",
            "async.streaming_response$do_f_STAR_.invoke(streaming_response.clj:67)",
            "async.streaming_response$do_f_async$task__43750.invoke(streaming_response.clj:88)"
          ],
          "error_type": "invalid-query",
          "ex-data": {
            "driver": "redshift",
            "sql": [
              "-- /* partner: \"metabase\", {\"dashboard_id\":null,\"chart_id\":null,\"optional_user_id\":477,\"optional_account_id\":\"0a0eeb39-1c3d-4f8f-a7cc-96bace83599a\",\"filter_values\":{}} */ Metabase:: userID: 477 queryType: native queryHash: d9cb9c0e37f2a0bf0c30a3beaabb0c0ed601b5eb1bd5fafc7a850ae19dcfab44",
              "WITH cohort AS (",
              "  SELECT",
              "    l.business_id,",
              "    l.created_at AS trial_start_date",
              "  FROM",
              "    loyaltychangelogs AS l",
              "    JOIN businesses AS b ON l.business_id = b.id",
              "  WHERE",
              "    l.description = 'Engage Trial Start'",
              "    AND b.country = 'MY'",
              "    AND l.created_at >= DATE_TRUNC('year', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')",
              "    AND l.created_at < (",
              "      DATE_TRUNC('year', CURRENT_TIMESTAMP AT TIME ZONE 'UTC') + INTERVAL '1 year'",
              "    )",
              "    AND (",
              "      l.isdeleted IS NULL",
              "      OR l.isdeleted != TRUE",
              "    )",
              "    AND (",
              "      b.isdeleted IS NULL",
              "      OR b.isdeleted != TRUE",
              "    )",
              "),",
              "pre_trial_customers AS (",
              "  SELECT",
              "    c.business_id,",
              "    COUNT(DISTINCT c.id) AS new_customer_count",
              "  FROM",
              "    customers AS c",
              "    JOIN cohort ON c.business_id = cohort.business_id",
              "    AND c.created_at >= (cohort.trial_start_date - INTERVAL '14 day')",
              "    AND c.created_at < cohort.trial_start_date",
              "  WHERE",
              "    (",
              "      c.isdeleted IS NULL",
              "      OR c.isdeleted != TRUE",
              "    )",
              "  GROUP BY",
              "    c.business_id",
              "),",
              "post_trial_campaigns AS (",
              "  SELECT",
              "    cs.business_id,",
              "    COUNT(DISTINCT DATE(cs.updated_at)) AS active_campaign_days",
              "  FROM",
              "    campaignsegments AS cs",
              "    JOIN cohort ON cs.business_id = cohort.business_id",
              "    AND cs.updated_at >= cohort.trial_start_date",
              "    AND cs.updated_at < (cohort.trial_start_date + INTERVAL '30 day')",
              "  WHERE",
              "    (",
              "      cs.isdeleted IS NULL",
              "      OR cs.isdeleted != TRUE",
              "    )",
              "    AND cs.updated_at <= CURRENT_TIMESTAMP + INTERVAL '1 day'",
              "  GROUP BY",
              "    cs.business_id",
              ")",
              "SELECT",
              "  cohort.business_id,",
              "  cohort.trial_start_date,",
              "  COALESCE(pre.new_customer_count, 0) AS new_customers_pre_trial_14d,",
              "  COALESCE(post.active_campaign_days, 0) AS sms_campaign_days_post_trial_30d",
              "FROM",
              "  cohort",
              "  LEFT JOIN pre_trial_customers AS pre ON cohort.business_id = pre.business_id",
              "  LEFT JOIN post_trial_campaigns AS post ON cohort.business_id = post.business_id",
              "ORDER BY",
              "  cohort.trial_start_date DESC;"
            ],
            "params": null,
            "type": "invalid-query"
          }
        }
      ],
      "action_id": null,
      "state": "42P01",
      "error_type": "invalid-query",
      "json_query": {
        "database": 2,
        "type": "native",
        "native": {
          "query": "WITH\ncohort AS (\n    SELECT\n        l.business_id,\n        l.created_at AS trial_start_date\n    FROM loyaltychangelogs AS l\n    JOIN businesses AS b ON l.business_id = b.id\n    WHERE\n        l.description = 'Engage Trial Start'\n        AND b.country = 'MY'\n        AND l.created_at >= DATE_TRUNC('year', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')\n        AND l.created_at < (DATE_TRUNC('year', CURRENT_TIMESTAMP AT TIME ZONE 'UTC') + INTERVAL '1 year')\n        AND (l.isdeleted IS NULL OR l.isdeleted != TRUE)\n        AND (b.isdeleted IS NULL OR b.isdeleted != TRUE)\n),\npre_trial_customers AS (\n    SELECT\n        c.business_id,\n        COUNT(DISTINCT c.id) AS new_customer_count\n    FROM customers AS c\n    JOIN cohort ON c.business_id = cohort.business_id\n        AND c.created_at >= (cohort.trial_start_date - INTERVAL '14 day')\n        AND c.created_at < cohort.trial_start_date\n    WHERE\n        (c.isdeleted IS NULL OR c.isdeleted != TRUE)\n    GROUP BY\n        c.business_id\n),\npost_trial_campaigns AS (\n    SELECT\n        cs.business_id,\n        COUNT(DISTINCT DATE(cs.updated_at)) AS active_campaign_days\n    FROM campaignsegments AS cs\n    JOIN cohort ON cs.business_id = cohort.business_id\n        AND cs.updated_at >= cohort.trial_start_date\n        AND cs.updated_at < (cohort.trial_start_date + INTERVAL '30 day')\n    WHERE\n        (cs.isdeleted IS NULL OR cs.isdeleted != TRUE)\n        AND cs.updated_at <= CURRENT_TIMESTAMP + INTERVAL '1 day'\n    GROUP BY\n        cs.business_id\n)\nSELECT\n    cohort.business_id,\n    cohort.trial_start_date,\n    COALESCE(pre.new_customer_count, 0) AS new_customers_pre_trial_14d,\n    COALESCE(post.active_campaign_days, 0) AS sms_campaign_days_post_trial_30d\nFROM cohort\nLEFT JOIN pre_trial_customers AS pre ON cohort.business_id = pre.business_id\nLEFT JOIN post_trial_campaigns AS post ON cohort.business_id = post.business_id\nORDER BY\n    cohort.trial_start_date DESC;"
        },
        "middleware": {
          "js-int-to-string?": true,
          "add-default-userland-constraints?": true
        }
      },
      "status": "failed",
      "class": "class com.amazon.redshift.util.RedshiftException",
      "stacktrace": [
        "com.amazon.redshift.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2613)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResultsOnThread(QueryExecutorImpl.java:2281)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1886)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1878)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:375)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeInternal(RedshiftStatementImpl.java:515)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.execute(RedshiftStatementImpl.java:436)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeWithFlags(RedshiftStatementImpl.java:377)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeCachedSql(RedshiftStatementImpl.java:363)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeWithFlags(RedshiftStatementImpl.java:340)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.execute(RedshiftStatementImpl.java:330)",
        "com.mchange.v2.c3p0.impl.NewProxyStatement.execute(NewProxyStatement.java:75)",
        "--> driver.sql_jdbc.execute$fn__78950.invokeStatic(execute.clj:560)",
        "driver.sql_jdbc.execute$fn__78950.invoke(execute.clj:558)",
        "driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invokeStatic(execute.clj:568)",
        "driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invoke(execute.clj:565)",
        "driver.sql_jdbc.execute$execute_reducible_query$fn__79031$fn__79032.invoke(execute.clj:699)",
        "driver.sql_jdbc.execute$execute_reducible_query$fn__79031.invoke(execute.clj:698)",
        "driver.redshift$fn__119979$fn__119981.invoke(redshift.clj:138)",
        "driver.sql_jdbc.execute$do_with_resolved_connection.invokeStatic(execute.clj:334)",
        "driver.sql_jdbc.execute$do_with_resolved_connection.invoke(execute.clj:317)",
        "driver.redshift$fn__119979.invokeStatic(redshift.clj:123)",
        "driver.redshift$fn__119979.invoke(redshift.clj:121)",
        "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:692)",
        "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
        "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:689)",
        "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
        "driver.sql_jdbc$fn__106344.invokeStatic(sql_jdbc.clj:78)",
        "driver.sql_jdbc$fn__106344.invoke(sql_jdbc.clj:76)",
        "query_processor.context$executef.invokeStatic(context.clj:60)",
        "query_processor.context$executef.invoke(context.clj:49)",
        "query_processor.context.default$default_runf.invokeStatic(default.clj:44)",
        "query_processor.context.default$default_runf.invoke(default.clj:42)",
        "query_processor.context$runf.invokeStatic(context.clj:46)",
        "query_processor.context$runf.invoke(context.clj:40)",
        "query_processor.reducible$identity_qp.invokeStatic(reducible.clj:39)",
        "query_processor.reducible$identity_qp.invoke(reducible.clj:36)",
        "query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___71961.invoke(cache.clj:229)",
        "query_processor.middleware.permissions$check_query_permissions$fn__66347.invoke(permissions.clj:140)",
        "query_processor.middleware.enterprise$check_download_permissions_middleware$fn__71782.invoke(enterprise.clj:51)",
        "query_processor.middleware.enterprise$maybe_apply_column_level_perms_check_middleware$fn__71792.invoke(enterprise.clj:64)",
        "query_processor.middleware.mbql_to_native$mbql__GT_native$fn__71224.invoke(mbql_to_native.clj:24)",
        "query_processor$fn__73106$combined_post_process__73111$combined_post_process_STAR___73112.invoke(query_processor.clj:262)",
        "query_processor$fn__73106$combined_pre_process__73107$combined_pre_process_STAR___73108.invoke(query_processor.clj:259)",
        "query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__66444.invoke(fetch_source_query.clj:303)",
        "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872$fn__71876.invoke(resolve_database_and_driver.clj:77)",
        "driver$do_with_driver.invokeStatic(driver.clj:97)",
        "driver$do_with_driver.invoke(driver.clj:92)",
        "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872.invoke(resolve_database_and_driver.clj:76)",
        "query_processor.middleware.store$initialize_store$fn__67050$fn__67051.invoke(store.clj:14)",
        "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:169)",
        "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
        "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:158)",
        "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
        "query_processor.middleware.store$initialize_store$fn__67050.invoke(store.clj:13)",
        "query_processor.middleware.resolve_database_and_driver$resolve_database$fn__71869.invoke(resolve_database_and_driver.clj:60)",
        "query_processor.middleware.normalize_query$normalize$fn__72174.invoke(normalize_query.clj:38)",
        "query_processor.middleware.enterprise$fn__71809$handle_audit_app_internal_queries__71810$fn__71812.invoke(enterprise.clj:96)",
        "query_processor.middleware.enterprise$handle_audit_app_internal_queries_middleware$fn__71820.invoke(enterprise.clj:103)",
        "query_processor.middleware.constraints$mark_needs_default_userland_constraints$fn__70935.invoke(constraints.clj:104)",
        "query_processor.middleware.process_userland_query$process_userland_query$fn__72105.invoke(process_userland_query.clj:156)",
        "query_processor.middleware.catch_exceptions$catch_exceptions$fn__72706.invoke(catch_exceptions.clj:171)",
        "query_processor.reducible$async_qp$qp_STAR___62605$thunk__62607.invoke(reducible.clj:126)",
        "query_processor.reducible$async_qp$qp_STAR___62605.invoke(reducible.clj:132)",
        "query_processor.reducible$sync_qp$qp_STAR___62617.doInvoke(reducible.clj:153)",
        "query_processor$process_userland_query.invokeStatic(query_processor.clj:402)",
        "query_processor$process_userland_query.doInvoke(query_processor.clj:398)",
        "query_processor$process_query_and_save_execution_BANG_.invokeStatic(query_processor.clj:416)",
        "query_processor$process_query_and_save_execution_BANG_.invoke(query_processor.clj:406)",
        "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invokeStatic(query_processor.clj:431)",
        "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invoke(query_processor.clj:421)",
        "api.dataset$run_query_async$fn__93567.invoke(dataset.clj:79)",
        "query_processor.streaming$streaming_response_STAR_$fn__53135$fn__53137.invoke(streaming.clj:168)",
        "query_processor.streaming$streaming_response_STAR_$fn__53135.invoke(streaming.clj:167)",
        "async.streaming_response$do_f_STAR_.invokeStatic(streaming_response.clj:69)",
        "async.streaming_response$do_f_STAR_.invoke(streaming_response.clj:67)",
        "async.streaming_response$do_f_async$task__43750.invoke(streaming_response.clj:88)"
      ],
      "card_id": null,
      "context": "ad-hoc",
      "error": "ERROR: relation \"loyaltychangelogs\" does not exist",
      "row_count": 0,
      "running_time": 0,
      "data": {
        "rows": [],
        "cols": []
      }
    },
    "row_count": 0,
    "query": "WITH\ncohort AS (\n    SELECT\n        l.business_id,\n        l.created_at AS trial_start_date\n    FROM loyaltychangelogs AS l\n    JOIN businesses AS b ON l.business_id = b.id\n    WHERE\n        l.description = 'Engage Trial Start'\n        AND b.country = 'MY'\n        AND l.created_at >= DATE_TRUNC('year', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')\n        AND l.created_at < (DATE_TRUNC('year', CURRENT_TIMESTAMP AT TIME ZONE 'UTC') + INTERVAL '1 year')\n        AND (l.isdeleted IS NULL OR l.isdeleted != TRUE)\n        AND (b.isdeleted IS NULL OR b.isdeleted != TRUE)\n),\npre_trial_customers AS (\n    SELECT\n        c.business_id,\n        COUNT(DISTINCT c.id) AS new_customer_count\n    FROM customers AS c\n    JOIN cohort ON c.business_id = cohort.business_id\n        AND c.created_at >= (cohort.trial_start_date - INTERVAL '14 day')\n        AND c.created_at < cohort.trial_start_date\n    WHERE\n        (c.isdeleted IS NULL OR c.isdeleted != TRUE)\n    GROUP BY\n        c.business_id\n),\npost_trial_campaigns AS (\n    SELECT\n        cs.business_id,\n        COUNT(DISTINCT DATE(cs.updated_at)) AS active_campaign_days\n    FROM campaignsegments AS cs\n    JOIN cohort ON cs.business_id = cohort.business_id\n        AND cs.updated_at >= cohort.trial_start_date\n        AND cs.updated_at < (cohort.trial_start_date + INTERVAL '30 day')\n    WHERE\n        (cs.isdeleted IS NULL OR cs.isdeleted != TRUE)\n        AND cs.updated_at <= CURRENT_TIMESTAMP + INTERVAL '1 day'\n    GROUP BY\n        cs.business_id\n)\nSELECT\n    cohort.business_id,\n    cohort.trial_start_date,\n    COALESCE(pre.new_customer_count, 0) AS new_customers_pre_trial_14d,\n    COALESCE(post.active_campaign_days, 0) AS sms_campaign_days_post_trial_30d\nFROM cohort\nLEFT JOIN pre_trial_customers AS pre ON cohort.business_id = pre.business_id\nLEFT JOIN post_trial_campaigns AS post ON cohort.business_id = post.business_id\nORDER BY\n    cohort.trial_start_date DESC;"
  }
}