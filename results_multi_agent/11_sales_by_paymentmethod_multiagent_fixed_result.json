{
  "file_name": "11_sales_by_paymentmethod.sql",
  "timestamp": "/Users/sharlenechew/redshift-semantic",
  "a_b_test_config": {
    "use_fixed_catalog": true,
    "catalog_used": "data_catalog_fixed.json"
  },
  "business_question": "I need a sales report for 'signaturebeefnoodles' for the first half of 2025, broken down by each payment method. Can you show me the final Net Sales for each payment type, making sure to correctly account for both returns and preorder deposits?",
  "golden_sql": "with base as (\nSELECT\n    dateadd(hour,8,tr.createdtime) as txn_createdtime,\n    tr.storeid AS \"Store ID\",\n    bs.name AS \"Store Name\",\n    tr._id,\n    tr.transactiontype,\n    CASE \n        WHEN bpo.name <> '' THEN bpo.name\n        ELSE trp.paymentmethod \n    END AS \"Payment Method\",\n    /*CASE \n        WHEN trp.paymentmethod = '' or trp.paymentmethod is null THEN tr.paymentmethod \n        ELSE trp.paymentmethod \n    END AS \"Payments paymentmethod\",*/\n    CASE \n        WHEN trp.paymentmethod = '' or trp.paymentmethod is null THEN tr.total \n        ELSE trp.amount \n    END AS \"Payment Amount\"\n    \nFROM storehub_mongo.transactionrecords tr\n\nleft join storehub_mongo.transactionrecords__payments trp \n    on trp.transactionrecords_foreignkey = tr._id\n\nleft join storehub_mongo.businesses b \n    on b.name = tr.business\n    \nleft join storehub_mongo.businesses__paymentoptions bpo \n    on (bpo.businesses_foreignkey = b._id and bpo.paymentid = trp.paymentmethod)\n    \nleft join storehub_mongo.businesses__stores bs\n    on tr.storeid = bs._id\n\nWHERE tr.business = 'signaturebeefnoodles'\n    and (tr.createdtime >= dateadd(hour,-8,'2025-01-01') and tr.createdtime < dateadd(hour,-8,'2025-07-01')) \n    AND tr.status not in ('pendingPayment','failed','created','paymentCancelled')\n    AND tr.iscancelled is not true\n    --AND tr.transactiontype <> 'PreOrder'  \n\nGROUP BY 1,2,3,4\nORDER BY \"Store Name\" ASC, txn_createdtime ASC \n-- LIMIT 50\n-- OFFSET 0\n)\n\n\nselect \n    --tmp.\"month\",\n    --tmp.\"Store Name\",\n    tmp.\"Payment Method\",\n    tmp.\"Total Sales\",\n    tmp.\"Total Transactions\",\n    tmp.\"Total Sales Returned\",\n    tmp.\"Total Items Returned\",\n    tmp.\"PreOrder Deposits\",\n    tmp.\"PreOrder Transactions\",\n    tmp.\"Total Sales\" + tmp.\"PreOrder Deposits\" - tmp.\"Total Sales Returned\" AS \"Net Sales\" -- paymentNetSales\nfrom (\n    select\n        --date_trunc('month',cast(base.txn_createdtime as date)) AS \"month\", -- change this line accordingly to get other time variable, eg. hourly, daily, weekly, etc\n        --to_char(cast(base.txn_createdtime as date),'Day') as \"day of week\", -- use this instead of the date_trunc line to get day of week\n        --base.\"Store Name\",\n        base.\"Payment Method\",\n        SUM(CASE WHEN base.transactiontype = 'Sale' THEN COALESCE(+ base.\"Payment Amount\",0) ELSE COALESCE(0,0) END) AS \"Total Sales\", -- paymentSales\n        SUM(CASE WHEN base.transactiontype = 'Sale' THEN COALESCE(1,0) ELSE COALESCE(0,0) END) AS \"Total Transactions\", -- salesCount\n        SUM(CASE WHEN base.transactiontype = 'Return'THEN COALESCE(+ base.\"Payment Amount\",0) ELSE COALESCE(0,0) END) AS \"Total Sales Returned\", -- paymentReturns\n        SUM(CASE WHEN base.transactiontype = 'Return' THEN COALESCE(1,0) ELSE COALESCE(0, 0) END) AS \"Total Items Returned\", -- returnsCount\n        SUM(CASE WHEN base.transactiontype = 'PreOrder' THEN COALESCE(+ base.\"Payment Amount\",0) ELSE COALESCE(0,0) END) AS \"PreOrder Deposits\", -- preOrderDeposits\n        SUM(CASE WHEN base.transactiontype = 'PreOrder' THEN COALESCE(1,0) ELSE COALESCE(0,0) END) AS \"PreOrder Transactions\" -- preorderCount\n\n    from base\n    \n    group by 1--,2,3\n    --order by \"Store Name\" asc, \"month\" asc\n    ) tmp\n\n--order by tmp.\"Store Name\" asc, tmp.\"month\" asc\n\n\n\n\n------------------------------------------------------------------------------------------\n-- Other useful sales report logic for ref (just not relevant to payment method report) --\n------------------------------------------------------------------------------------------\n--SUM(CASE WHEN tr.transactiontype = 'Return' THEN COALESCE(0,0) ELSE COALESCE(+tr.total,0) END) AS \"Total Sales\", --sales\n--SUM(CASE WHEN tr.transactiontype = 'Return' THEN COALESCE(-tr.tax,0) ELSE COALESCE(+tr.tax,0) END) AS \"Tax\", --tax\n--SUM(CASE WHEN tr.transactiontype = 'Return' THEN COALESCE(-tr.servicecharge,0) ELSE COALESCE(+tr.servicecharge,0) END) AS \"Service Charge\", --serviceCharge\n--SUM(CASE WHEN tr.transactiontype = 'Return' THEN COALESCE(-tr.roundedamount,0) ELSE COALESCE(+tr.roundedamount,0) END) AS \"Rounding\" --rounding\n--SUM(CASE WHEN tr.transactiontype = 'Return' THEN COALESCE(+tr.total,0) ELSE COALESCE(0,0) END) AS \"Total Sales Returned Amount\" --returns\n--COUNT(*) AS \"Total Transactions\", --count\n--SUM(CASE WHEN tr.transactiontype = 'Return' THEN COALESCE(-tr.discount,0) ELSE COALESCE(+tr.discount,0) END) AS \"Total Discount\", --discount\n--SUM(CASE WHEN tr.transactiontype = 'Return' THEN COALESCE(1,0) ELSE COALESCE(0,0) END) AS \"Total Sales Returned Count\", --returnsCount\n--SUM(CASE WHEN tr.transactiontype = 'Return' THEN COALESCE(+tr.total,0) ELSE COALESCE(0,0) END) AS \"Total Sales Returned Amount\", --returns\n--SUM(CASE WHEN tr.transactiontype = 'Return' THEN COALESCE(-tr.subtotal,0) ELSE COALESCE(+tr.subtotal,0) END) AS \"SubTotal\", --subtotal\n--SUM(CASE WHEN tr.transactiontype = 'Return' THEN COALESCE(-tr.cost,0) ELSE COALESCE(+tr.cost,0) END) AS \"Total Cost\" --cost",
  "ai_generated_sql": "SELECT\n  COALESCE(pm.payment_method_name, 'Unknown') AS payment_method,\n  SUM(tr.net_sales) AS final_net_sales\nFROM\n  sales.transactionrecords AS tr\n  JOIN products.products AS p ON tr.product_id = p.product_id\n  LEFT JOIN payment_methods.businesses__paymentoptions AS pm ON tr.payment_method_id = pm.payment_method_id\nWHERE\n  p.product_slug = 'signaturebeefnoodles'\n  AND tr.transaction_date BETWEEN '2025-01-01' AND '2025-06-30'\n  AND tr.transaction_status = 'COMPLETED'\nGROUP BY\n  COALESCE(pm.payment_method_name, 'Unknown')\nORDER BY\n  final_net_sales DESC;",
  "multi_agent_architecture": {
    "orchestrator": "Gemini 2.5 Pro",
    "intent_agent": "Semantic context-based intent parsing",
    "schema_agent": "Data catalog fixed + value mappings",
    "logic_agent": "Business rules + query patterns + cookbook"
  },
  "api_result": {
    "success": true,
    "status_code": 202,
    "data": {
      "database_id": 2,
      "started_at": "2025-07-31T18:39:49.358699Z",
      "via": [
        {
          "status": "failed",
          "class": "class clojure.lang.ExceptionInfo",
          "error": "Error executing query: ERROR: schema \"sales\" does not exist",
          "stacktrace": [
            "--> driver.sql_jdbc.execute$execute_reducible_query$fn__79031$fn__79032.invoke(execute.clj:701)",
            "driver.sql_jdbc.execute$execute_reducible_query$fn__79031.invoke(execute.clj:698)",
            "driver.redshift$fn__119979$fn__119981.invoke(redshift.clj:138)",
            "driver.sql_jdbc.execute$do_with_resolved_connection.invokeStatic(execute.clj:334)",
            "driver.sql_jdbc.execute$do_with_resolved_connection.invoke(execute.clj:317)",
            "driver.redshift$fn__119979.invokeStatic(redshift.clj:123)",
            "driver.redshift$fn__119979.invoke(redshift.clj:121)",
            "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:692)",
            "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
            "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:689)",
            "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
            "driver.sql_jdbc$fn__106344.invokeStatic(sql_jdbc.clj:78)",
            "driver.sql_jdbc$fn__106344.invoke(sql_jdbc.clj:76)",
            "query_processor.context$executef.invokeStatic(context.clj:60)",
            "query_processor.context$executef.invoke(context.clj:49)",
            "query_processor.context.default$default_runf.invokeStatic(default.clj:44)",
            "query_processor.context.default$default_runf.invoke(default.clj:42)",
            "query_processor.context$runf.invokeStatic(context.clj:46)",
            "query_processor.context$runf.invoke(context.clj:40)",
            "query_processor.reducible$identity_qp.invokeStatic(reducible.clj:39)",
            "query_processor.reducible$identity_qp.invoke(reducible.clj:36)",
            "query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___71961.invoke(cache.clj:229)",
            "query_processor.middleware.permissions$check_query_permissions$fn__66347.invoke(permissions.clj:140)",
            "query_processor.middleware.enterprise$check_download_permissions_middleware$fn__71782.invoke(enterprise.clj:51)",
            "query_processor.middleware.enterprise$maybe_apply_column_level_perms_check_middleware$fn__71792.invoke(enterprise.clj:64)",
            "query_processor.middleware.mbql_to_native$mbql__GT_native$fn__71224.invoke(mbql_to_native.clj:24)",
            "query_processor$fn__73106$combined_post_process__73111$combined_post_process_STAR___73112.invoke(query_processor.clj:262)",
            "query_processor$fn__73106$combined_pre_process__73107$combined_pre_process_STAR___73108.invoke(query_processor.clj:259)",
            "query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__66444.invoke(fetch_source_query.clj:303)",
            "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872$fn__71876.invoke(resolve_database_and_driver.clj:77)",
            "driver$do_with_driver.invokeStatic(driver.clj:97)",
            "driver$do_with_driver.invoke(driver.clj:92)",
            "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872.invoke(resolve_database_and_driver.clj:76)",
            "query_processor.middleware.store$initialize_store$fn__67050$fn__67051.invoke(store.clj:14)",
            "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:169)",
            "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
            "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:158)",
            "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
            "query_processor.middleware.store$initialize_store$fn__67050.invoke(store.clj:13)",
            "query_processor.middleware.resolve_database_and_driver$resolve_database$fn__71869.invoke(resolve_database_and_driver.clj:60)",
            "query_processor.middleware.normalize_query$normalize$fn__72174.invoke(normalize_query.clj:38)",
            "query_processor.middleware.enterprise$fn__71809$handle_audit_app_internal_queries__71810$fn__71812.invoke(enterprise.clj:96)",
            "query_processor.middleware.enterprise$handle_audit_app_internal_queries_middleware$fn__71820.invoke(enterprise.clj:103)",
            "query_processor.middleware.constraints$mark_needs_default_userland_constraints$fn__70935.invoke(constraints.clj:104)",
            "query_processor.middleware.process_userland_query$process_userland_query$fn__72105.invoke(process_userland_query.clj:156)",
            "query_processor.middleware.catch_exceptions$catch_exceptions$fn__72706.invoke(catch_exceptions.clj:171)",
            "query_processor.reducible$async_qp$qp_STAR___62605$thunk__62607.invoke(reducible.clj:126)",
            "query_processor.reducible$async_qp$qp_STAR___62605.invoke(reducible.clj:132)",
            "query_processor.reducible$sync_qp$qp_STAR___62617.doInvoke(reducible.clj:153)",
            "query_processor$process_userland_query.invokeStatic(query_processor.clj:402)",
            "query_processor$process_userland_query.doInvoke(query_processor.clj:398)",
            "query_processor$process_query_and_save_execution_BANG_.invokeStatic(query_processor.clj:416)",
            "query_processor$process_query_and_save_execution_BANG_.invoke(query_processor.clj:406)",
            "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invokeStatic(query_processor.clj:431)",
            "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invoke(query_processor.clj:421)",
            "api.dataset$run_query_async$fn__93567.invoke(dataset.clj:79)",
            "query_processor.streaming$streaming_response_STAR_$fn__53135$fn__53137.invoke(streaming.clj:168)",
            "query_processor.streaming$streaming_response_STAR_$fn__53135.invoke(streaming.clj:167)",
            "async.streaming_response$do_f_STAR_.invokeStatic(streaming_response.clj:69)",
            "async.streaming_response$do_f_STAR_.invoke(streaming_response.clj:67)",
            "async.streaming_response$do_f_async$task__43750.invoke(streaming_response.clj:88)"
          ],
          "error_type": "invalid-query",
          "ex-data": {
            "driver": "redshift",
            "sql": [
              "-- /* partner: \"metabase\", {\"dashboard_id\":null,\"chart_id\":null,\"optional_user_id\":477,\"optional_account_id\":\"0a0eeb39-1c3d-4f8f-a7cc-96bace83599a\",\"filter_values\":{}} */ Metabase:: userID: 477 queryType: native queryHash: 40ecc1fe24d75b3474d49c40032cf6b650def70389af4ef18218cee93769ff00",
              "SELECT",
              "  COALESCE(pm.payment_method_name, 'Unknown') AS payment_method,",
              "  SUM(tr.net_sales) AS final_net_sales",
              "FROM",
              "  sales.transactionrecords AS tr",
              "  JOIN products.products AS p ON tr.product_id = p.product_id",
              "  LEFT JOIN payment_methods.businesses__paymentoptions AS pm ON tr.payment_method_id = pm.payment_method_id",
              "WHERE",
              "  p.product_slug = 'signaturebeefnoodles'",
              "  AND tr.transaction_date BETWEEN '2025-01-01'",
              "  AND '2025-06-30'",
              "  AND tr.transaction_status = 'COMPLETED'",
              "GROUP BY",
              "  COALESCE(pm.payment_method_name, 'Unknown')",
              "ORDER BY",
              "  final_net_sales DESC;"
            ],
            "params": null,
            "type": "invalid-query"
          }
        }
      ],
      "action_id": null,
      "state": "3F000",
      "error_type": "invalid-query",
      "json_query": {
        "database": 2,
        "type": "native",
        "native": {
          "query": "SELECT\n  COALESCE(pm.payment_method_name, 'Unknown') AS payment_method,\n  SUM(tr.net_sales) AS final_net_sales\nFROM\n  sales.transactionrecords AS tr\n  JOIN products.products AS p ON tr.product_id = p.product_id\n  LEFT JOIN payment_methods.businesses__paymentoptions AS pm ON tr.payment_method_id = pm.payment_method_id\nWHERE\n  p.product_slug = 'signaturebeefnoodles'\n  AND tr.transaction_date BETWEEN '2025-01-01' AND '2025-06-30'\n  AND tr.transaction_status = 'COMPLETED'\nGROUP BY\n  COALESCE(pm.payment_method_name, 'Unknown')\nORDER BY\n  final_net_sales DESC;"
        },
        "middleware": {
          "js-int-to-string?": true,
          "add-default-userland-constraints?": true
        }
      },
      "status": "failed",
      "class": "class com.amazon.redshift.util.RedshiftException",
      "stacktrace": [
        "com.amazon.redshift.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2613)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResultsOnThread(QueryExecutorImpl.java:2281)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1886)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1878)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:375)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeInternal(RedshiftStatementImpl.java:515)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.execute(RedshiftStatementImpl.java:436)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeWithFlags(RedshiftStatementImpl.java:377)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeCachedSql(RedshiftStatementImpl.java:363)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeWithFlags(RedshiftStatementImpl.java:340)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.execute(RedshiftStatementImpl.java:330)",
        "com.mchange.v2.c3p0.impl.NewProxyStatement.execute(NewProxyStatement.java:75)",
        "--> driver.sql_jdbc.execute$fn__78950.invokeStatic(execute.clj:560)",
        "driver.sql_jdbc.execute$fn__78950.invoke(execute.clj:558)",
        "driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invokeStatic(execute.clj:568)",
        "driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invoke(execute.clj:565)",
        "driver.sql_jdbc.execute$execute_reducible_query$fn__79031$fn__79032.invoke(execute.clj:699)",
        "driver.sql_jdbc.execute$execute_reducible_query$fn__79031.invoke(execute.clj:698)",
        "driver.redshift$fn__119979$fn__119981.invoke(redshift.clj:138)",
        "driver.sql_jdbc.execute$do_with_resolved_connection.invokeStatic(execute.clj:334)",
        "driver.sql_jdbc.execute$do_with_resolved_connection.invoke(execute.clj:317)",
        "driver.redshift$fn__119979.invokeStatic(redshift.clj:123)",
        "driver.redshift$fn__119979.invoke(redshift.clj:121)",
        "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:692)",
        "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
        "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:689)",
        "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
        "driver.sql_jdbc$fn__106344.invokeStatic(sql_jdbc.clj:78)",
        "driver.sql_jdbc$fn__106344.invoke(sql_jdbc.clj:76)",
        "query_processor.context$executef.invokeStatic(context.clj:60)",
        "query_processor.context$executef.invoke(context.clj:49)",
        "query_processor.context.default$default_runf.invokeStatic(default.clj:44)",
        "query_processor.context.default$default_runf.invoke(default.clj:42)",
        "query_processor.context$runf.invokeStatic(context.clj:46)",
        "query_processor.context$runf.invoke(context.clj:40)",
        "query_processor.reducible$identity_qp.invokeStatic(reducible.clj:39)",
        "query_processor.reducible$identity_qp.invoke(reducible.clj:36)",
        "query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___71961.invoke(cache.clj:229)",
        "query_processor.middleware.permissions$check_query_permissions$fn__66347.invoke(permissions.clj:140)",
        "query_processor.middleware.enterprise$check_download_permissions_middleware$fn__71782.invoke(enterprise.clj:51)",
        "query_processor.middleware.enterprise$maybe_apply_column_level_perms_check_middleware$fn__71792.invoke(enterprise.clj:64)",
        "query_processor.middleware.mbql_to_native$mbql__GT_native$fn__71224.invoke(mbql_to_native.clj:24)",
        "query_processor$fn__73106$combined_post_process__73111$combined_post_process_STAR___73112.invoke(query_processor.clj:262)",
        "query_processor$fn__73106$combined_pre_process__73107$combined_pre_process_STAR___73108.invoke(query_processor.clj:259)",
        "query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__66444.invoke(fetch_source_query.clj:303)",
        "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872$fn__71876.invoke(resolve_database_and_driver.clj:77)",
        "driver$do_with_driver.invokeStatic(driver.clj:97)",
        "driver$do_with_driver.invoke(driver.clj:92)",
        "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872.invoke(resolve_database_and_driver.clj:76)",
        "query_processor.middleware.store$initialize_store$fn__67050$fn__67051.invoke(store.clj:14)",
        "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:169)",
        "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
        "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:158)",
        "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
        "query_processor.middleware.store$initialize_store$fn__67050.invoke(store.clj:13)",
        "query_processor.middleware.resolve_database_and_driver$resolve_database$fn__71869.invoke(resolve_database_and_driver.clj:60)",
        "query_processor.middleware.normalize_query$normalize$fn__72174.invoke(normalize_query.clj:38)",
        "query_processor.middleware.enterprise$fn__71809$handle_audit_app_internal_queries__71810$fn__71812.invoke(enterprise.clj:96)",
        "query_processor.middleware.enterprise$handle_audit_app_internal_queries_middleware$fn__71820.invoke(enterprise.clj:103)",
        "query_processor.middleware.constraints$mark_needs_default_userland_constraints$fn__70935.invoke(constraints.clj:104)",
        "query_processor.middleware.process_userland_query$process_userland_query$fn__72105.invoke(process_userland_query.clj:156)",
        "query_processor.middleware.catch_exceptions$catch_exceptions$fn__72706.invoke(catch_exceptions.clj:171)",
        "query_processor.reducible$async_qp$qp_STAR___62605$thunk__62607.invoke(reducible.clj:126)",
        "query_processor.reducible$async_qp$qp_STAR___62605.invoke(reducible.clj:132)",
        "query_processor.reducible$sync_qp$qp_STAR___62617.doInvoke(reducible.clj:153)",
        "query_processor$process_userland_query.invokeStatic(query_processor.clj:402)",
        "query_processor$process_userland_query.doInvoke(query_processor.clj:398)",
        "query_processor$process_query_and_save_execution_BANG_.invokeStatic(query_processor.clj:416)",
        "query_processor$process_query_and_save_execution_BANG_.invoke(query_processor.clj:406)",
        "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invokeStatic(query_processor.clj:431)",
        "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invoke(query_processor.clj:421)",
        "api.dataset$run_query_async$fn__93567.invoke(dataset.clj:79)",
        "query_processor.streaming$streaming_response_STAR_$fn__53135$fn__53137.invoke(streaming.clj:168)",
        "query_processor.streaming$streaming_response_STAR_$fn__53135.invoke(streaming.clj:167)",
        "async.streaming_response$do_f_STAR_.invokeStatic(streaming_response.clj:69)",
        "async.streaming_response$do_f_STAR_.invoke(streaming_response.clj:67)",
        "async.streaming_response$do_f_async$task__43750.invoke(streaming_response.clj:88)"
      ],
      "card_id": null,
      "context": "ad-hoc",
      "error": "ERROR: schema \"sales\" does not exist",
      "row_count": 0,
      "running_time": 0,
      "data": {
        "rows": [],
        "cols": []
      }
    },
    "row_count": 0,
    "query": "SELECT\n  COALESCE(pm.payment_method_name, 'Unknown') AS payment_method,\n  SUM(tr.net_sales) AS final_net_sales\nFROM\n  sales.transactionrecords AS tr\n  JOIN products.products AS p ON tr.product_id = p.product_id\n  LEFT JOIN payment_methods.businesses__paymentoptions AS pm ON tr.payment_method_id = pm.payment_method_id\nWHERE\n  p.product_slug = 'signaturebeefnoodles'\n  AND tr.transaction_date BETWEEN '2025-01-01' AND '2025-06-30'\n  AND tr.transaction_status = 'COMPLETED'\nGROUP BY\n  COALESCE(pm.payment_method_name, 'Unknown')\nORDER BY\n  final_net_sales DESC;"
  }
}