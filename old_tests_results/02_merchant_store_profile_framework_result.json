{
  "file_name": "02_merchant_store_profile.sql",
  "timestamp": "/Users/sharlenechew/redshift-semantic",
  "business_question": "I need a comprehensive performance profile for all active stores in Malaysia for June 2025. Each profile should break down GMV and AOV by sales channel (offline, QR, delivery) and summarize key loyalty activity, including their active Engage campaigns and number of cashback transactions.",
  "golden_sql": "with\ns as (\n    SELECT \n        b.name bo_name,\n        -- b.subscriptionstatus,\n        b.planid,\n        case\n            when b.businesstype in ('Bar','Cafe','Food Truck','Restaurant','Restuarant','cafe','restaurant','Cafe') then 'FnB'\n            when b.businesstype in ('Retail','Retail Store','retail','E-Commerce','eCommerce','ecommerce') then 'Retail'\n            when b.businesstype in ('Salon/Spa','Service','service') then 'Service' \n            else 'Other' \n        end as biztype,\n        tr.storeid,\n        REGEXP_REPLACE (REGEXP_REPLACE (bs.name, '&#39;', ''''), '%7C;', ' - ') as storename,\n        bs.postalcode,\n        bs.city,\n        bs.state,\n        b.enablecashback,\n        -- date_trunc('month',cast(dateadd(hour,8,tr.createdtime) as date)) as \"month\",\n        COUNT(distinct case when (tr.channel is null or tr.channel = 2) then tr._id end) as \"offline txn#\",\n        sum(case when (tr.channel is null or tr.channel = 2) then tr.total end) as \"offline gmv\",\n        -- sum(case when tr.channel is null then tr.pax end) as \"pax\",\n        -- count(distinct case when tr.channel is null and tr.pax is null then tr._id end) as \"one pax\",\n        --isnull(\"pax\",0) + isnull(\"one pax\",0) as \"total pax#\",\n        count(distinct case when tr.channel = 3 and tr.shippingtype in ('dineIn','takeaway') then tr._id end) as \"qr txn#\",\n        sum(case when tr.channel = 3 and tr.shippingtype in ('dineIn','takeaway') then tr.total end) as \"qr gmv\",\n        count(distinct case when tr.channel = 3 and tr.shippingtype in ('delivery','pickup') then tr._id end) as \"bd txn#\",\n        sum(case when tr.channel = 3 and tr.shippingtype in ('delivery','pickup') then tr.total end) as \"bd gmv\"\n        --sum(t.total)/30 as \"GMV\"\n    from transformations.mask_businesses b\n    left join storehub_mongo.transactionrecords tr on b.name = tr.business\n    left join storehub_mongo.businesses__stores bs on bs._id = tr.storeid\n    where CHARINDEX('internal', b.planid) = 0 \n        and CHARINDEX('@storehub.com', b.email) = 0\n        and b.country = 'MY'\n        and b.subscriptionstatus = 'Active'\n        and (tr.channel = 3 or tr.channel is null or tr.channel = 2)\n        and tr.transactiontype = 'Sale'\n        and tr.iscancelled is not true\n        and tr.status not in ('cancelled', 'created', 'failed', 'paymentCancelled', 'pendingPayment', 'pendingVerification')\n        and tr.total<10000000\n        and tr.createdtime >= dateadd(hour,-8,'2025-06-01') and tr.createdtime < dateadd(hour,-8,'2025-07-01')\n    group by 1,2,3,4,5,6,7,8,9\n)\n, campaignjobs as ( --adopted from Year End Wrap - cust_engage - https://metabase.shub.us/question/3056\n    select\n        cj.business bo_name\n        , count(distinct cj.customerid) engage_cust_count\n    from storehub_mongo.campaignjobs cj\n    -- left join storehub_mongo.businesses b on b.name = cj.business\n    where 1=1\n        and cj.createdtime >= dateadd(hour,-8,'2022-09-23') --engage inception date\n        and lower(cj.pushstatus) in ('success')\n        and cj.globalcampaigninformationid in ('630eeb369ce7f44578cf2cab','630eeb369ce7f44578cf2cac','630eeb369ce7f44578cf2cad')  --excluded google review (customer reach)\n        and cj.createdtime >= dateadd(hour,-8,'2025-06-01') and cj.createdtime < dateadd(hour,-8,'2025-07-01')\n        --'630eeb369ce7f44578cf2cab' 'Cashback reminder', '630eeb369ce7f44578cf2cac' 'Win back lost customers'\n        --'630eeb369ce7f44578cf2cad' 'Birthday promotion', '634e466b83568a5b429f03f1' 'Boost Google Review'\n    group by 1\n)\n, cashback as (\n    select\n        cb.business bo_name\n        , txn.storeid\n        -- , count(distinct cb.customerid) cb_cust_count\n        , count(distinct cb.receiptnumber) cb_txn_count\n    from storehub_mongo.loyaltychangelogs cb\n    -- join (select * from bo_base where country in ('MY', 'TH', 'PH', 'SG')) b on cb.business = b.bo_name\n    left join (\n        select receiptnumber,status,storeid\n        from storehub_mongo.transactionrecords\n        where 1=1\n        and createdtime >= dateadd(hour,-8,'2025-06-01') and createdtime < dateadd(hour,-8,'2025-07-01')\n    ) txn on cb.receiptnumber = txn.receiptnumber\n    where 1=1\n        and cb.eventtype = 'earned'\n        and cb.rewardtype = 'cashback'\n        and txn.status not in ('cancelled','created','failed','paymentCancelled','pendingPayment','pendingVerification')\n        and cb.eventtime >= dateadd(hour,-8,'2025-06-01') and cb.eventtime < >= dateadd(hour,-8,'2025-07-01')\n    group by 1,2\n)\nselect \n    s.bo_name,\n    s.biztype,\n    s.planid,\n    s.storeid,\n    s.storename,\n    id.coordinates,\n    s.state,\n    s.postalcode,\n    s.city,\n\n    -- c.name engage_campaign,\n    listagg(c.name, '|') as engage_campaign,\n    cj.engage_cust_count,\n    s.enablecashback,\n    cb.cb_txn_count as \"cb txn#\",\n\n    s.\"offline txn#\",\n    s.\"offline gmv\",\n    case when s.\"offline txn#\" > 0 then isnull(s.\"offline gmv\",0) / s.\"offline txn#\" else null end as \"offline aov\", \n    s.\"qr txn#\",\n    s.\"qr gmv\",\n    case when s.\"qr txn#\" > 0 then isnull(s.\"qr gmv\",0) / s.\"qr txn#\" else null end as \"qr aov\",\n    s.\"bd txn#\",\n    s.\"bd gmv\",\n    case when s.\"bd txn#\" > 0 then isnull(s.\"bd gmv\",0) / s.\"bd txn#\" else null end as \"bd aov\",\n    isnull(s.\"offline gmv\",0) + isnull(s.\"qr gmv\",0) + isnull(s.\"bd gmv\",0) as \"total gmv\"\nfrom s\nleft join storehub_mongo.businesses__stores__location id on id.businesses__stores_foreignkey = s.storeid\nleft join storehub_mongo.campaigns c on c.business = s.bo_name and c.status = 'ACTIVE'\nleft join campaignjobs cj on cj.bo_name = s.bo_name\nleft join cashback cb on cb.bo_name = s.bo_name and cb.storeid = s.storeid\ngroup by 1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18,19,20,21,22",
  "ai_generated_sql": "SELECT\n  tr.sales_channel,\n  SUM(tr.net_sales) AS total_gmv,\n  AVG(tr.net_sales) AS aov,\n  COUNT(DISTINCT lc.customer_id) AS active_engage_campaign_participants,\n  COUNT(DISTINCT gtr.transaction_id) AS cashback_transaction_count\nFROM\n  transactionrecords AS tr\nJOIN\n  customers AS c ON tr.customer_id = c.customer_id\nLEFT JOIN\n  loyaltychangelogs AS lc ON tr.customer_id = lc.customer_id\nLEFT JOIN\n  gatewayrecords AS gtr ON tr.transaction_id = gtr.transaction_id\nWHERE\n  tr.business = :business_id\n  AND (tr.isdeleted != TRUE OR tr.isdeleted IS NULL)\n  AND tr.type IN ('Sale', 'Return')\n  AND tr.createdtime <= CURRENT_TIMESTAMP + INTERVAL '1 day'\n  AND tr.country = 'Malaysia'\n  AND tr.transaction_time BETWEEN '2025-06-01' AND '2025-06-30'\n  AND c.status = 'Active'  -- Assuming \"active stores\" refers to stores associated with active customers\nGROUP BY\n  tr.sales_channel;",
  "framework_context_length": 2383,
  "framework_files_loaded": [
    "semantic_context",
    "data_catalog",
    "business_rules",
    "query_patterns",
    "value_mappings",
    "query_cookbook"
  ],
  "api_result": {
    "success": true,
    "status_code": 202,
    "data": {
      "database_id": 2,
      "started_at": "2025-07-29T16:23:30.607168Z",
      "via": [
        {
          "status": "failed",
          "class": "class clojure.lang.ExceptionInfo",
          "error": "Error executing query: ERROR: syntax error at or near \":\" in context \".business = :\", at line 17, column 17\n  Position: 775",
          "stacktrace": [
            "--> driver.sql_jdbc.execute$execute_reducible_query$fn__79031$fn__79032.invoke(execute.clj:701)",
            "driver.sql_jdbc.execute$execute_reducible_query$fn__79031.invoke(execute.clj:698)",
            "driver.redshift$fn__119979$fn__119981.invoke(redshift.clj:138)",
            "driver.sql_jdbc.execute$do_with_resolved_connection.invokeStatic(execute.clj:334)",
            "driver.sql_jdbc.execute$do_with_resolved_connection.invoke(execute.clj:317)",
            "driver.redshift$fn__119979.invokeStatic(redshift.clj:123)",
            "driver.redshift$fn__119979.invoke(redshift.clj:121)",
            "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:692)",
            "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
            "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:689)",
            "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
            "driver.sql_jdbc$fn__106344.invokeStatic(sql_jdbc.clj:78)",
            "driver.sql_jdbc$fn__106344.invoke(sql_jdbc.clj:76)",
            "query_processor.context$executef.invokeStatic(context.clj:60)",
            "query_processor.context$executef.invoke(context.clj:49)",
            "query_processor.context.default$default_runf.invokeStatic(default.clj:44)",
            "query_processor.context.default$default_runf.invoke(default.clj:42)",
            "query_processor.context$runf.invokeStatic(context.clj:46)",
            "query_processor.context$runf.invoke(context.clj:40)",
            "query_processor.reducible$identity_qp.invokeStatic(reducible.clj:39)",
            "query_processor.reducible$identity_qp.invoke(reducible.clj:36)",
            "query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___71961.invoke(cache.clj:229)",
            "query_processor.middleware.permissions$check_query_permissions$fn__66347.invoke(permissions.clj:140)",
            "query_processor.middleware.enterprise$check_download_permissions_middleware$fn__71782.invoke(enterprise.clj:51)",
            "query_processor.middleware.enterprise$maybe_apply_column_level_perms_check_middleware$fn__71792.invoke(enterprise.clj:64)",
            "query_processor.middleware.mbql_to_native$mbql__GT_native$fn__71224.invoke(mbql_to_native.clj:24)",
            "query_processor$fn__73106$combined_post_process__73111$combined_post_process_STAR___73112.invoke(query_processor.clj:262)",
            "query_processor$fn__73106$combined_pre_process__73107$combined_pre_process_STAR___73108.invoke(query_processor.clj:259)",
            "query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__66444.invoke(fetch_source_query.clj:303)",
            "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872$fn__71876.invoke(resolve_database_and_driver.clj:77)",
            "driver$do_with_driver.invokeStatic(driver.clj:97)",
            "driver$do_with_driver.invoke(driver.clj:92)",
            "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872.invoke(resolve_database_and_driver.clj:76)",
            "query_processor.middleware.store$initialize_store$fn__67050$fn__67051.invoke(store.clj:14)",
            "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:169)",
            "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
            "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:158)",
            "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
            "query_processor.middleware.store$initialize_store$fn__67050.invoke(store.clj:13)",
            "query_processor.middleware.resolve_database_and_driver$resolve_database$fn__71869.invoke(resolve_database_and_driver.clj:60)",
            "query_processor.middleware.normalize_query$normalize$fn__72174.invoke(normalize_query.clj:38)",
            "query_processor.middleware.enterprise$fn__71809$handle_audit_app_internal_queries__71810$fn__71812.invoke(enterprise.clj:96)",
            "query_processor.middleware.enterprise$handle_audit_app_internal_queries_middleware$fn__71820.invoke(enterprise.clj:103)",
            "query_processor.middleware.constraints$mark_needs_default_userland_constraints$fn__70935.invoke(constraints.clj:104)",
            "query_processor.middleware.process_userland_query$process_userland_query$fn__72105.invoke(process_userland_query.clj:156)",
            "query_processor.middleware.catch_exceptions$catch_exceptions$fn__72706.invoke(catch_exceptions.clj:171)",
            "query_processor.reducible$async_qp$qp_STAR___62605$thunk__62607.invoke(reducible.clj:126)",
            "query_processor.reducible$async_qp$qp_STAR___62605.invoke(reducible.clj:132)",
            "query_processor.reducible$sync_qp$qp_STAR___62617.doInvoke(reducible.clj:153)",
            "query_processor$process_userland_query.invokeStatic(query_processor.clj:402)",
            "query_processor$process_userland_query.doInvoke(query_processor.clj:398)",
            "query_processor$process_query_and_save_execution_BANG_.invokeStatic(query_processor.clj:416)",
            "query_processor$process_query_and_save_execution_BANG_.invoke(query_processor.clj:406)",
            "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invokeStatic(query_processor.clj:431)",
            "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invoke(query_processor.clj:421)",
            "api.dataset$run_query_async$fn__93567.invoke(dataset.clj:79)",
            "query_processor.streaming$streaming_response_STAR_$fn__53135$fn__53137.invoke(streaming.clj:168)",
            "query_processor.streaming$streaming_response_STAR_$fn__53135.invoke(streaming.clj:167)",
            "async.streaming_response$do_f_STAR_.invokeStatic(streaming_response.clj:69)",
            "async.streaming_response$do_f_STAR_.invoke(streaming_response.clj:67)",
            "async.streaming_response$do_f_async$task__43750.invoke(streaming_response.clj:88)"
          ],
          "error_type": "invalid-query",
          "ex-data": {
            "driver": "redshift",
            "sql": [
              "-- /* partner: \"metabase\", {\"dashboard_id\":null,\"chart_id\":null,\"optional_user_id\":477,\"optional_account_id\":\"0a0eeb39-1c3d-4f8f-a7cc-96bace83599a\",\"filter_values\":{}} */ Metabase:: userID: 477 queryType: native queryHash: 2a3dd5abf0b4e6d454f14921a33d4128d3a2d1cb40a46c73de016b5f8c1f19a6",
              "SELECT",
              "  tr.sales_channel,",
              "  SUM(tr.net_sales) AS total_gmv,",
              "  AVG(tr.net_sales) AS aov,",
              "  COUNT(DISTINCT lc.customer_id) AS active_engage_campaign_participants,",
              "  COUNT(DISTINCT gtr.transaction_id) AS cashback_transaction_count",
              "FROM",
              "  transactionrecords AS tr",
              "  JOIN customers AS c ON tr.customer_id = c.customer_id",
              "  LEFT JOIN loyaltychangelogs AS lc ON tr.customer_id = lc.customer_id",
              "  LEFT JOIN gatewayrecords AS gtr ON tr.transaction_id = gtr.transaction_id",
              "WHERE",
              "  tr.business =: business_id",
              "  AND (",
              "    tr.isdeleted != TRUE",
              "    OR tr.isdeleted IS NULL",
              "  )",
              "  AND tr.type IN ('Sale', 'Return')",
              "  AND tr.createdtime <= CURRENT_TIMESTAMP + INTERVAL '1 day'",
              "  AND tr.country = 'Malaysia'",
              "  AND tr.transaction_time BETWEEN '2025-06-01'",
              "  AND '2025-06-30'",
              "  AND c.status = 'Active' -- Assuming \"active stores\" refers to stores associated with active customers",
              "GROUP BY",
              "  tr.sales_channel;"
            ],
            "params": null,
            "type": "invalid-query"
          }
        }
      ],
      "action_id": null,
      "state": "42601",
      "error_type": "invalid-query",
      "json_query": {
        "database": 2,
        "type": "native",
        "native": {
          "query": "SELECT\n  tr.sales_channel,\n  SUM(tr.net_sales) AS total_gmv,\n  AVG(tr.net_sales) AS aov,\n  COUNT(DISTINCT lc.customer_id) AS active_engage_campaign_participants,\n  COUNT(DISTINCT gtr.transaction_id) AS cashback_transaction_count\nFROM\n  transactionrecords AS tr\nJOIN\n  customers AS c ON tr.customer_id = c.customer_id\nLEFT JOIN\n  loyaltychangelogs AS lc ON tr.customer_id = lc.customer_id\nLEFT JOIN\n  gatewayrecords AS gtr ON tr.transaction_id = gtr.transaction_id\nWHERE\n  tr.business = :business_id\n  AND (tr.isdeleted != TRUE OR tr.isdeleted IS NULL)\n  AND tr.type IN ('Sale', 'Return')\n  AND tr.createdtime <= CURRENT_TIMESTAMP + INTERVAL '1 day'\n  AND tr.country = 'Malaysia'\n  AND tr.transaction_time BETWEEN '2025-06-01' AND '2025-06-30'\n  AND c.status = 'Active'  -- Assuming \"active stores\" refers to stores associated with active customers\nGROUP BY\n  tr.sales_channel;"
        },
        "middleware": {
          "js-int-to-string?": true,
          "add-default-userland-constraints?": true
        }
      },
      "status": "failed",
      "class": "class com.amazon.redshift.util.RedshiftException",
      "stacktrace": [
        "com.amazon.redshift.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2613)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResultsOnThread(QueryExecutorImpl.java:2281)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1886)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1878)",
        "com.amazon.redshift.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:375)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeInternal(RedshiftStatementImpl.java:515)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.execute(RedshiftStatementImpl.java:436)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeWithFlags(RedshiftStatementImpl.java:377)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeCachedSql(RedshiftStatementImpl.java:363)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.executeWithFlags(RedshiftStatementImpl.java:340)",
        "com.amazon.redshift.jdbc.RedshiftStatementImpl.execute(RedshiftStatementImpl.java:330)",
        "com.mchange.v2.c3p0.impl.NewProxyStatement.execute(NewProxyStatement.java:75)",
        "--> driver.sql_jdbc.execute$fn__78950.invokeStatic(execute.clj:560)",
        "driver.sql_jdbc.execute$fn__78950.invoke(execute.clj:558)",
        "driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invokeStatic(execute.clj:568)",
        "driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invoke(execute.clj:565)",
        "driver.sql_jdbc.execute$execute_reducible_query$fn__79031$fn__79032.invoke(execute.clj:699)",
        "driver.sql_jdbc.execute$execute_reducible_query$fn__79031.invoke(execute.clj:698)",
        "driver.redshift$fn__119979$fn__119981.invoke(redshift.clj:138)",
        "driver.sql_jdbc.execute$do_with_resolved_connection.invokeStatic(execute.clj:334)",
        "driver.sql_jdbc.execute$do_with_resolved_connection.invoke(execute.clj:317)",
        "driver.redshift$fn__119979.invokeStatic(redshift.clj:123)",
        "driver.redshift$fn__119979.invoke(redshift.clj:121)",
        "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:692)",
        "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
        "driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:689)",
        "driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:678)",
        "driver.sql_jdbc$fn__106344.invokeStatic(sql_jdbc.clj:78)",
        "driver.sql_jdbc$fn__106344.invoke(sql_jdbc.clj:76)",
        "query_processor.context$executef.invokeStatic(context.clj:60)",
        "query_processor.context$executef.invoke(context.clj:49)",
        "query_processor.context.default$default_runf.invokeStatic(default.clj:44)",
        "query_processor.context.default$default_runf.invoke(default.clj:42)",
        "query_processor.context$runf.invokeStatic(context.clj:46)",
        "query_processor.context$runf.invoke(context.clj:40)",
        "query_processor.reducible$identity_qp.invokeStatic(reducible.clj:39)",
        "query_processor.reducible$identity_qp.invoke(reducible.clj:36)",
        "query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___71961.invoke(cache.clj:229)",
        "query_processor.middleware.permissions$check_query_permissions$fn__66347.invoke(permissions.clj:140)",
        "query_processor.middleware.enterprise$check_download_permissions_middleware$fn__71782.invoke(enterprise.clj:51)",
        "query_processor.middleware.enterprise$maybe_apply_column_level_perms_check_middleware$fn__71792.invoke(enterprise.clj:64)",
        "query_processor.middleware.mbql_to_native$mbql__GT_native$fn__71224.invoke(mbql_to_native.clj:24)",
        "query_processor$fn__73106$combined_post_process__73111$combined_post_process_STAR___73112.invoke(query_processor.clj:262)",
        "query_processor$fn__73106$combined_pre_process__73107$combined_pre_process_STAR___73108.invoke(query_processor.clj:259)",
        "query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__66444.invoke(fetch_source_query.clj:303)",
        "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872$fn__71876.invoke(resolve_database_and_driver.clj:77)",
        "driver$do_with_driver.invokeStatic(driver.clj:97)",
        "driver$do_with_driver.invoke(driver.clj:92)",
        "query_processor.middleware.resolve_database_and_driver$resolve_driver_and_database_local_values$fn__71872.invoke(resolve_database_and_driver.clj:76)",
        "query_processor.middleware.store$initialize_store$fn__67050$fn__67051.invoke(store.clj:14)",
        "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:169)",
        "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
        "query_processor.store$do_with_metadata_provider.invokeStatic(store.clj:158)",
        "query_processor.store$do_with_metadata_provider.invoke(store.clj:150)",
        "query_processor.middleware.store$initialize_store$fn__67050.invoke(store.clj:13)",
        "query_processor.middleware.resolve_database_and_driver$resolve_database$fn__71869.invoke(resolve_database_and_driver.clj:60)",
        "query_processor.middleware.normalize_query$normalize$fn__72174.invoke(normalize_query.clj:38)",
        "query_processor.middleware.enterprise$fn__71809$handle_audit_app_internal_queries__71810$fn__71812.invoke(enterprise.clj:96)",
        "query_processor.middleware.enterprise$handle_audit_app_internal_queries_middleware$fn__71820.invoke(enterprise.clj:103)",
        "query_processor.middleware.constraints$mark_needs_default_userland_constraints$fn__70935.invoke(constraints.clj:104)",
        "query_processor.middleware.process_userland_query$process_userland_query$fn__72105.invoke(process_userland_query.clj:156)",
        "query_processor.middleware.catch_exceptions$catch_exceptions$fn__72706.invoke(catch_exceptions.clj:171)",
        "query_processor.reducible$async_qp$qp_STAR___62605$thunk__62607.invoke(reducible.clj:126)",
        "query_processor.reducible$async_qp$qp_STAR___62605.invoke(reducible.clj:132)",
        "query_processor.reducible$sync_qp$qp_STAR___62617.doInvoke(reducible.clj:153)",
        "query_processor$process_userland_query.invokeStatic(query_processor.clj:402)",
        "query_processor$process_userland_query.doInvoke(query_processor.clj:398)",
        "query_processor$process_query_and_save_execution_BANG_.invokeStatic(query_processor.clj:416)",
        "query_processor$process_query_and_save_execution_BANG_.invoke(query_processor.clj:406)",
        "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invokeStatic(query_processor.clj:431)",
        "query_processor$process_query_and_save_with_max_results_constraints_BANG_.invoke(query_processor.clj:421)",
        "api.dataset$run_query_async$fn__93567.invoke(dataset.clj:79)",
        "query_processor.streaming$streaming_response_STAR_$fn__53135$fn__53137.invoke(streaming.clj:168)",
        "query_processor.streaming$streaming_response_STAR_$fn__53135.invoke(streaming.clj:167)",
        "async.streaming_response$do_f_STAR_.invokeStatic(streaming_response.clj:69)",
        "async.streaming_response$do_f_STAR_.invoke(streaming_response.clj:67)",
        "async.streaming_response$do_f_async$task__43750.invoke(streaming_response.clj:88)"
      ],
      "card_id": null,
      "context": "ad-hoc",
      "error": "ERROR: syntax error at or near \":\" in context \".business = :\", at line 17, column 17\n  Position: 775",
      "row_count": 0,
      "running_time": 0,
      "data": {
        "rows": [],
        "cols": []
      }
    },
    "row_count": 0,
    "query": "SELECT\n  tr.sales_channel,\n  SUM(tr.net_sales) AS total_gmv,\n  AVG(tr.net_sales) AS aov,\n  COUNT(DISTINCT lc.customer_id) AS active_engage_campaign_participants,\n  COUNT(DISTINCT gtr.transaction_id) AS cashback_transaction_count\nFROM\n  transactionrecords AS tr\nJOIN\n  customers AS c ON tr.customer_id = c.customer_id\nLEFT JOIN\n  loyaltychangelogs AS lc ON tr.customer_id = lc.customer_id\nLEFT JOIN\n  gatewayrecords AS gtr ON tr.transaction_id = gtr.transaction_id\nWHERE\n  tr.business = :business_id\n  AND (tr.isdeleted != TRUE OR tr.isdeleted IS NULL)\n  AND tr.type IN ('Sale', 'Return')\n  AND tr.createdtime <= CURRENT_TIMESTAMP + INTERVAL '1 day'\n  AND tr.country = 'Malaysia'\n  AND tr.transaction_time BETWEEN '2025-06-01' AND '2025-06-30'\n  AND c.status = 'Active'  -- Assuming \"active stores\" refers to stores associated with active customers\nGROUP BY\n  tr.sales_channel;"
  }
}