{
  "file_name": "12_payout_summary_transaction_breakdown.sql",
  "timestamp": "/Users/sharlenechew/redshift-semantic",
  "business_question": "To perform a financial audit for the merchant 'piccolilotti' for January 2025, I need a transaction-level reconciliation report. For each online sale, please break down every financial component: gross transaction amount, all fees, logistic costs vs. profits, and the internal cost attribution for any vouchers used.",
  "golden_sql": "with txn as (\nselect distinct \n    tr.receiptnumber,\n    tr.createdtime,\n    tr.business,\n    b.country,\n    tr._id,\n    tr.status,\n    tr.channel,\n    tr.shippingtype,\n    tr.isdisbursed,\n    tr.total\n    \nfrom storehub_mongo.transactionrecords tr\n\nleft join storehub_mongo.businesses b\n    on b.name = tr.business\n    \nwhere (tr.channel = 1 or tr.channel = 3)\n    and tr.business != 'merchandise'\n    --and tr.status not in ('created', 'failed', 'paymentCancelled', 'pendingPayment', 'pendingVerification')\n    and (tr.createdtime >= dateadd(hour,-8,'2025-01-01') and tr.createdtime < dateadd(hour,-8,'2025-02-01'))\n    and tr.business = 'piccolilotti'\n    and b.country = 'MY'\n),\n\npo as (\nselect \n    pi.*,\n    bp.createdtime as bptime\n\nfrom storehub_mongo.payoutitems pi\n\nleft join storehub_mongo.batchpayouts bp\n    on bp._id = pi.batchpayoutid\n)\n/*,\n\npromo as (\nselect \n    trpromo.transactionrecords_foreignkey,\n    sum(trpromo.discount * trpromo.shpercent) as tot_disc\n    \nfrom (\n    select \n        trp.transactionrecords_foreignkey,\n        case \n            when trp.discount is not null and trp.shippingfeediscount is not null then trp.discount + trp.shippingfeediscount\n            when trp.discount is not null then trp.discount\n            when trp.shippingfeediscount is not null then trp.shippingfeediscount\n            else 0 \n        end as discount,\n        trp.storehubpaidpercentage as shpercent\n        --cast(discount as float) * cast(shpercent as float) as tot_discount\n    from storehub_mongo.transactionrecords__promotions trp \n        \n    union\n        \n    select\n        trip.transactionrecords_foreignkey,\n        trip.discount as discount,\n        trip.storehubpaidpercentage as shpercent\n        --sum(discount * shpercent) as tot_discount\n    from storehub_mongo.transactionrecords__items__promotions trip\n    \n    where trip.promotiontype = 'universal' \n        and trip.storehubpaidpercentage > 0\n    ) trpromo\n\ngroup by 1\n)\n*/\n\nselect distinct \n    dateadd(hour,8,txn.createdtime) as \"Transaction time\",\n    dateadd(hour,8,po.bptime) as \"Payout time\",\n    txn.country,\n    txn.business, \n    txn.receiptnumber as \"receipt number\",\n    txn._id as \"transaction id\",\n    txn.status,\n    case \n        when txn.channel = 1 then 'Ecomm'\n        when txn.channel = 3 then 'Beep'\n    end as \"channel\",\n    case\n        when txn.channel = 3 and txn.shippingtype in ('delivery','pickup') then 'Beep Delivery'\n        when txn.channel = 3 and txn.shippingtype in ('takeaway','dineIn') then 'Beep QR'\n        when txn.channel = 1 then 'Ecomm'\n    end as \"channel2\",\n    txn.shippingtype,\n    trdi.usestorehublogistics,\n    trdi.courier,\n    txn.isdisbursed,\n    txn.total as \"Transaction Amount\",\n    --trpm.paymentprovider,\n    --trpm.paymentgateway,\n    --gr.paymentgateway,\n    po.paymentgateway as \"payment gateway\",\n    po.cause as \"Payout reason\",\n    po.amount as \"Payout amount\",\n    --\"Payout amount - Sell\" + \"Payout amount - Adjustment\" as \"Total Payout amount\",\n    -- sum(trav.value) as \"Voucher value\",\n    case \n        when trav._id is not null and trav.purchasechannel = 'cleverTapWebhook' then trav.value\n        when trav._id is not null and trav.purchasechannel = 'ist' and lower(trav.remarks) like 'marketing/%' and trav.remarks not like '%VBeepGiftVouchers/%' then trav.value\n        else 0\n    end as \"Voucher payout - MKT\",\n    case\n        when trav._id is not null and trav.purchasechannel = 'ist' and lower(trav.remarks) like 'people/%' then trav.value\n        else 0\n    end as \"Voucher payout - People\",\n    case\n        when trav._id is not null and trav.purchasechannel = 'ist' and lower(trav.remarks) like 'care/%' then trav.value\n        when trav._id is not null and trav.purchasechannel = 'ist' and trav.remarks = '' then trav.value\n        when trav._id is not null and trav.purchasechannel = 'systemRefund' then trav.value\n        else 0\n    end as \"Voucher payout - Care\",\n    case\n        when trav._id is not null and trav.purchasechannel = 'ist' and lower(trav.remarks) like 'product/%' then trav.value\n        else 0\n    end as \"Voucher payout - Product\",\n    case\n        when trav._id is not null and trav.purchasechannel = 'ist' and trav.remarks like '%VBeepGiftVouchers/%' then trav.value\n        else 0\n    end as \"Voucher payout - Sold\",\n    case\n        when trav._id is not null and trav.purchasechannel = 'ist' and trav.remarks <> '' and (lower(trav.remarks) not like 'product/%' and lower(trav.remarks) not like 'care/%' and lower(trav.remarks) not like 'marketing/%' and lower(trav.remarks) not like 'people/%' and trav.remarks not like '%VBeepGiftVouchers/%') then trav.value \n        when trav._id is not null and trav.purchasechannel = '' then trav.value\n        else 0\n    end as \"Voucher payout - Others\",\n    case\n        when trav._id is not null and trav.purchasechannel = 'beep' then trav.value\n        else 0\n    end as \"Merchant Beep Voucher\",\n    trav.coveredbysh,\n    /*sum(case \n            when trav.purchasechannel = 'beep' then 0\n            when trav._id is not null then trav.value\n            else 0 end) as \"Total voucher payout\",*/\n    (case when po.cause = 'sell' then isnull(gr.fee,0) - isnull(pso.paymentgatewaycost,0) else 0 end) as \"Payment Gateway Cost\",\n    isnull(po.paymentgatewayfee,0) as \"Payment Gateway Fee\",\n    -(\"Payment Gateway Fee\" - \"Payment Gateway Cost\") as \"Payment Gateway Profit\",\n    (case when po.cause = 'sell' then trdi.shippingfee else 0 end) as \"Customer paid delivery fee\",\n    -(case when po.cause = 'sell' and trdi.courier != 'onfleet' then trdi.deliveryfee else 0 end) as \"Logistic Cost (OnFleet excluded)\",\n    (case when trdi.courier != 'onfleet' then po.logisticsfee else 0 end) as \"Logistic Fee (OnFleet excluded)\",\n    -(\"Logistic Fee (OnFleet excluded)\" - \"Logistic Cost (OnFleet excluded)\") as \"Logistic Profit (Onfleet excluded)\",\n    -(po.transactionfee) as \"Storehub Fee (Transaction Fee)\",\n    --count(distinct pi.receiptnumber) as \"# of txn\",\n    (case when trdi.courier = 'onfleet' then po.logisticsfee else 0 end) as \"Logistic Fee (OnFleet only)\",\n    --sum(case when pi.cause = 'adjustment' then pi.amount else 0 end) as \"Adjustment Amount\",\n    --(case when po.cause = 'sell' then isnull(promo.tot_disc,0) else 0 end) as \"Storehub Paid Promo Discount\",\n    (case when po.cause = 'sell' then isnull(po.promotionamount,0) else 0 end) as \"Storehub Paid Promo Amount\",\n    --(case when po.cause = 'sell' then isnull(po.voucheramount,0) else 0 end) as \"Storehub Paid Voucher Amount\",\n    (case when po.cause = 'sell' then isnull(po.refundedamount,0) else 0 end) as \"Refunded Amount\",\n    (case when po.cause = 'sell' then po.pickupsmsfee else 0 end) as \"pick up sms fee\"\n\nfrom txn\n    \nleft join po \n    on po.receiptnumber = txn.receiptnumber\n\n--left join promo\n--    on promo.transactionrecords_foreignkey = txn._id\n\nleft join (\n    select \n        ta._id,\n        ta.voucherid,\n        ta.purchasechannel,\n        vc.remarks, \n        ta.value,\n        ta.transactionrecords_foreignkey,\n        ta.coveredbysh\n    from storehub_mongo.transactionrecords__appliedvoucher ta\n    left join storehub_mongo.vouchers vc\n        on ta.voucherid = vc._id\n    ) trav\n    on trav.transactionrecords_foreignkey = txn._id\n\nleft join storehub_mongo.transactionrecords__deliveryinformation trdi \n    on trdi.transactionrecords_foreignkey = txn._id\n    \nleft join (\n    select * \n    from storehub_mongo.gatewayrecords gr\n    where gr.transactiontype = 'payment' \n        and gr.reconstatus = 'passed'\n    ) gr \n    on gr.receiptnumber = po.receiptnumber\n\nleft join storehub_mongo.paymentsettlements__orders pso \n    on pso.receiptnumber = txn.receiptnumber\n\nleft join storehub_mongo.transactionrecords__payments trpm \n    on trpm.transactionrecords_foreignkey = txn._id\n\nwhere txn.status not in ('created', 'failed', 'paymentCancelled', 'pendingPayment', 'pendingVerification')\n    --and (tr.channel = 1 or tr.channel = 3)\n    --and (pi.cause = 'sell' or pi.cause = 'cancel')\n    --and tr.business != 'merchandise'\n    --and NOT (lower(b.\"planid\") like '%internal%')\n    --AND tr.\"status\" <> 'cancelled' AND tr.\"status\" <> 'failed' AND tr.\"status\" <> 'paymentCancelled' AND tr.\"status\" <> 'pendingPayment' AND tr.\"status\" <> 'pendingVerification' AND tr.\"status\" <> 'created'\n    --and tr.receiptnumber in ('803984100346862','802709001037705','803678576452200','802351208741894','803917265829970','803614169112991','803539823849427')\n    --and txn.receiptnumber in ('807865893205675','807247408750412','807247613545480')\n\n--group by 1,2,3,4,5,6,7,8,9,10,11,12,13\norder by \"Transaction time\" desc,  \"receipt number\" ASC, \"Payout reason\" DESC",
  "ai_generated_sql": "WITH txn AS (\n    SELECT\n        tr.receiptnumber,\n        tr.createdtime,\n        tr.business,\n        b.country,\n        tr._id,\n        tr.status,\n        tr.channel,\n        tr.shippingtype,\n        tr.total\n    FROM storehub_mongo.transactionrecords AS tr\n    LEFT JOIN storehub_mongo.businesses AS b\n        ON b.name = tr.business\n    WHERE\n        (tr.channel = 1 OR tr.channel = 3)\n        AND tr.business = 'piccolilotti'\n        AND b.country = 'MY'\n        AND tr.createdtime >= DATEADD(hour, -8, '2025-01-01')\n        AND tr.createdtime < DATEADD(hour, -8, '2025-02-01')\n), po AS (\n    SELECT\n        pi.*,\n        bp.createdtime AS bptime\n    FROM storehub_mongo.payoutitems AS pi\n    LEFT JOIN storehub_mongo.batchpayouts AS bp\n        ON bp._id = pi.batchpayoutid\n), trav AS (\n    SELECT\n        ta._id,\n        ta.voucherid,\n        ta.purchasechannel,\n        vc.remarks,\n        ta.value,\n        ta.transactionrecords_foreignkey,\n        ta.coveredbysh\n    FROM storehub_mongo.transactionrecords__appliedvoucher AS ta\n    LEFT JOIN storehub_mongo.vouchers AS vc\n        ON ta.voucherid = vc._id\n), trdi AS (\n    SELECT\n        *\n    FROM storehub_mongo.transactionrecords__deliveryinformation\n), gr AS (\n    SELECT\n        *\n    FROM storehub_mongo.gatewayrecords\n    WHERE\n        transactiontype = 'payment' AND reconstatus = 'passed'\n), pso AS (\n    SELECT\n        *\n    FROM storehub_mongo.paymentsettlements__orders\n), trpm AS (\n  SELECT *\n  FROM storehub_mongo.transactionrecords__payments\n)\nSELECT\n    txn.total AS gross_transaction_amount,\n    po.paymentgatewayfee AS payment_gateway_fee,\n    gr.fee AS gateway_cost,\n    pso.paymentgatewaycost AS payment_settlement_cost,\n    trdi.shippingfee AS customer_paid_delivery_fee,\n    trdi.deliveryfee AS logistic_cost,\n    po.logisticsfee AS logistic_fee,\n    po.transactionfee AS storehub_fee,\n    po.promotionamount AS storehub_paid_promo_amount,\n    po.refundedamount AS refunded_amount,\n    trav.value AS voucher_value,\n    trav.purchasechannel AS voucher_purchase_channel,\n    trav.remarks AS voucher_remarks\nFROM txn\nLEFT JOIN po\n    ON po.receiptnumber = txn.receiptnumber\nLEFT JOIN trav\n    ON trav.transactionrecords_foreignkey = txn._id\nLEFT JOIN trdi\n    ON trdi.transactionrecords_foreignkey = txn._id\nLEFT JOIN gr\n    ON gr.receiptnumber = po.receiptnumber\nLEFT JOIN pso\n    ON pso.receiptnumber = txn.receiptnumber\nLEFT JOIN trpm\n    ON trpm.transactionrecords_foreignkey = txn._id\nWHERE txn.status NOT IN ('created', 'failed', 'paymentCancelled', 'pendingPayment', 'pendingVerification');",
  "api_result": {
    "success": false,
    "status_code": null,
    "error": "HTTPSConnectionPool(host='metabase.shub.us', port=443): Read timed out. (read timeout=30)",
    "query": "WITH txn AS (\n    SELECT\n        tr.receiptnumber,\n        tr.createdtime,\n        tr.business,\n        b.country,\n        tr._id,\n        tr.status,\n        tr.channel,\n        tr.shippingtype,\n        tr.total\n    FROM storehub_mongo.transactionrecords AS tr\n    LEFT JOIN storehub_mongo.businesses AS b\n        ON b.name = tr.business\n    WHERE\n        (tr.channel = 1 OR tr.channel = 3)\n        AND tr.business = 'piccolilotti'\n        AND b.country = 'MY'\n        AND tr.createdtime >= DATEADD(hour, -8, '2025-01-01')\n        AND tr.createdtime < DATEADD(hour, -8, '2025-02-01')\n), po AS (\n    SELECT\n        pi.*,\n        bp.createdtime AS bptime\n    FROM storehub_mongo.payoutitems AS pi\n    LEFT JOIN storehub_mongo.batchpayouts AS bp\n        ON bp._id = pi.batchpayoutid\n), trav AS (\n    SELECT\n        ta._id,\n        ta.voucherid,\n        ta.purchasechannel,\n        vc.remarks,\n        ta.value,\n        ta.transactionrecords_foreignkey,\n        ta.coveredbysh\n    FROM storehub_mongo.transactionrecords__appliedvoucher AS ta\n    LEFT JOIN storehub_mongo.vouchers AS vc\n        ON ta.voucherid = vc._id\n), trdi AS (\n    SELECT\n        *\n    FROM storehub_mongo.transactionrecords__deliveryinformation\n), gr AS (\n    SELECT\n        *\n    FROM storehub_mongo.gatewayrecords\n    WHERE\n        transactiontype = 'payment' AND reconstatus = 'passed'\n), pso AS (\n    SELECT\n        *\n    FROM storehub_mongo.paymentsettlements__orders\n), trpm AS (\n  SELECT *\n  FROM storehub_mongo.transactionrecords__payments\n)\nSELECT\n    txn.total AS gross_transaction_amount,\n    po.paymentgatewayfee AS payment_gateway_fee,\n    gr.fee AS gateway_cost,\n    pso.paymentgatewaycost AS payment_settlement_cost,\n    trdi.shippingfee AS customer_paid_delivery_fee,\n    trdi.deliveryfee AS logistic_cost,\n    po.logisticsfee AS logistic_fee,\n    po.transactionfee AS storehub_fee,\n    po.promotionamount AS storehub_paid_promo_amount,\n    po.refundedamount AS refunded_amount,\n    trav.value AS voucher_value,\n    trav.purchasechannel AS voucher_purchase_channel,\n    trav.remarks AS voucher_remarks\nFROM txn\nLEFT JOIN po\n    ON po.receiptnumber = txn.receiptnumber\nLEFT JOIN trav\n    ON trav.transactionrecords_foreignkey = txn._id\nLEFT JOIN trdi\n    ON trdi.transactionrecords_foreignkey = txn._id\nLEFT JOIN gr\n    ON gr.receiptnumber = po.receiptnumber\nLEFT JOIN pso\n    ON pso.receiptnumber = txn.receiptnumber\nLEFT JOIN trpm\n    ON trpm.transactionrecords_foreignkey = txn._id\nWHERE txn.status NOT IN ('created', 'failed', 'paymentCancelled', 'pendingPayment', 'pendingVerification');"
  }
}